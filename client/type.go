// AUTOGENERATED

package client

import (
	"encoding/json"
)

// Class constants.
const (
	ClassAuthenticationCodeType             = "AuthenticationCodeType"
	ClassAuthorizationState                 = "AuthorizationState"
	ClassInputFile                          = "InputFile"
	ClassMaskPoint                          = "MaskPoint"
	ClassLinkState                          = "LinkState"
	ClassUserType                           = "UserType"
	ClassChatMemberStatus                   = "ChatMemberStatus"
	ClassChatMembersFilter                  = "ChatMembersFilter"
	ClassSupergroupMembersFilter            = "SupergroupMembersFilter"
	ClassSecretChatState                    = "SecretChatState"
	ClassMessageForwardInfo                 = "MessageForwardInfo"
	ClassMessageSendingState                = "MessageSendingState"
	ClassNotificationSettingsScope          = "NotificationSettingsScope"
	ClassChatType                           = "ChatType"
	ClassKeyboardButtonType                 = "KeyboardButtonType"
	ClassInlineKeyboardButtonType           = "InlineKeyboardButtonType"
	ClassReplyMarkup                        = "ReplyMarkup"
	ClassRichText                           = "RichText"
	ClassPageBlock                          = "PageBlock"
	ClassInputCredentials                   = "InputCredentials"
	ClassPassportElementType                = "PassportElementType"
	ClassPassportElement                    = "PassportElement"
	ClassInputPassportElement               = "InputPassportElement"
	ClassPassportElementErrorSource         = "PassportElementErrorSource"
	ClassInputPassportElementErrorSource    = "InputPassportElementErrorSource"
	ClassMessageContent                     = "MessageContent"
	ClassTextEntityType                     = "TextEntityType"
	ClassInputMessageContent                = "InputMessageContent"
	ClassSearchMessagesFilter               = "SearchMessagesFilter"
	ClassChatAction                         = "ChatAction"
	ClassUserStatus                         = "UserStatus"
	ClassCallDiscardReason                  = "CallDiscardReason"
	ClassCallState                          = "CallState"
	ClassInputInlineQueryResult             = "InputInlineQueryResult"
	ClassInlineQueryResult                  = "InlineQueryResult"
	ClassCallbackQueryPayload               = "CallbackQueryPayload"
	ClassChatEventAction                    = "ChatEventAction"
	ClassLanguagePackStringValue            = "LanguagePackStringValue"
	ClassDeviceToken                        = "DeviceToken"
	ClassCheckChatUsernameResult            = "CheckChatUsernameResult"
	ClassOptionValue                        = "OptionValue"
	ClassUserPrivacySettingRule             = "UserPrivacySettingRule"
	ClassUserPrivacySetting                 = "UserPrivacySetting"
	ClassChatReportReason                   = "ChatReportReason"
	ClassFileType                           = "FileType"
	ClassNetworkType                        = "NetworkType"
	ClassNetworkStatisticsEntry             = "NetworkStatisticsEntry"
	ClassConnectionState                    = "ConnectionState"
	ClassTopChatCategory                    = "TopChatCategory"
	ClassTMeURLType                         = "TMeURLType"
	ClassTextParseMode                      = "TextParseMode"
	ClassProxyType                          = "ProxyType"
	ClassUpdate                             = "Update"
	ClassError                              = "Error"
	ClassOk                                 = "Ok"
	ClassTdlibParameters                    = "TdlibParameters"
	ClassAuthenticationCodeInfo             = "AuthenticationCodeInfo"
	ClassEmailAddressAuthenticationCodeInfo = "EmailAddressAuthenticationCodeInfo"
	ClassTextEntity                         = "TextEntity"
	ClassTextEntities                       = "TextEntities"
	ClassFormattedText                      = "FormattedText"
	ClassTermsOfService                     = "TermsOfService"
	ClassPasswordState                      = "PasswordState"
	ClassRecoveryEmailAddress               = "RecoveryEmailAddress"
	ClassTemporaryPasswordState             = "TemporaryPasswordState"
	ClassLocalFile                          = "LocalFile"
	ClassRemoteFile                         = "RemoteFile"
	ClassFile                               = "File"
	ClassPhotoSize                          = "PhotoSize"
	ClassMaskPosition                       = "MaskPosition"
	ClassAnimation                          = "Animation"
	ClassAudio                              = "Audio"
	ClassDocument                           = "Document"
	ClassPhoto                              = "Photo"
	ClassSticker                            = "Sticker"
	ClassVideo                              = "Video"
	ClassVideoNote                          = "VideoNote"
	ClassVoiceNote                          = "VoiceNote"
	ClassContact                            = "Contact"
	ClassLocation                           = "Location"
	ClassVenue                              = "Venue"
	ClassGame                               = "Game"
	ClassProfilePhoto                       = "ProfilePhoto"
	ClassChatPhoto                          = "ChatPhoto"
	ClassBotCommand                         = "BotCommand"
	ClassBotInfo                            = "BotInfo"
	ClassUser                               = "User"
	ClassUserFullInfo                       = "UserFullInfo"
	ClassUserProfilePhotos                  = "UserProfilePhotos"
	ClassUsers                              = "Users"
	ClassChatMember                         = "ChatMember"
	ClassChatMembers                        = "ChatMembers"
	ClassBasicGroup                         = "BasicGroup"
	ClassBasicGroupFullInfo                 = "BasicGroupFullInfo"
	ClassSupergroup                         = "Supergroup"
	ClassSupergroupFullInfo                 = "SupergroupFullInfo"
	ClassSecretChat                         = "SecretChat"
	ClassMessage                            = "Message"
	ClassMessages                           = "Messages"
	ClassFoundMessages                      = "FoundMessages"
	ClassChatNotificationSettings           = "ChatNotificationSettings"
	ClassScopeNotificationSettings          = "ScopeNotificationSettings"
	ClassDraftMessage                       = "DraftMessage"
	ClassChat                               = "Chat"
	ClassChats                              = "Chats"
	ClassChatInviteLink                     = "ChatInviteLink"
	ClassChatInviteLinkInfo                 = "ChatInviteLinkInfo"
	ClassKeyboardButton                     = "KeyboardButton"
	ClassInlineKeyboardButton               = "InlineKeyboardButton"
	ClassWebPageInstantView                 = "WebPageInstantView"
	ClassWebPage                            = "WebPage"
	ClassAddress                            = "Address"
	ClassLabeledPricePart                   = "LabeledPricePart"
	ClassInvoice                            = "Invoice"
	ClassOrderInfo                          = "OrderInfo"
	ClassShippingOption                     = "ShippingOption"
	ClassSavedCredentials                   = "SavedCredentials"
	ClassPaymentsProviderStripe             = "PaymentsProviderStripe"
	ClassPaymentForm                        = "PaymentForm"
	ClassValidatedOrderInfo                 = "ValidatedOrderInfo"
	ClassPaymentResult                      = "PaymentResult"
	ClassPaymentReceipt                     = "PaymentReceipt"
	ClassDatedFile                          = "DatedFile"
	ClassDate                               = "Date"
	ClassPersonalDetails                    = "PersonalDetails"
	ClassIdentityDocument                   = "IdentityDocument"
	ClassInputIdentityDocument              = "InputIdentityDocument"
	ClassPersonalDocument                   = "PersonalDocument"
	ClassInputPersonalDocument              = "InputPersonalDocument"
	ClassPassportElements                   = "PassportElements"
	ClassPassportElementError               = "PassportElementError"
	ClassPassportSuitableElement            = "PassportSuitableElement"
	ClassPassportRequiredElement            = "PassportRequiredElement"
	ClassPassportAuthorizationForm          = "PassportAuthorizationForm"
	ClassEncryptedCredentials               = "EncryptedCredentials"
	ClassEncryptedPassportElement           = "EncryptedPassportElement"
	ClassInputPassportElementError          = "InputPassportElementError"
	ClassInputThumbnail                     = "InputThumbnail"
	ClassStickers                           = "Stickers"
	ClassStickerEmojis                      = "StickerEmojis"
	ClassStickerSet                         = "StickerSet"
	ClassStickerSetInfo                     = "StickerSetInfo"
	ClassStickerSets                        = "StickerSets"
	ClassCallProtocol                       = "CallProtocol"
	ClassCallConnection                     = "CallConnection"
	ClassCallID                             = "CallID"
	ClassCall                               = "Call"
	ClassAnimations                         = "Animations"
	ClassImportedContacts                   = "ImportedContacts"
	ClassInlineQueryResults                 = "InlineQueryResults"
	ClassCallbackQueryAnswer                = "CallbackQueryAnswer"
	ClassCustomRequestResult                = "CustomRequestResult"
	ClassGameHighScore                      = "GameHighScore"
	ClassGameHighScores                     = "GameHighScores"
	ClassChatEvent                          = "ChatEvent"
	ClassChatEvents                         = "ChatEvents"
	ClassChatEventLogFilters                = "ChatEventLogFilters"
	ClassLanguagePackString                 = "LanguagePackString"
	ClassLanguagePackStrings                = "LanguagePackStrings"
	ClassLanguagePackInfo                   = "LanguagePackInfo"
	ClassLocalizationTargetInfo             = "LocalizationTargetInfo"
	ClassWallpaper                          = "Wallpaper"
	ClassWallpapers                         = "Wallpapers"
	ClassHashtags                           = "Hashtags"
	ClassUserPrivacySettingRules            = "UserPrivacySettingRules"
	ClassAccountTTL                         = "AccountTTL"
	ClassSession                            = "Session"
	ClassSessions                           = "Sessions"
	ClassConnectedWebsite                   = "ConnectedWebsite"
	ClassConnectedWebsites                  = "ConnectedWebsites"
	ClassChatReportSpamState                = "ChatReportSpamState"
	ClassPublicMessageLink                  = "PublicMessageLink"
	ClassStorageStatisticsByFileType        = "StorageStatisticsByFileType"
	ClassStorageStatisticsByChat            = "StorageStatisticsByChat"
	ClassStorageStatistics                  = "StorageStatistics"
	ClassStorageStatisticsFast              = "StorageStatisticsFast"
	ClassNetworkStatistics                  = "NetworkStatistics"
	ClassTMeURL                             = "TMeURL"
	ClassTMeURLs                            = "TMeURLs"
	ClassCount                              = "Count"
	ClassText                               = "Text"
	ClassSeconds                            = "Seconds"
	ClassDeepLinkInfo                       = "DeepLinkInfo"
	ClassProxy                              = "Proxy"
	ClassProxies                            = "Proxies"
	ClassInputSticker                       = "InputSticker"
	ClassTestInt                            = "TestInt"
	ClassTestString                         = "TestString"
	ClassTestBytes                          = "TestBytes"
	ClassTestVectorInt                      = "TestVectorInt"
	ClassTestVectorIntObject                = "TestVectorIntObject"
	ClassTestVectorString                   = "TestVectorString"
	ClassTestVectorStringObject             = "TestVectorStringObject"
)

// Type constants.
const (
	TypeError                                           = "error"
	TypeOk                                              = "ok"
	TypeTdlibParameters                                 = "tdlibParameters"
	TypeAuthenticationCodeTypeTelegramMessage           = "authenticationCodeTypeTelegramMessage"
	TypeAuthenticationCodeTypeSms                       = "authenticationCodeTypeSms"
	TypeAuthenticationCodeTypeCall                      = "authenticationCodeTypeCall"
	TypeAuthenticationCodeTypeFlashCall                 = "authenticationCodeTypeFlashCall"
	TypeAuthenticationCodeInfo                          = "authenticationCodeInfo"
	TypeEmailAddressAuthenticationCodeInfo              = "emailAddressAuthenticationCodeInfo"
	TypeTextEntity                                      = "textEntity"
	TypeTextEntities                                    = "textEntities"
	TypeFormattedText                                   = "formattedText"
	TypeTermsOfService                                  = "termsOfService"
	TypeAuthorizationStateWaitTdlibParameters           = "authorizationStateWaitTdlibParameters"
	TypeAuthorizationStateWaitEncryptionKey             = "authorizationStateWaitEncryptionKey"
	TypeAuthorizationStateWaitPhoneNumber               = "authorizationStateWaitPhoneNumber"
	TypeAuthorizationStateWaitCode                      = "authorizationStateWaitCode"
	TypeAuthorizationStateWaitPassword                  = "authorizationStateWaitPassword"
	TypeAuthorizationStateReady                         = "authorizationStateReady"
	TypeAuthorizationStateLoggingOut                    = "authorizationStateLoggingOut"
	TypeAuthorizationStateClosing                       = "authorizationStateClosing"
	TypeAuthorizationStateClosed                        = "authorizationStateClosed"
	TypePasswordState                                   = "passwordState"
	TypeRecoveryEmailAddress                            = "recoveryEmailAddress"
	TypeTemporaryPasswordState                          = "temporaryPasswordState"
	TypeLocalFile                                       = "localFile"
	TypeRemoteFile                                      = "remoteFile"
	TypeFile                                            = "file"
	TypeInputFileID                                     = "inputFileID"
	TypeInputFileRemote                                 = "inputFileRemote"
	TypeInputFileLocal                                  = "inputFileLocal"
	TypeInputFileGenerated                              = "inputFileGenerated"
	TypePhotoSize                                       = "photoSize"
	TypeMaskPointForehead                               = "maskPointForehead"
	TypeMaskPointEyes                                   = "maskPointEyes"
	TypeMaskPointMouth                                  = "maskPointMouth"
	TypeMaskPointChin                                   = "maskPointChin"
	TypeMaskPosition                                    = "maskPosition"
	TypeAnimation                                       = "animation"
	TypeAudio                                           = "audio"
	TypeDocument                                        = "document"
	TypePhoto                                           = "photo"
	TypeSticker                                         = "sticker"
	TypeVideo                                           = "video"
	TypeVideoNote                                       = "videoNote"
	TypeVoiceNote                                       = "voiceNote"
	TypeContact                                         = "contact"
	TypeLocation                                        = "location"
	TypeVenue                                           = "venue"
	TypeGame                                            = "game"
	TypeProfilePhoto                                    = "profilePhoto"
	TypeChatPhoto                                       = "chatPhoto"
	TypeLinkStateNone                                   = "linkStateNone"
	TypeLinkStateKnowsPhoneNumber                       = "linkStateKnowsPhoneNumber"
	TypeLinkStateIsContact                              = "linkStateIsContact"
	TypeUserTypeRegular                                 = "userTypeRegular"
	TypeUserTypeDeleted                                 = "userTypeDeleted"
	TypeUserTypeBot                                     = "userTypeBot"
	TypeUserTypeUnknown                                 = "userTypeUnknown"
	TypeBotCommand                                      = "botCommand"
	TypeBotInfo                                         = "botInfo"
	TypeUser                                            = "user"
	TypeUserFullInfo                                    = "userFullInfo"
	TypeUserProfilePhotos                               = "userProfilePhotos"
	TypeUsers                                           = "users"
	TypeChatMemberStatusCreator                         = "chatMemberStatusCreator"
	TypeChatMemberStatusAdministrator                   = "chatMemberStatusAdministrator"
	TypeChatMemberStatusMember                          = "chatMemberStatusMember"
	TypeChatMemberStatusRestricted                      = "chatMemberStatusRestricted"
	TypeChatMemberStatusLeft                            = "chatMemberStatusLeft"
	TypeChatMemberStatusBanned                          = "chatMemberStatusBanned"
	TypeChatMember                                      = "chatMember"
	TypeChatMembers                                     = "chatMembers"
	TypeChatMembersFilterAdministrators                 = "chatMembersFilterAdministrators"
	TypeChatMembersFilterMembers                        = "chatMembersFilterMembers"
	TypeChatMembersFilterRestricted                     = "chatMembersFilterRestricted"
	TypeChatMembersFilterBanned                         = "chatMembersFilterBanned"
	TypeChatMembersFilterBots                           = "chatMembersFilterBots"
	TypeSupergroupMembersFilterRecent                   = "supergroupMembersFilterRecent"
	TypeSupergroupMembersFilterAdministrators           = "supergroupMembersFilterAdministrators"
	TypeSupergroupMembersFilterSearch                   = "supergroupMembersFilterSearch"
	TypeSupergroupMembersFilterRestricted               = "supergroupMembersFilterRestricted"
	TypeSupergroupMembersFilterBanned                   = "supergroupMembersFilterBanned"
	TypeSupergroupMembersFilterBots                     = "supergroupMembersFilterBots"
	TypeBasicGroup                                      = "basicGroup"
	TypeBasicGroupFullInfo                              = "basicGroupFullInfo"
	TypeSupergroup                                      = "supergroup"
	TypeSupergroupFullInfo                              = "supergroupFullInfo"
	TypeSecretChatStatePending                          = "secretChatStatePending"
	TypeSecretChatStateReady                            = "secretChatStateReady"
	TypeSecretChatStateClosed                           = "secretChatStateClosed"
	TypeSecretChat                                      = "secretChat"
	TypeMessageForwardedFromUser                        = "messageForwardedFromUser"
	TypeMessageForwardedPost                            = "messageForwardedPost"
	TypeMessageSendingStatePending                      = "messageSendingStatePending"
	TypeMessageSendingStateFailed                       = "messageSendingStateFailed"
	TypeMessage                                         = "message"
	TypeMessages                                        = "messages"
	TypeFoundMessages                                   = "foundMessages"
	TypeNotificationSettingsScopePrivateChats           = "notificationSettingsScopePrivateChats"
	TypeNotificationSettingsScopeGroupChats             = "notificationSettingsScopeGroupChats"
	TypeChatNotificationSettings                        = "chatNotificationSettings"
	TypeScopeNotificationSettings                       = "scopeNotificationSettings"
	TypeDraftMessage                                    = "draftMessage"
	TypeChatTypePrivate                                 = "chatTypePrivate"
	TypeChatTypeBasicGroup                              = "chatTypeBasicGroup"
	TypeChatTypeSupergroup                              = "chatTypeSupergroup"
	TypeChatTypeSecret                                  = "chatTypeSecret"
	TypeChat                                            = "chat"
	TypeChats                                           = "chats"
	TypeChatInviteLink                                  = "chatInviteLink"
	TypeChatInviteLinkInfo                              = "chatInviteLinkInfo"
	TypeKeyboardButtonTypeText                          = "keyboardButtonTypeText"
	TypeKeyboardButtonTypeRequestPhoneNumber            = "keyboardButtonTypeRequestPhoneNumber"
	TypeKeyboardButtonTypeRequestLocation               = "keyboardButtonTypeRequestLocation"
	TypeKeyboardButton                                  = "keyboardButton"
	TypeInlineKeyboardButtonTypeURL                     = "inlineKeyboardButtonTypeURL"
	TypeInlineKeyboardButtonTypeCallback                = "inlineKeyboardButtonTypeCallback"
	TypeInlineKeyboardButtonTypeCallbackGame            = "inlineKeyboardButtonTypeCallbackGame"
	TypeInlineKeyboardButtonTypeSwitchInline            = "inlineKeyboardButtonTypeSwitchInline"
	TypeInlineKeyboardButtonTypeBuy                     = "inlineKeyboardButtonTypeBuy"
	TypeInlineKeyboardButton                            = "inlineKeyboardButton"
	TypeReplyMarkupRemoveKeyboard                       = "replyMarkupRemoveKeyboard"
	TypeReplyMarkupForceReply                           = "replyMarkupForceReply"
	TypeReplyMarkupShowKeyboard                         = "replyMarkupShowKeyboard"
	TypeReplyMarkupInlineKeyboard                       = "replyMarkupInlineKeyboard"
	TypeRichTextPlain                                   = "richTextPlain"
	TypeRichTextBold                                    = "richTextBold"
	TypeRichTextItalic                                  = "richTextItalic"
	TypeRichTextUnderline                               = "richTextUnderline"
	TypeRichTextStrikethrough                           = "richTextStrikethrough"
	TypeRichTextFixed                                   = "richTextFixed"
	TypeRichTextURL                                     = "richTextURL"
	TypeRichTextEmailAddress                            = "richTextEmailAddress"
	TypeRichTexts                                       = "richTexts"
	TypePageBlockTitle                                  = "pageBlockTitle"
	TypePageBlockSubtitle                               = "pageBlockSubtitle"
	TypePageBlockAuthorDate                             = "pageBlockAuthorDate"
	TypePageBlockHeader                                 = "pageBlockHeader"
	TypePageBlockSubheader                              = "pageBlockSubheader"
	TypePageBlockParagraph                              = "pageBlockParagraph"
	TypePageBlockPreformatted                           = "pageBlockPreformatted"
	TypePageBlockFooter                                 = "pageBlockFooter"
	TypePageBlockDivider                                = "pageBlockDivider"
	TypePageBlockAnchor                                 = "pageBlockAnchor"
	TypePageBlockList                                   = "pageBlockList"
	TypePageBlockBlockQuote                             = "pageBlockBlockQuote"
	TypePageBlockPullQuote                              = "pageBlockPullQuote"
	TypePageBlockAnimation                              = "pageBlockAnimation"
	TypePageBlockAudio                                  = "pageBlockAudio"
	TypePageBlockPhoto                                  = "pageBlockPhoto"
	TypePageBlockVideo                                  = "pageBlockVideo"
	TypePageBlockCover                                  = "pageBlockCover"
	TypePageBlockEmbedded                               = "pageBlockEmbedded"
	TypePageBlockEmbeddedPost                           = "pageBlockEmbeddedPost"
	TypePageBlockCollage                                = "pageBlockCollage"
	TypePageBlockSlideshow                              = "pageBlockSlideshow"
	TypePageBlockChatLink                               = "pageBlockChatLink"
	TypeWebPageInstantView                              = "webPageInstantView"
	TypeWebPage                                         = "webPage"
	TypeAddress                                         = "address"
	TypeLabeledPricePart                                = "labeledPricePart"
	TypeInvoice                                         = "invoice"
	TypeOrderInfo                                       = "orderInfo"
	TypeShippingOption                                  = "shippingOption"
	TypeSavedCredentials                                = "savedCredentials"
	TypeInputCredentialsSaved                           = "inputCredentialsSaved"
	TypeInputCredentialsNew                             = "inputCredentialsNew"
	TypeInputCredentialsAndroidPay                      = "inputCredentialsAndroidPay"
	TypeInputCredentialsApplePay                        = "inputCredentialsApplePay"
	TypePaymentsProviderStripe                          = "paymentsProviderStripe"
	TypePaymentForm                                     = "paymentForm"
	TypeValidatedOrderInfo                              = "validatedOrderInfo"
	TypePaymentResult                                   = "paymentResult"
	TypePaymentReceipt                                  = "paymentReceipt"
	TypeDatedFile                                       = "datedFile"
	TypePassportElementTypePersonalDetails              = "passportElementTypePersonalDetails"
	TypePassportElementTypePassport                     = "passportElementTypePassport"
	TypePassportElementTypeDriverLicense                = "passportElementTypeDriverLicense"
	TypePassportElementTypeIdentityCard                 = "passportElementTypeIdentityCard"
	TypePassportElementTypeInternalPassport             = "passportElementTypeInternalPassport"
	TypePassportElementTypeAddress                      = "passportElementTypeAddress"
	TypePassportElementTypeUtilityBill                  = "passportElementTypeUtilityBill"
	TypePassportElementTypeBankStatement                = "passportElementTypeBankStatement"
	TypePassportElementTypeRentalAgreement              = "passportElementTypeRentalAgreement"
	TypePassportElementTypePassportRegistration         = "passportElementTypePassportRegistration"
	TypePassportElementTypeTemporaryRegistration        = "passportElementTypeTemporaryRegistration"
	TypePassportElementTypePhoneNumber                  = "passportElementTypePhoneNumber"
	TypePassportElementTypeEmailAddress                 = "passportElementTypeEmailAddress"
	TypeDate                                            = "date"
	TypePersonalDetails                                 = "personalDetails"
	TypeIdentityDocument                                = "identityDocument"
	TypeInputIdentityDocument                           = "inputIdentityDocument"
	TypePersonalDocument                                = "personalDocument"
	TypeInputPersonalDocument                           = "inputPersonalDocument"
	TypePassportElementPersonalDetails                  = "passportElementPersonalDetails"
	TypePassportElementPassport                         = "passportElementPassport"
	TypePassportElementDriverLicense                    = "passportElementDriverLicense"
	TypePassportElementIdentityCard                     = "passportElementIdentityCard"
	TypePassportElementInternalPassport                 = "passportElementInternalPassport"
	TypePassportElementAddress                          = "passportElementAddress"
	TypePassportElementUtilityBill                      = "passportElementUtilityBill"
	TypePassportElementBankStatement                    = "passportElementBankStatement"
	TypePassportElementRentalAgreement                  = "passportElementRentalAgreement"
	TypePassportElementPassportRegistration             = "passportElementPassportRegistration"
	TypePassportElementTemporaryRegistration            = "passportElementTemporaryRegistration"
	TypePassportElementPhoneNumber                      = "passportElementPhoneNumber"
	TypePassportElementEmailAddress                     = "passportElementEmailAddress"
	TypeInputPassportElementPersonalDetails             = "inputPassportElementPersonalDetails"
	TypeInputPassportElementPassport                    = "inputPassportElementPassport"
	TypeInputPassportElementDriverLicense               = "inputPassportElementDriverLicense"
	TypeInputPassportElementIdentityCard                = "inputPassportElementIdentityCard"
	TypeInputPassportElementInternalPassport            = "inputPassportElementInternalPassport"
	TypeInputPassportElementAddress                     = "inputPassportElementAddress"
	TypeInputPassportElementUtilityBill                 = "inputPassportElementUtilityBill"
	TypeInputPassportElementBankStatement               = "inputPassportElementBankStatement"
	TypeInputPassportElementRentalAgreement             = "inputPassportElementRentalAgreement"
	TypeInputPassportElementPassportRegistration        = "inputPassportElementPassportRegistration"
	TypeInputPassportElementTemporaryRegistration       = "inputPassportElementTemporaryRegistration"
	TypeInputPassportElementPhoneNumber                 = "inputPassportElementPhoneNumber"
	TypeInputPassportElementEmailAddress                = "inputPassportElementEmailAddress"
	TypePassportElements                                = "passportElements"
	TypePassportElementErrorSourceUnspecified           = "passportElementErrorSourceUnspecified"
	TypePassportElementErrorSourceDataField             = "passportElementErrorSourceDataField"
	TypePassportElementErrorSourceFrontSide             = "passportElementErrorSourceFrontSide"
	TypePassportElementErrorSourceReverseSide           = "passportElementErrorSourceReverseSide"
	TypePassportElementErrorSourceSelfie                = "passportElementErrorSourceSelfie"
	TypePassportElementErrorSourceTranslationFile       = "passportElementErrorSourceTranslationFile"
	TypePassportElementErrorSourceTranslationFiles      = "passportElementErrorSourceTranslationFiles"
	TypePassportElementErrorSourceFile                  = "passportElementErrorSourceFile"
	TypePassportElementErrorSourceFiles                 = "passportElementErrorSourceFiles"
	TypePassportElementError                            = "passportElementError"
	TypePassportSuitableElement                         = "passportSuitableElement"
	TypePassportRequiredElement                         = "passportRequiredElement"
	TypePassportAuthorizationForm                       = "passportAuthorizationForm"
	TypeEncryptedCredentials                            = "encryptedCredentials"
	TypeEncryptedPassportElement                        = "encryptedPassportElement"
	TypeInputPassportElementErrorSourceUnspecified      = "inputPassportElementErrorSourceUnspecified"
	TypeInputPassportElementErrorSourceDataField        = "inputPassportElementErrorSourceDataField"
	TypeInputPassportElementErrorSourceFrontSide        = "inputPassportElementErrorSourceFrontSide"
	TypeInputPassportElementErrorSourceReverseSide      = "inputPassportElementErrorSourceReverseSide"
	TypeInputPassportElementErrorSourceSelfie           = "inputPassportElementErrorSourceSelfie"
	TypeInputPassportElementErrorSourceTranslationFile  = "inputPassportElementErrorSourceTranslationFile"
	TypeInputPassportElementErrorSourceTranslationFiles = "inputPassportElementErrorSourceTranslationFiles"
	TypeInputPassportElementErrorSourceFile             = "inputPassportElementErrorSourceFile"
	TypeInputPassportElementErrorSourceFiles            = "inputPassportElementErrorSourceFiles"
	TypeInputPassportElementError                       = "inputPassportElementError"
	TypeMessageText                                     = "messageText"
	TypeMessageAnimation                                = "messageAnimation"
	TypeMessageAudio                                    = "messageAudio"
	TypeMessageDocument                                 = "messageDocument"
	TypeMessagePhoto                                    = "messagePhoto"
	TypeMessageExpiredPhoto                             = "messageExpiredPhoto"
	TypeMessageSticker                                  = "messageSticker"
	TypeMessageVideo                                    = "messageVideo"
	TypeMessageExpiredVideo                             = "messageExpiredVideo"
	TypeMessageVideoNote                                = "messageVideoNote"
	TypeMessageVoiceNote                                = "messageVoiceNote"
	TypeMessageLocation                                 = "messageLocation"
	TypeMessageVenue                                    = "messageVenue"
	TypeMessageContact                                  = "messageContact"
	TypeMessageGame                                     = "messageGame"
	TypeMessageInvoice                                  = "messageInvoice"
	TypeMessageCall                                     = "messageCall"
	TypeMessageBasicGroupChatCreate                     = "messageBasicGroupChatCreate"
	TypeMessageSupergroupChatCreate                     = "messageSupergroupChatCreate"
	TypeMessageChatChangeTitle                          = "messageChatChangeTitle"
	TypeMessageChatChangePhoto                          = "messageChatChangePhoto"
	TypeMessageChatDeletePhoto                          = "messageChatDeletePhoto"
	TypeMessageChatAddMembers                           = "messageChatAddMembers"
	TypeMessageChatJoinByLink                           = "messageChatJoinByLink"
	TypeMessageChatDeleteMember                         = "messageChatDeleteMember"
	TypeMessageChatUpgradeTo                            = "messageChatUpgradeTo"
	TypeMessageChatUpgradeFrom                          = "messageChatUpgradeFrom"
	TypeMessagePinMessage                               = "messagePinMessage"
	TypeMessageScreenshotTaken                          = "messageScreenshotTaken"
	TypeMessageChatSetTTL                               = "messageChatSetTTL"
	TypeMessageCustomServiceAction                      = "messageCustomServiceAction"
	TypeMessageGameScore                                = "messageGameScore"
	TypeMessagePaymentSuccessful                        = "messagePaymentSuccessful"
	TypeMessagePaymentSuccessfulBot                     = "messagePaymentSuccessfulBot"
	TypeMessageContactRegistered                        = "messageContactRegistered"
	TypeMessageWebsiteConnected                         = "messageWebsiteConnected"
	TypeMessagePassportDataSent                         = "messagePassportDataSent"
	TypeMessagePassportDataReceived                     = "messagePassportDataReceived"
	TypeMessageUnsupported                              = "messageUnsupported"
	TypeTextEntityTypeMention                           = "textEntityTypeMention"
	TypeTextEntityTypeHashtag                           = "textEntityTypeHashtag"
	TypeTextEntityTypeCashtag                           = "textEntityTypeCashtag"
	TypeTextEntityTypeBotCommand                        = "textEntityTypeBotCommand"
	TypeTextEntityTypeURL                               = "textEntityTypeURL"
	TypeTextEntityTypeEmailAddress                      = "textEntityTypeEmailAddress"
	TypeTextEntityTypeBold                              = "textEntityTypeBold"
	TypeTextEntityTypeItalic                            = "textEntityTypeItalic"
	TypeTextEntityTypeCode                              = "textEntityTypeCode"
	TypeTextEntityTypePre                               = "textEntityTypePre"
	TypeTextEntityTypePreCode                           = "textEntityTypePreCode"
	TypeTextEntityTypeTextURL                           = "textEntityTypeTextURL"
	TypeTextEntityTypeMentionName                       = "textEntityTypeMentionName"
	TypeTextEntityTypePhoneNumber                       = "textEntityTypePhoneNumber"
	TypeInputThumbnail                                  = "inputThumbnail"
	TypeInputMessageText                                = "inputMessageText"
	TypeInputMessageAnimation                           = "inputMessageAnimation"
	TypeInputMessageAudio                               = "inputMessageAudio"
	TypeInputMessageDocument                            = "inputMessageDocument"
	TypeInputMessagePhoto                               = "inputMessagePhoto"
	TypeInputMessageSticker                             = "inputMessageSticker"
	TypeInputMessageVideo                               = "inputMessageVideo"
	TypeInputMessageVideoNote                           = "inputMessageVideoNote"
	TypeInputMessageVoiceNote                           = "inputMessageVoiceNote"
	TypeInputMessageLocation                            = "inputMessageLocation"
	TypeInputMessageVenue                               = "inputMessageVenue"
	TypeInputMessageContact                             = "inputMessageContact"
	TypeInputMessageGame                                = "inputMessageGame"
	TypeInputMessageInvoice                             = "inputMessageInvoice"
	TypeInputMessageForwarded                           = "inputMessageForwarded"
	TypeSearchMessagesFilterEmpty                       = "searchMessagesFilterEmpty"
	TypeSearchMessagesFilterAnimation                   = "searchMessagesFilterAnimation"
	TypeSearchMessagesFilterAudio                       = "searchMessagesFilterAudio"
	TypeSearchMessagesFilterDocument                    = "searchMessagesFilterDocument"
	TypeSearchMessagesFilterPhoto                       = "searchMessagesFilterPhoto"
	TypeSearchMessagesFilterVideo                       = "searchMessagesFilterVideo"
	TypeSearchMessagesFilterVoiceNote                   = "searchMessagesFilterVoiceNote"
	TypeSearchMessagesFilterPhotoAndVideo               = "searchMessagesFilterPhotoAndVideo"
	TypeSearchMessagesFilterURL                         = "searchMessagesFilterURL"
	TypeSearchMessagesFilterChatPhoto                   = "searchMessagesFilterChatPhoto"
	TypeSearchMessagesFilterCall                        = "searchMessagesFilterCall"
	TypeSearchMessagesFilterMissedCall                  = "searchMessagesFilterMissedCall"
	TypeSearchMessagesFilterVideoNote                   = "searchMessagesFilterVideoNote"
	TypeSearchMessagesFilterVoiceAndVideoNote           = "searchMessagesFilterVoiceAndVideoNote"
	TypeSearchMessagesFilterMention                     = "searchMessagesFilterMention"
	TypeSearchMessagesFilterUnreadMention               = "searchMessagesFilterUnreadMention"
	TypeChatActionTyping                                = "chatActionTyping"
	TypeChatActionRecordingVideo                        = "chatActionRecordingVideo"
	TypeChatActionUploadingVideo                        = "chatActionUploadingVideo"
	TypeChatActionRecordingVoiceNote                    = "chatActionRecordingVoiceNote"
	TypeChatActionUploadingVoiceNote                    = "chatActionUploadingVoiceNote"
	TypeChatActionUploadingPhoto                        = "chatActionUploadingPhoto"
	TypeChatActionUploadingDocument                     = "chatActionUploadingDocument"
	TypeChatActionChoosingLocation                      = "chatActionChoosingLocation"
	TypeChatActionChoosingContact                       = "chatActionChoosingContact"
	TypeChatActionStartPlayingGame                      = "chatActionStartPlayingGame"
	TypeChatActionRecordingVideoNote                    = "chatActionRecordingVideoNote"
	TypeChatActionUploadingVideoNote                    = "chatActionUploadingVideoNote"
	TypeChatActionCancel                                = "chatActionCancel"
	TypeUserStatusEmpty                                 = "userStatusEmpty"
	TypeUserStatusOnline                                = "userStatusOnline"
	TypeUserStatusOffline                               = "userStatusOffline"
	TypeUserStatusRecently                              = "userStatusRecently"
	TypeUserStatusLastWeek                              = "userStatusLastWeek"
	TypeUserStatusLastMonth                             = "userStatusLastMonth"
	TypeStickers                                        = "stickers"
	TypeStickerEmojis                                   = "stickerEmojis"
	TypeStickerSet                                      = "stickerSet"
	TypeStickerSetInfo                                  = "stickerSetInfo"
	TypeStickerSets                                     = "stickerSets"
	TypeCallDiscardReasonEmpty                          = "callDiscardReasonEmpty"
	TypeCallDiscardReasonMissed                         = "callDiscardReasonMissed"
	TypeCallDiscardReasonDeclined                       = "callDiscardReasonDeclined"
	TypeCallDiscardReasonDisconnected                   = "callDiscardReasonDisconnected"
	TypeCallDiscardReasonHungUp                         = "callDiscardReasonHungUp"
	TypeCallProtocol                                    = "callProtocol"
	TypeCallConnection                                  = "callConnection"
	TypeCallID                                          = "callID"
	TypeCallStatePending                                = "callStatePending"
	TypeCallStateExchangingKeys                         = "callStateExchangingKeys"
	TypeCallStateReady                                  = "callStateReady"
	TypeCallStateHangingUp                              = "callStateHangingUp"
	TypeCallStateDiscarded                              = "callStateDiscarded"
	TypeCallStateError                                  = "callStateError"
	TypeCall                                            = "call"
	TypeAnimations                                      = "animations"
	TypeImportedContacts                                = "importedContacts"
	TypeInputInlineQueryResultAnimatedGif               = "inputInlineQueryResultAnimatedGif"
	TypeInputInlineQueryResultAnimatedMpeg4             = "inputInlineQueryResultAnimatedMpeg4"
	TypeInputInlineQueryResultArticle                   = "inputInlineQueryResultArticle"
	TypeInputInlineQueryResultAudio                     = "inputInlineQueryResultAudio"
	TypeInputInlineQueryResultContact                   = "inputInlineQueryResultContact"
	TypeInputInlineQueryResultDocument                  = "inputInlineQueryResultDocument"
	TypeInputInlineQueryResultGame                      = "inputInlineQueryResultGame"
	TypeInputInlineQueryResultLocation                  = "inputInlineQueryResultLocation"
	TypeInputInlineQueryResultPhoto                     = "inputInlineQueryResultPhoto"
	TypeInputInlineQueryResultSticker                   = "inputInlineQueryResultSticker"
	TypeInputInlineQueryResultVenue                     = "inputInlineQueryResultVenue"
	TypeInputInlineQueryResultVideo                     = "inputInlineQueryResultVideo"
	TypeInputInlineQueryResultVoiceNote                 = "inputInlineQueryResultVoiceNote"
	TypeInlineQueryResultArticle                        = "inlineQueryResultArticle"
	TypeInlineQueryResultContact                        = "inlineQueryResultContact"
	TypeInlineQueryResultLocation                       = "inlineQueryResultLocation"
	TypeInlineQueryResultVenue                          = "inlineQueryResultVenue"
	TypeInlineQueryResultGame                           = "inlineQueryResultGame"
	TypeInlineQueryResultAnimation                      = "inlineQueryResultAnimation"
	TypeInlineQueryResultAudio                          = "inlineQueryResultAudio"
	TypeInlineQueryResultDocument                       = "inlineQueryResultDocument"
	TypeInlineQueryResultPhoto                          = "inlineQueryResultPhoto"
	TypeInlineQueryResultSticker                        = "inlineQueryResultSticker"
	TypeInlineQueryResultVideo                          = "inlineQueryResultVideo"
	TypeInlineQueryResultVoiceNote                      = "inlineQueryResultVoiceNote"
	TypeInlineQueryResults                              = "inlineQueryResults"
	TypeCallbackQueryPayloadData                        = "callbackQueryPayloadData"
	TypeCallbackQueryPayloadGame                        = "callbackQueryPayloadGame"
	TypeCallbackQueryAnswer                             = "callbackQueryAnswer"
	TypeCustomRequestResult                             = "customRequestResult"
	TypeGameHighScore                                   = "gameHighScore"
	TypeGameHighScores                                  = "gameHighScores"
	TypeChatEventMessageEdited                          = "chatEventMessageEdited"
	TypeChatEventMessageDeleted                         = "chatEventMessageDeleted"
	TypeChatEventMessagePinned                          = "chatEventMessagePinned"
	TypeChatEventMessageUnpinned                        = "chatEventMessageUnpinned"
	TypeChatEventMemberJoined                           = "chatEventMemberJoined"
	TypeChatEventMemberLeft                             = "chatEventMemberLeft"
	TypeChatEventMemberInvited                          = "chatEventMemberInvited"
	TypeChatEventMemberPromoted                         = "chatEventMemberPromoted"
	TypeChatEventMemberRestricted                       = "chatEventMemberRestricted"
	TypeChatEventTitleChanged                           = "chatEventTitleChanged"
	TypeChatEventDescriptionChanged                     = "chatEventDescriptionChanged"
	TypeChatEventUsernameChanged                        = "chatEventUsernameChanged"
	TypeChatEventPhotoChanged                           = "chatEventPhotoChanged"
	TypeChatEventInvitesToggled                         = "chatEventInvitesToggled"
	TypeChatEventSignMessagesToggled                    = "chatEventSignMessagesToggled"
	TypeChatEventStickerSetChanged                      = "chatEventStickerSetChanged"
	TypeChatEventIsAllHistoryAvailableToggled           = "chatEventIsAllHistoryAvailableToggled"
	TypeChatEvent                                       = "chatEvent"
	TypeChatEvents                                      = "chatEvents"
	TypeChatEventLogFilters                             = "chatEventLogFilters"
	TypeLanguagePackStringValueOrdinary                 = "languagePackStringValueOrdinary"
	TypeLanguagePackStringValuePluralized               = "languagePackStringValuePluralized"
	TypeLanguagePackStringValueDeleted                  = "languagePackStringValueDeleted"
	TypeLanguagePackString                              = "languagePackString"
	TypeLanguagePackStrings                             = "languagePackStrings"
	TypeLanguagePackInfo                                = "languagePackInfo"
	TypeLocalizationTargetInfo                          = "localizationTargetInfo"
	TypeDeviceTokenGoogleCloudMessaging                 = "deviceTokenGoogleCloudMessaging"
	TypeDeviceTokenApplePush                            = "deviceTokenApplePush"
	TypeDeviceTokenApplePushVoIP                        = "deviceTokenApplePushVoIP"
	TypeDeviceTokenWindowsPush                          = "deviceTokenWindowsPush"
	TypeDeviceTokenMicrosoftPush                        = "deviceTokenMicrosoftPush"
	TypeDeviceTokenMicrosoftPushVoIP                    = "deviceTokenMicrosoftPushVoIP"
	TypeDeviceTokenWebPush                              = "deviceTokenWebPush"
	TypeDeviceTokenSimplePush                           = "deviceTokenSimplePush"
	TypeDeviceTokenUbuntuPush                           = "deviceTokenUbuntuPush"
	TypeDeviceTokenBlackBerryPush                       = "deviceTokenBlackBerryPush"
	TypeDeviceTokenTizenPush                            = "deviceTokenTizenPush"
	TypeWallpaper                                       = "wallpaper"
	TypeWallpapers                                      = "wallpapers"
	TypeHashtags                                        = "hashtags"
	TypeCheckChatUsernameResultOk                       = "checkChatUsernameResultOk"
	TypeCheckChatUsernameResultUsernameInvalid          = "checkChatUsernameResultUsernameInvalid"
	TypeCheckChatUsernameResultUsernameOccupied         = "checkChatUsernameResultUsernameOccupied"
	TypeCheckChatUsernameResultPublicChatsTooMuch       = "checkChatUsernameResultPublicChatsTooMuch"
	TypeCheckChatUsernameResultPublicGroupsUnavailable  = "checkChatUsernameResultPublicGroupsUnavailable"
	TypeOptionValueBoolean                              = "optionValueBoolean"
	TypeOptionValueEmpty                                = "optionValueEmpty"
	TypeOptionValueInteger                              = "optionValueInteger"
	TypeOptionValueString                               = "optionValueString"
	TypeUserPrivacySettingRuleAllowAll                  = "userPrivacySettingRuleAllowAll"
	TypeUserPrivacySettingRuleAllowContacts             = "userPrivacySettingRuleAllowContacts"
	TypeUserPrivacySettingRuleAllowUsers                = "userPrivacySettingRuleAllowUsers"
	TypeUserPrivacySettingRuleRestrictAll               = "userPrivacySettingRuleRestrictAll"
	TypeUserPrivacySettingRuleRestrictContacts          = "userPrivacySettingRuleRestrictContacts"
	TypeUserPrivacySettingRuleRestrictUsers             = "userPrivacySettingRuleRestrictUsers"
	TypeUserPrivacySettingRules                         = "userPrivacySettingRules"
	TypeUserPrivacySettingShowStatus                    = "userPrivacySettingShowStatus"
	TypeUserPrivacySettingAllowChatInvites              = "userPrivacySettingAllowChatInvites"
	TypeUserPrivacySettingAllowCalls                    = "userPrivacySettingAllowCalls"
	TypeAccountTTL                                      = "accountTTL"
	TypeSession                                         = "session"
	TypeSessions                                        = "sessions"
	TypeConnectedWebsite                                = "connectedWebsite"
	TypeConnectedWebsites                               = "connectedWebsites"
	TypeChatReportSpamState                             = "chatReportSpamState"
	TypeChatReportReasonSpam                            = "chatReportReasonSpam"
	TypeChatReportReasonViolence                        = "chatReportReasonViolence"
	TypeChatReportReasonPornography                     = "chatReportReasonPornography"
	TypeChatReportReasonCopyright                       = "chatReportReasonCopyright"
	TypeChatReportReasonCustom                          = "chatReportReasonCustom"
	TypePublicMessageLink                               = "publicMessageLink"
	TypeFileTypeNone                                    = "fileTypeNone"
	TypeFileTypeAnimation                               = "fileTypeAnimation"
	TypeFileTypeAudio                                   = "fileTypeAudio"
	TypeFileTypeDocument                                = "fileTypeDocument"
	TypeFileTypePhoto                                   = "fileTypePhoto"
	TypeFileTypeProfilePhoto                            = "fileTypeProfilePhoto"
	TypeFileTypeSecret                                  = "fileTypeSecret"
	TypeFileTypeSecretThumbnail                         = "fileTypeSecretThumbnail"
	TypeFileTypeSecure                                  = "fileTypeSecure"
	TypeFileTypeSticker                                 = "fileTypeSticker"
	TypeFileTypeThumbnail                               = "fileTypeThumbnail"
	TypeFileTypeUnknown                                 = "fileTypeUnknown"
	TypeFileTypeVideo                                   = "fileTypeVideo"
	TypeFileTypeVideoNote                               = "fileTypeVideoNote"
	TypeFileTypeVoiceNote                               = "fileTypeVoiceNote"
	TypeFileTypeWallpaper                               = "fileTypeWallpaper"
	TypeStorageStatisticsByFileType                     = "storageStatisticsByFileType"
	TypeStorageStatisticsByChat                         = "storageStatisticsByChat"
	TypeStorageStatistics                               = "storageStatistics"
	TypeStorageStatisticsFast                           = "storageStatisticsFast"
	TypeNetworkTypeNone                                 = "networkTypeNone"
	TypeNetworkTypeMobile                               = "networkTypeMobile"
	TypeNetworkTypeMobileRoaming                        = "networkTypeMobileRoaming"
	TypeNetworkTypeWiFi                                 = "networkTypeWiFi"
	TypeNetworkTypeOther                                = "networkTypeOther"
	TypeNetworkStatisticsEntryFile                      = "networkStatisticsEntryFile"
	TypeNetworkStatisticsEntryCall                      = "networkStatisticsEntryCall"
	TypeNetworkStatistics                               = "networkStatistics"
	TypeConnectionStateWaitingForNetwork                = "connectionStateWaitingForNetwork"
	TypeConnectionStateConnectingToProxy                = "connectionStateConnectingToProxy"
	TypeConnectionStateConnecting                       = "connectionStateConnecting"
	TypeConnectionStateUpdating                         = "connectionStateUpdating"
	TypeConnectionStateReady                            = "connectionStateReady"
	TypeTopChatCategoryUsers                            = "topChatCategoryUsers"
	TypeTopChatCategoryBots                             = "topChatCategoryBots"
	TypeTopChatCategoryGroups                           = "topChatCategoryGroups"
	TypeTopChatCategoryChannels                         = "topChatCategoryChannels"
	TypeTopChatCategoryInlineBots                       = "topChatCategoryInlineBots"
	TypeTopChatCategoryCalls                            = "topChatCategoryCalls"
	TypeTMeURLTypeUser                                  = "tMeURLTypeUser"
	TypeTMeURLTypeSupergroup                            = "tMeURLTypeSupergroup"
	TypeTMeURLTypeChatInvite                            = "tMeURLTypeChatInvite"
	TypeTMeURLTypeStickerSet                            = "tMeURLTypeStickerSet"
	TypeTMeURL                                          = "tMeURL"
	TypeTMeURLs                                         = "tMeURLs"
	TypeCount                                           = "count"
	TypeText                                            = "text"
	TypeSeconds                                         = "seconds"
	TypeDeepLinkInfo                                    = "deepLinkInfo"
	TypeTextParseModeMarkdown                           = "textParseModeMarkdown"
	TypeTextParseModeHTML                               = "textParseModeHTML"
	TypeProxyTypeSocks5                                 = "proxyTypeSocks5"
	TypeProxyTypeHTTP                                   = "proxyTypeHTTP"
	TypeProxyTypeMtproto                                = "proxyTypeMtproto"
	TypeProxy                                           = "proxy"
	TypeProxies                                         = "proxies"
	TypeInputSticker                                    = "inputSticker"
	TypeUpdateAuthorizationState                        = "updateAuthorizationState"
	TypeUpdateNewMessage                                = "updateNewMessage"
	TypeUpdateMessageSendAcknowledged                   = "updateMessageSendAcknowledged"
	TypeUpdateMessageSendSucceeded                      = "updateMessageSendSucceeded"
	TypeUpdateMessageSendFailed                         = "updateMessageSendFailed"
	TypeUpdateMessageContent                            = "updateMessageContent"
	TypeUpdateMessageEdited                             = "updateMessageEdited"
	TypeUpdateMessageViews                              = "updateMessageViews"
	TypeUpdateMessageContentOpened                      = "updateMessageContentOpened"
	TypeUpdateMessageMentionRead                        = "updateMessageMentionRead"
	TypeUpdateNewChat                                   = "updateNewChat"
	TypeUpdateChatTitle                                 = "updateChatTitle"
	TypeUpdateChatPhoto                                 = "updateChatPhoto"
	TypeUpdateChatLastMessage                           = "updateChatLastMessage"
	TypeUpdateChatOrder                                 = "updateChatOrder"
	TypeUpdateChatIsPinned                              = "updateChatIsPinned"
	TypeUpdateChatIsMarkedAsUnread                      = "updateChatIsMarkedAsUnread"
	TypeUpdateChatIsSponsored                           = "updateChatIsSponsored"
	TypeUpdateChatDefaultDisableNotification            = "updateChatDefaultDisableNotification"
	TypeUpdateChatReadInbox                             = "updateChatReadInbox"
	TypeUpdateChatReadOutbox                            = "updateChatReadOutbox"
	TypeUpdateChatUnreadMentionCount                    = "updateChatUnreadMentionCount"
	TypeUpdateChatNotificationSettings                  = "updateChatNotificationSettings"
	TypeUpdateScopeNotificationSettings                 = "updateScopeNotificationSettings"
	TypeUpdateChatReplyMarkup                           = "updateChatReplyMarkup"
	TypeUpdateChatDraftMessage                          = "updateChatDraftMessage"
	TypeUpdateDeleteMessages                            = "updateDeleteMessages"
	TypeUpdateUserChatAction                            = "updateUserChatAction"
	TypeUpdateUserStatus                                = "updateUserStatus"
	TypeUpdateUser                                      = "updateUser"
	TypeUpdateBasicGroup                                = "updateBasicGroup"
	TypeUpdateSupergroup                                = "updateSupergroup"
	TypeUpdateSecretChat                                = "updateSecretChat"
	TypeUpdateUserFullInfo                              = "updateUserFullInfo"
	TypeUpdateBasicGroupFullInfo                        = "updateBasicGroupFullInfo"
	TypeUpdateSupergroupFullInfo                        = "updateSupergroupFullInfo"
	TypeUpdateServiceNotification                       = "updateServiceNotification"
	TypeUpdateFile                                      = "updateFile"
	TypeUpdateFileGenerationStart                       = "updateFileGenerationStart"
	TypeUpdateFileGenerationStop                        = "updateFileGenerationStop"
	TypeUpdateCall                                      = "updateCall"
	TypeUpdateUserPrivacySettingRules                   = "updateUserPrivacySettingRules"
	TypeUpdateUnreadMessageCount                        = "updateUnreadMessageCount"
	TypeUpdateUnreadChatCount                           = "updateUnreadChatCount"
	TypeUpdateOption                                    = "updateOption"
	TypeUpdateInstalledStickerSets                      = "updateInstalledStickerSets"
	TypeUpdateTrendingStickerSets                       = "updateTrendingStickerSets"
	TypeUpdateRecentStickers                            = "updateRecentStickers"
	TypeUpdateFavoriteStickers                          = "updateFavoriteStickers"
	TypeUpdateSavedAnimations                           = "updateSavedAnimations"
	TypeUpdateLanguagePackStrings                       = "updateLanguagePackStrings"
	TypeUpdateConnectionState                           = "updateConnectionState"
	TypeUpdateTermsOfService                            = "updateTermsOfService"
	TypeUpdateNewInlineQuery                            = "updateNewInlineQuery"
	TypeUpdateNewChosenInlineResult                     = "updateNewChosenInlineResult"
	TypeUpdateNewCallbackQuery                          = "updateNewCallbackQuery"
	TypeUpdateNewInlineCallbackQuery                    = "updateNewInlineCallbackQuery"
	TypeUpdateNewShippingQuery                          = "updateNewShippingQuery"
	TypeUpdateNewPreCheckoutQuery                       = "updateNewPreCheckoutQuery"
	TypeUpdateNewCustomEvent                            = "updateNewCustomEvent"
	TypeUpdateNewCustomQuery                            = "updateNewCustomQuery"
	TypeTestInt                                         = "testInt"
	TypeTestString                                      = "testString"
	TypeTestBytes                                       = "testBytes"
	TypeTestVectorInt                                   = "testVectorInt"
	TypeTestVectorIntObject                             = "testVectorIntObject"
	TypeTestVectorString                                = "testVectorString"
	TypeTestVectorStringObject                          = "testVectorStringObject"
)

// AuthenticationCodeType provides information about the method by which an authentication code is delivered to the user
type AuthenticationCodeType interface {
	AuthenticationCodeTypeType() string
}

// AuthorizationState represents the current authorization state of the client
type AuthorizationState interface {
	AuthorizationStateType() string
}

// InputFile points to a file
type InputFile interface {
	InputFileType() string
}

// MaskPoint part of the face, relative to which a mask should be placed
type MaskPoint interface {
	MaskPointType() string
}

// LinkState represents the relationship between user A and user B. For incoming_link, user A is the current user; for outgoing_link, user B is the current user
type LinkState interface {
	LinkStateType() string
}

// UserType represents the type of the user. The following types are possible: regular users, deleted users and bots
type UserType interface {
	UserTypeType() string
}

// ChatMemberStatus provides information about the status of a member in a chat
type ChatMemberStatus interface {
	ChatMemberStatusType() string
}

// ChatMembersFilter specifies the kind of chat members to return in searchChatMembers
type ChatMembersFilter interface {
	ChatMembersFilterType() string
}

// SupergroupMembersFilter specifies the kind of chat members to return in getSupergroupMembers
type SupergroupMembersFilter interface {
	SupergroupMembersFilterType() string
}

// SecretChatState describes the current secret chat state
type SecretChatState interface {
	SecretChatStateType() string
}

// MessageForwardInfo contains information about the initial sender of a forwarded message
type MessageForwardInfo interface {
	MessageForwardInfoType() string
}

// MessageSendingState contains information about the sending state of the message
type MessageSendingState interface {
	MessageSendingStateType() string
}

// NotificationSettingsScope describes the types of chats to which notification settings are applied
type NotificationSettingsScope interface {
	NotificationSettingsScopeType() string
}

// ChatType describes the type of a chat
type ChatType interface {
	ChatTypeType() string
}

// KeyboardButtonType describes a keyboard button type
type KeyboardButtonType interface {
	KeyboardButtonTypeType() string
}

// InlineKeyboardButtonType describes the type of an inline keyboard button
type InlineKeyboardButtonType interface {
	InlineKeyboardButtonTypeType() string
}

// ReplyMarkup contains a description of a custom keyboard and actions that can be done with it to quickly reply to bots
type ReplyMarkup interface {
	ReplyMarkupType() string
}

// RichText describes a text object inside an instant-view web page
type RichText interface {
	RichTextType() string
}

// PageBlock describes a block of an instant view web page
type PageBlock interface {
	PageBlockType() string
}

// InputCredentials contains information about the payment method chosen by the user
type InputCredentials interface {
	InputCredentialsType() string
}

// PassportElementType contains the type of a Telegram Passport element
type PassportElementType interface {
	PassportElementTypeType() string
}

// PassportElement contains information about a Telegram Passport element
type PassportElement interface {
	PassportElementType() string
}

// InputPassportElement contains information about a Telegram Passport element to be saved
type InputPassportElement interface {
	InputPassportElementType() string
}

// PassportElementErrorSource contains the description of an error in a Telegram Passport element
type PassportElementErrorSource interface {
	PassportElementErrorSourceType() string
}

// InputPassportElementErrorSource contains the description of an error in a Telegram Passport element; for bots only
type InputPassportElementErrorSource interface {
	InputPassportElementErrorSourceType() string
}

// MessageContent contains the content of a message
type MessageContent interface {
	MessageContentType() string
}

// TextEntityType represents a part of the text which must be formatted differently
type TextEntityType interface {
	TextEntityTypeType() string
}

// InputMessageContent the content of a message to send
type InputMessageContent interface {
	InputMessageContentType() string
}

// SearchMessagesFilter represents a filter for message search results
type SearchMessagesFilter interface {
	SearchMessagesFilterType() string
}

// ChatAction describes the different types of activity in a chat
type ChatAction interface {
	ChatActionType() string
}

// UserStatus describes the last time the user was online
type UserStatus interface {
	UserStatusType() string
}

// CallDiscardReason describes the reason why a call was discarded
type CallDiscardReason interface {
	CallDiscardReasonType() string
}

// CallState describes the current call state
type CallState interface {
	CallStateType() string
}

// InputInlineQueryResult represents a single result of an inline query; for bots only
type InputInlineQueryResult interface {
	InputInlineQueryResultType() string
}

// InlineQueryResult represents a single result of an inline query
type InlineQueryResult interface {
	InlineQueryResultType() string
}

// CallbackQueryPayload represents a payload of a callback query
type CallbackQueryPayload interface {
	CallbackQueryPayloadType() string
}

// ChatEventAction represents a chat event
type ChatEventAction interface {
	ChatEventActionType() string
}

// LanguagePackStringValue represents the value of a string in a language pack
type LanguagePackStringValue interface {
	LanguagePackStringValueType() string
}

// DeviceToken represents a data needed to subscribe for push notifications. To use specific push notification service, you must specify the correct application platform and upload valid server authentication data at https://my.telegram.org
type DeviceToken interface {
	DeviceTokenType() string
}

// CheckChatUsernameResult represents result of checking whether a username can be set for a chat
type CheckChatUsernameResult interface {
	CheckChatUsernameResultType() string
}

// OptionValue represents the value of an option
type OptionValue interface {
	OptionValueType() string
}

// UserPrivacySettingRule represents a single rule for managing privacy settings
type UserPrivacySettingRule interface {
	UserPrivacySettingRuleType() string
}

// UserPrivacySetting describes available user privacy settings
type UserPrivacySetting interface {
	UserPrivacySettingType() string
}

// ChatReportReason describes the reason why a chat is reported
type ChatReportReason interface {
	ChatReportReasonType() string
}

// FileType represents the type of a file
type FileType interface {
	FileTypeType() string
}

// NetworkType represents the type of a network
type NetworkType interface {
	NetworkTypeType() string
}

// NetworkStatisticsEntry contains statistics about network usage
type NetworkStatisticsEntry interface {
	NetworkStatisticsEntryType() string
}

// ConnectionState describes the current state of the connection to Telegram servers
type ConnectionState interface {
	ConnectionStateType() string
}

// TopChatCategory represents the categories of chats for which a list of frequently used chats can be retrieved
type TopChatCategory interface {
	TopChatCategoryType() string
}

// TMeURLType describes the type of a URL linking to an internal Telegram entity
type TMeURLType interface {
	TMeURLTypeType() string
}

// TextParseMode describes the way the text should be parsed for TextEntities
type TextParseMode interface {
	TextParseModeType() string
}

// ProxyType describes the type of the proxy server
type ProxyType interface {
	ProxyTypeType() string
}

// Update contains notifications about data changes
type Update interface {
	UpdateType() string
}

// Error an object of this type can be returned on every function call, in case of an error
type Error struct {
	meta
	// Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user
	Code int32 `json:"code"`
	// Error message; subject to future changes
	Message string `json:"message"`
}

// MarshalJSON returns Error object as the JSON encoding of Error.
func (entity *Error) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Error

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Error) GetClass() string {
	return ClassError
}

// GetType returns constant class type string of the class.
func (*Error) GetType() string {
	return TypeError
}

// Ok an object of this type is returned on a successful function call for certain functions
type Ok struct {
	meta
}

// MarshalJSON returns Ok object as the JSON encoding of Ok.
func (entity *Ok) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Ok

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Ok) GetClass() string {
	return ClassOk
}

// GetType returns constant class type string of the class.
func (*Ok) GetType() string {
	return TypeOk
}

// TdlibParameters contains parameters for TDLib initialization
type TdlibParameters struct {
	meta
	// If set to true, the Telegram test environment will be used instead of the production environment
	UseTestDc bool `json:"use_test_dc"`
	// The path to the directory for the persistent database; if empty, the current working directory will be used
	DatabaseDirectory string `json:"database_directory"`
	// The path to the directory for storing files; if empty, database_directory will be used
	FilesDirectory string `json:"files_directory"`
	// If set to true, information about downloaded and uploaded files will be saved between application restarts
	UseFileDatabase bool `json:"use_file_database"`
	// If set to true, the library will maintain a cache of users, basic groups, supergroups, channels and secret chats. Implies use_file_database
	UseChatInfoDatabase bool `json:"use_chat_info_database"`
	// If set to true, the library will maintain a cache of chats and messages. Implies use_chat_info_database
	UseMessageDatabase bool `json:"use_message_database"`
	// If set to true, support for secret chats will be enabled
	UseSecretChats bool `json:"use_secret_chats"`
	// Application identifier for Telegram API access, which can be obtained at https://my.telegram.org
	APIID int32 `json:"api_id"`
	// Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org
	APIHash string `json:"api_hash"`
	// IETF language tag of the user's operating system language; must be non-empty
	SystemLanguageCode string `json:"system_language_code"`
	// Model of the device the application is being run on; must be non-empty
	DeviceModel string `json:"device_model"`
	// Version of the operating system the application is being run on; must be non-empty
	SystemVersion string `json:"system_version"`
	// Application version; must be non-empty
	ApplicationVersion string `json:"application_version"`
	// If set to true, old files will automatically be deleted
	EnableStorageOptimizer bool `json:"enable_storage_optimizer"`
	// If set to true, original file names will be ignored. Otherwise, downloaded files will be saved under names as close as possible to the original name
	IgnoreFileNames bool `json:"ignore_file_names"`
}

// MarshalJSON returns TdlibParameters object as the JSON encoding of TdlibParameters.
func (entity *TdlibParameters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TdlibParameters

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TdlibParameters) GetClass() string {
	return ClassTdlibParameters
}

// GetType returns constant class type string of the class.
func (*TdlibParameters) GetType() string {
	return TypeTdlibParameters
}

// AuthenticationCodeTypeTelegramMessage an authentication code is delivered via a private Telegram message, which can be viewed in another client
type AuthenticationCodeTypeTelegramMessage struct {
	meta
	// Length of the code
	Length int32 `json:"length"`
}

// MarshalJSON returns AuthenticationCodeTypeTelegramMessage object as the JSON encoding of AuthenticationCodeTypeTelegramMessage.
func (entity *AuthenticationCodeTypeTelegramMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthenticationCodeTypeTelegramMessage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthenticationCodeTypeTelegramMessage) GetClass() string {
	return ClassAuthenticationCodeType
}

// GetType returns constant class type string of the class.
func (*AuthenticationCodeTypeTelegramMessage) GetType() string {
	return TypeAuthenticationCodeTypeTelegramMessage
}

// AuthenticationCodeTypeType returns constant class type string of the class.
func (*AuthenticationCodeTypeTelegramMessage) AuthenticationCodeTypeType() string {
	return TypeAuthenticationCodeTypeTelegramMessage
}

// AuthenticationCodeTypeSms an authentication code is delivered via an SMS message to the specified phone number
type AuthenticationCodeTypeSms struct {
	meta
	// Length of the code
	Length int32 `json:"length"`
}

// MarshalJSON returns AuthenticationCodeTypeSms object as the JSON encoding of AuthenticationCodeTypeSms.
func (entity *AuthenticationCodeTypeSms) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthenticationCodeTypeSms

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthenticationCodeTypeSms) GetClass() string {
	return ClassAuthenticationCodeType
}

// GetType returns constant class type string of the class.
func (*AuthenticationCodeTypeSms) GetType() string {
	return TypeAuthenticationCodeTypeSms
}

// AuthenticationCodeTypeType returns constant class type string of the class.
func (*AuthenticationCodeTypeSms) AuthenticationCodeTypeType() string {
	return TypeAuthenticationCodeTypeSms
}

// AuthenticationCodeTypeCall an authentication code is delivered via a phone call to the specified phone number
type AuthenticationCodeTypeCall struct {
	meta
	// Length of the code
	Length int32 `json:"length"`
}

// MarshalJSON returns AuthenticationCodeTypeCall object as the JSON encoding of AuthenticationCodeTypeCall.
func (entity *AuthenticationCodeTypeCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthenticationCodeTypeCall

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthenticationCodeTypeCall) GetClass() string {
	return ClassAuthenticationCodeType
}

// GetType returns constant class type string of the class.
func (*AuthenticationCodeTypeCall) GetType() string {
	return TypeAuthenticationCodeTypeCall
}

// AuthenticationCodeTypeType returns constant class type string of the class.
func (*AuthenticationCodeTypeCall) AuthenticationCodeTypeType() string {
	return TypeAuthenticationCodeTypeCall
}

// AuthenticationCodeTypeFlashCall an authentication code is delivered by an immediately cancelled call to the specified phone number. The number from which the call was made is the code
type AuthenticationCodeTypeFlashCall struct {
	meta
	// Pattern of the phone number from which the call will be made
	Pattern string `json:"pattern"`
}

// MarshalJSON returns AuthenticationCodeTypeFlashCall object as the JSON encoding of AuthenticationCodeTypeFlashCall.
func (entity *AuthenticationCodeTypeFlashCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthenticationCodeTypeFlashCall

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthenticationCodeTypeFlashCall) GetClass() string {
	return ClassAuthenticationCodeType
}

// GetType returns constant class type string of the class.
func (*AuthenticationCodeTypeFlashCall) GetType() string {
	return TypeAuthenticationCodeTypeFlashCall
}

// AuthenticationCodeTypeType returns constant class type string of the class.
func (*AuthenticationCodeTypeFlashCall) AuthenticationCodeTypeType() string {
	return TypeAuthenticationCodeTypeFlashCall
}

// AuthenticationCodeInfo information about the authentication code that was sent
type AuthenticationCodeInfo struct {
	meta
	// A phone number that is being authenticated
	PhoneNumber string `json:"phone_number"`
	// Describes the way the code was sent to the user
	Type AuthenticationCodeType `json:"type"`
	// Describes the way the next code will be sent to the user; may be null
	NextType AuthenticationCodeType `json:"next_type"`
	// Timeout before the code should be re-sent, in seconds
	Timeout int32 `json:"timeout"`
}

// MarshalJSON returns AuthenticationCodeInfo object as the JSON encoding of AuthenticationCodeInfo.
func (entity *AuthenticationCodeInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthenticationCodeInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthenticationCodeInfo) GetClass() string {
	return ClassAuthenticationCodeInfo
}

// GetType returns constant class type string of the class.
func (*AuthenticationCodeInfo) GetType() string {
	return TypeAuthenticationCodeInfo
}

// UnmarshalJSON sets AuthenticationCodeInfo object to a copy of JSON encoding of AuthenticationCodeInfo.
func (entity *AuthenticationCodeInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PhoneNumber string          `json:"phone_number"`
		Type        json.RawMessage `json:"type"`
		NextType    json.RawMessage `json:"next_type"`
		Timeout     int32           `json:"timeout"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.PhoneNumber = tmp.PhoneNumber
	entity.Timeout = tmp.Timeout

	fieldType, _ := UnmarshalAuthenticationCodeType(tmp.Type)
	entity.Type = fieldType

	fieldNextType, _ := UnmarshalAuthenticationCodeType(tmp.NextType)
	entity.NextType = fieldNextType

	return nil
}

// EmailAddressAuthenticationCodeInfo information about the email address authentication code that was sent
type EmailAddressAuthenticationCodeInfo struct {
	meta
	// Pattern of the email address to which an authentication code was sent
	EmailAddressPattern string `json:"email_address_pattern"`
	// Length of the code; 0 if unknown
	Length int32 `json:"length"`
}

// MarshalJSON returns EmailAddressAuthenticationCodeInfo object as the JSON encoding of EmailAddressAuthenticationCodeInfo.
func (entity *EmailAddressAuthenticationCodeInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub EmailAddressAuthenticationCodeInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*EmailAddressAuthenticationCodeInfo) GetClass() string {
	return ClassEmailAddressAuthenticationCodeInfo
}

// GetType returns constant class type string of the class.
func (*EmailAddressAuthenticationCodeInfo) GetType() string {
	return TypeEmailAddressAuthenticationCodeInfo
}

// TextEntity represents a part of the text that needs to be formatted in some unusual way
type TextEntity struct {
	meta
	// Offset of the entity in UTF-16 code points
	Offset int32 `json:"offset"`
	// Length of the entity, in UTF-16 code points
	Length int32 `json:"length"`
	// Type of the entity
	Type TextEntityType `json:"type"`
}

// MarshalJSON returns TextEntity object as the JSON encoding of TextEntity.
func (entity *TextEntity) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntity

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntity) GetClass() string {
	return ClassTextEntity
}

// GetType returns constant class type string of the class.
func (*TextEntity) GetType() string {
	return TypeTextEntity
}

// UnmarshalJSON sets TextEntity object to a copy of JSON encoding of TextEntity.
func (entity *TextEntity) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Offset int32           `json:"offset"`
		Length int32           `json:"length"`
		Type   json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Offset = tmp.Offset
	entity.Length = tmp.Length

	fieldType, _ := UnmarshalTextEntityType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// TextEntities contains a list of text entities
type TextEntities struct {
	meta
	// List of text entities
	Entities []*TextEntity `json:"entities"`
}

// MarshalJSON returns TextEntities object as the JSON encoding of TextEntities.
func (entity *TextEntities) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntities

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntities) GetClass() string {
	return ClassTextEntities
}

// GetType returns constant class type string of the class.
func (*TextEntities) GetType() string {
	return TypeTextEntities
}

// FormattedText a text with some entities
type FormattedText struct {
	meta
	// The text
	Text string `json:"text"`
	// Entities contained in the text
	Entities []*TextEntity `json:"entities"`
}

// MarshalJSON returns FormattedText object as the JSON encoding of FormattedText.
func (entity *FormattedText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FormattedText

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FormattedText) GetClass() string {
	return ClassFormattedText
}

// GetType returns constant class type string of the class.
func (*FormattedText) GetType() string {
	return TypeFormattedText
}

// TermsOfService contains Telegram terms of service
type TermsOfService struct {
	meta
	// Text of the terms of service
	Text *FormattedText `json:"text"`
	// Mininum age of a user to be able to accept the terms; 0 if any
	MinUserAge int32 `json:"min_user_age"`
	// True, if a blocking popup with terms of service must be shown to the user
	ShowPopup bool `json:"show_popup"`
}

// MarshalJSON returns TermsOfService object as the JSON encoding of TermsOfService.
func (entity *TermsOfService) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TermsOfService

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TermsOfService) GetClass() string {
	return ClassTermsOfService
}

// GetType returns constant class type string of the class.
func (*TermsOfService) GetType() string {
	return TypeTermsOfService
}

// AuthorizationStateWaitTdlibParameters tDLib needs TdlibParameters for initialization
type AuthorizationStateWaitTdlibParameters struct {
	meta
}

// MarshalJSON returns AuthorizationStateWaitTdlibParameters object as the JSON encoding of AuthorizationStateWaitTdlibParameters.
func (entity *AuthorizationStateWaitTdlibParameters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateWaitTdlibParameters

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateWaitTdlibParameters) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateWaitTdlibParameters) GetType() string {
	return TypeAuthorizationStateWaitTdlibParameters
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateWaitTdlibParameters) AuthorizationStateType() string {
	return TypeAuthorizationStateWaitTdlibParameters
}

// AuthorizationStateWaitEncryptionKey tDLib needs an encryption key to decrypt the local database
type AuthorizationStateWaitEncryptionKey struct {
	meta
	// True, if the database is currently encrypted
	IsEncrypted bool `json:"is_encrypted"`
}

// MarshalJSON returns AuthorizationStateWaitEncryptionKey object as the JSON encoding of AuthorizationStateWaitEncryptionKey.
func (entity *AuthorizationStateWaitEncryptionKey) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateWaitEncryptionKey

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateWaitEncryptionKey) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateWaitEncryptionKey) GetType() string {
	return TypeAuthorizationStateWaitEncryptionKey
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateWaitEncryptionKey) AuthorizationStateType() string {
	return TypeAuthorizationStateWaitEncryptionKey
}

// AuthorizationStateWaitPhoneNumber tDLib needs the user's phone number to authorize
type AuthorizationStateWaitPhoneNumber struct {
	meta
}

// MarshalJSON returns AuthorizationStateWaitPhoneNumber object as the JSON encoding of AuthorizationStateWaitPhoneNumber.
func (entity *AuthorizationStateWaitPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateWaitPhoneNumber

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateWaitPhoneNumber) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateWaitPhoneNumber) GetType() string {
	return TypeAuthorizationStateWaitPhoneNumber
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateWaitPhoneNumber) AuthorizationStateType() string {
	return TypeAuthorizationStateWaitPhoneNumber
}

// AuthorizationStateWaitCode tDLib needs the user's authentication code to finalize authorization
type AuthorizationStateWaitCode struct {
	meta
	// True, if the user is already registered
	IsRegistered bool `json:"is_registered"`
	// Telegram terms of service, which should be accepted before user can continue registration; may be null
	TermsOfService *TermsOfService `json:"terms_of_service"`
	// Information about the authorization code that was sent
	CodeInfo *AuthenticationCodeInfo `json:"code_info"`
}

// MarshalJSON returns AuthorizationStateWaitCode object as the JSON encoding of AuthorizationStateWaitCode.
func (entity *AuthorizationStateWaitCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateWaitCode

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateWaitCode) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateWaitCode) GetType() string {
	return TypeAuthorizationStateWaitCode
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateWaitCode) AuthorizationStateType() string {
	return TypeAuthorizationStateWaitCode
}

// AuthorizationStateWaitPassword the user has been authorized, but needs to enter a password to start using the application
type AuthorizationStateWaitPassword struct {
	meta
	// Hint for the password; can be empty
	PasswordHint string `json:"password_hint"`
	// True if a recovery email address has been set up
	HasRecoveryEmailAddress bool `json:"has_recovery_email_address"`
	// Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent
	RecoveryEmailAddressPattern string `json:"recovery_email_address_pattern"`
}

// MarshalJSON returns AuthorizationStateWaitPassword object as the JSON encoding of AuthorizationStateWaitPassword.
func (entity *AuthorizationStateWaitPassword) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateWaitPassword

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateWaitPassword) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateWaitPassword) GetType() string {
	return TypeAuthorizationStateWaitPassword
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateWaitPassword) AuthorizationStateType() string {
	return TypeAuthorizationStateWaitPassword
}

// AuthorizationStateReady the user has been successfully authorized. TDLib is now ready to answer queries
type AuthorizationStateReady struct {
	meta
}

// MarshalJSON returns AuthorizationStateReady object as the JSON encoding of AuthorizationStateReady.
func (entity *AuthorizationStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateReady

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateReady) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateReady) GetType() string {
	return TypeAuthorizationStateReady
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateReady) AuthorizationStateType() string {
	return TypeAuthorizationStateReady
}

// AuthorizationStateLoggingOut the user is currently logging out
type AuthorizationStateLoggingOut struct {
	meta
}

// MarshalJSON returns AuthorizationStateLoggingOut object as the JSON encoding of AuthorizationStateLoggingOut.
func (entity *AuthorizationStateLoggingOut) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateLoggingOut

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateLoggingOut) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateLoggingOut) GetType() string {
	return TypeAuthorizationStateLoggingOut
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateLoggingOut) AuthorizationStateType() string {
	return TypeAuthorizationStateLoggingOut
}

// AuthorizationStateClosing tDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received
type AuthorizationStateClosing struct {
	meta
}

// MarshalJSON returns AuthorizationStateClosing object as the JSON encoding of AuthorizationStateClosing.
func (entity *AuthorizationStateClosing) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateClosing

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateClosing) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateClosing) GetType() string {
	return TypeAuthorizationStateClosing
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateClosing) AuthorizationStateType() string {
	return TypeAuthorizationStateClosing
}

// AuthorizationStateClosed tDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to with error code 500. To continue working, one should create a new instance of the TDLib client
type AuthorizationStateClosed struct {
	meta
}

// MarshalJSON returns AuthorizationStateClosed object as the JSON encoding of AuthorizationStateClosed.
func (entity *AuthorizationStateClosed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AuthorizationStateClosed

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AuthorizationStateClosed) GetClass() string {
	return ClassAuthorizationState
}

// GetType returns constant class type string of the class.
func (*AuthorizationStateClosed) GetType() string {
	return TypeAuthorizationStateClosed
}

// AuthorizationStateType returns constant class type string of the class.
func (*AuthorizationStateClosed) AuthorizationStateType() string {
	return TypeAuthorizationStateClosed
}

// PasswordState represents the current state of 2-step verification
type PasswordState struct {
	meta
	// True if a 2-step verification password is set
	HasPassword bool `json:"has_password"`
	// Hint for the password; can be empty
	PasswordHint string `json:"password_hint"`
	// True if a recovery email is set
	HasRecoveryEmailAddress bool `json:"has_recovery_email_address"`
	// True if some Telegram Passport elements were saved
	HasPassportData bool `json:"has_passport_data"`
	// Pattern of the email address to which the confirmation email was sent
	UnconfirmedRecoveryEmailAddressPattern string `json:"unconfirmed_recovery_email_address_pattern"`
}

// MarshalJSON returns PasswordState object as the JSON encoding of PasswordState.
func (entity *PasswordState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PasswordState

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PasswordState) GetClass() string {
	return ClassPasswordState
}

// GetType returns constant class type string of the class.
func (*PasswordState) GetType() string {
	return TypePasswordState
}

// RecoveryEmailAddress contains information about the current recovery email address
type RecoveryEmailAddress struct {
	meta
	// Recovery email address
	RecoveryEmailAddress string `json:"recovery_email_address"`
}

// MarshalJSON returns RecoveryEmailAddress object as the JSON encoding of RecoveryEmailAddress.
func (entity *RecoveryEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RecoveryEmailAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RecoveryEmailAddress) GetClass() string {
	return ClassRecoveryEmailAddress
}

// GetType returns constant class type string of the class.
func (*RecoveryEmailAddress) GetType() string {
	return TypeRecoveryEmailAddress
}

// TemporaryPasswordState returns information about the availability of a temporary password, which can be used for payments
type TemporaryPasswordState struct {
	meta
	// True, if a temporary password is available
	HasPassword bool `json:"has_password"`
	// Time left before the temporary password expires, in seconds
	ValidFor int32 `json:"valid_for"`
}

// MarshalJSON returns TemporaryPasswordState object as the JSON encoding of TemporaryPasswordState.
func (entity *TemporaryPasswordState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TemporaryPasswordState

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TemporaryPasswordState) GetClass() string {
	return ClassTemporaryPasswordState
}

// GetType returns constant class type string of the class.
func (*TemporaryPasswordState) GetType() string {
	return TypeTemporaryPasswordState
}

// LocalFile represents a local file
type LocalFile struct {
	meta
	// Local path to the locally available file part; may be empty
	Path string `json:"path"`
	// True, if it is possible to try to download or generate the file
	CanBeDownloaded bool `json:"can_be_downloaded"`
	// True, if the file can be deleted
	CanBeDeleted bool `json:"can_be_deleted"`
	// True, if the file is currently being downloaded (or a local copy is being generated by some other means)
	IsDownloadingActive bool `json:"is_downloading_active"`
	// True, if the local copy is fully available
	IsDownloadingCompleted bool `json:"is_downloading_completed"`
	// If is_downloading_completed is false, then only some prefix of the file is ready to be read. downloaded_prefix_size is the size of that prefix
	DownloadedPrefixSize int32 `json:"downloaded_prefix_size"`
	// Total downloaded file bytes. Should be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage
	DownloadedSize int32 `json:"downloaded_size"`
}

// MarshalJSON returns LocalFile object as the JSON encoding of LocalFile.
func (entity *LocalFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LocalFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LocalFile) GetClass() string {
	return ClassLocalFile
}

// GetType returns constant class type string of the class.
func (*LocalFile) GetType() string {
	return TypeLocalFile
}

// RemoteFile represents a remote file
type RemoteFile struct {
	meta
	// Remote file identifier; may be empty. Can be used across application restarts or even from other devices for the current user. If the ID starts with "http://" or "https://", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the client with the HTTP URL in the original_path and "#url#" as the conversion string. Clients should generate the file by downloading it to the specified location
	ID string `json:"id"`
	// True, if the file is currently being uploaded (or a remote copy is being generated by some other means)
	IsUploadingActive bool `json:"is_uploading_active"`
	// True, if a remote copy is fully available
	IsUploadingCompleted bool `json:"is_uploading_completed"`
	// Size of the remote available part of the file; 0 if unknown
	UploadedSize int32 `json:"uploaded_size"`
}

// MarshalJSON returns RemoteFile object as the JSON encoding of RemoteFile.
func (entity *RemoteFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RemoteFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RemoteFile) GetClass() string {
	return ClassRemoteFile
}

// GetType returns constant class type string of the class.
func (*RemoteFile) GetType() string {
	return TypeRemoteFile
}

// File represents a file
type File struct {
	meta
	// Unique file identifier
	ID int32 `json:"id"`
	// File size; 0 if unknown
	Size int32 `json:"size"`
	// Expected file size in case the exact file size is unknown, but an approximate size is known. Can be used to show download/upload progress
	ExpectedSize int32 `json:"expected_size"`
	// Information about the local copy of the file
	Local *LocalFile `json:"local"`
	// Information about the remote copy of the file
	Remote *RemoteFile `json:"remote"`
}

// MarshalJSON returns File object as the JSON encoding of File.
func (entity *File) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub File

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*File) GetClass() string {
	return ClassFile
}

// GetType returns constant class type string of the class.
func (*File) GetType() string {
	return TypeFile
}

// InputFileID a file defined by its unique ID
type InputFileID struct {
	meta
	// Unique file identifier
	ID int32 `json:"id"`
}

// MarshalJSON returns InputFileID object as the JSON encoding of InputFileID.
func (entity *InputFileID) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputFileID

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputFileID) GetClass() string {
	return ClassInputFile
}

// GetType returns constant class type string of the class.
func (*InputFileID) GetType() string {
	return TypeInputFileID
}

// InputFileType returns constant class type string of the class.
func (*InputFileID) InputFileType() string {
	return TypeInputFileID
}

// InputFileRemote a file defined by its remote ID
type InputFileRemote struct {
	meta
	// Remote file identifier
	ID string `json:"id"`
}

// MarshalJSON returns InputFileRemote object as the JSON encoding of InputFileRemote.
func (entity *InputFileRemote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputFileRemote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputFileRemote) GetClass() string {
	return ClassInputFile
}

// GetType returns constant class type string of the class.
func (*InputFileRemote) GetType() string {
	return TypeInputFileRemote
}

// InputFileType returns constant class type string of the class.
func (*InputFileRemote) InputFileType() string {
	return TypeInputFileRemote
}

// InputFileLocal a file defined by a local path
type InputFileLocal struct {
	meta
	// Local path to the file
	Path string `json:"path"`
}

// MarshalJSON returns InputFileLocal object as the JSON encoding of InputFileLocal.
func (entity *InputFileLocal) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputFileLocal

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputFileLocal) GetClass() string {
	return ClassInputFile
}

// GetType returns constant class type string of the class.
func (*InputFileLocal) GetType() string {
	return TypeInputFileLocal
}

// InputFileType returns constant class type string of the class.
func (*InputFileLocal) InputFileType() string {
	return TypeInputFileLocal
}

// InputFileGenerated a file generated by the client
type InputFileGenerated struct {
	meta
	// Local path to a file from which the file is generated; may be empty if there is no such file
	OriginalPath string `json:"original_path"`
	// String specifying the conversion applied to the original file; should be persistent across application restarts
	Conversion string `json:"conversion"`
	// Expected size of the generated file; 0 if unknown
	ExpectedSize int32 `json:"expected_size"`
}

// MarshalJSON returns InputFileGenerated object as the JSON encoding of InputFileGenerated.
func (entity *InputFileGenerated) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputFileGenerated

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputFileGenerated) GetClass() string {
	return ClassInputFile
}

// GetType returns constant class type string of the class.
func (*InputFileGenerated) GetType() string {
	return TypeInputFileGenerated
}

// InputFileType returns constant class type string of the class.
func (*InputFileGenerated) InputFileType() string {
	return TypeInputFileGenerated
}

// PhotoSize photo description
type PhotoSize struct {
	meta
	// Thumbnail type (see https://core.telegram.org/constructor/photoSize)
	Type string `json:"type"`
	// Information about the photo file
	Photo *File `json:"photo"`
	// Photo width
	Width int32 `json:"width"`
	// Photo height
	Height int32 `json:"height"`
}

// MarshalJSON returns PhotoSize object as the JSON encoding of PhotoSize.
func (entity *PhotoSize) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PhotoSize

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PhotoSize) GetClass() string {
	return ClassPhotoSize
}

// GetType returns constant class type string of the class.
func (*PhotoSize) GetType() string {
	return TypePhotoSize
}

// MaskPointForehead a mask should be placed relatively to the forehead
type MaskPointForehead struct {
	meta
}

// MarshalJSON returns MaskPointForehead object as the JSON encoding of MaskPointForehead.
func (entity *MaskPointForehead) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MaskPointForehead

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MaskPointForehead) GetClass() string {
	return ClassMaskPoint
}

// GetType returns constant class type string of the class.
func (*MaskPointForehead) GetType() string {
	return TypeMaskPointForehead
}

// MaskPointType returns constant class type string of the class.
func (*MaskPointForehead) MaskPointType() string {
	return TypeMaskPointForehead
}

// MaskPointEyes a mask should be placed relatively to the eyes
type MaskPointEyes struct {
	meta
}

// MarshalJSON returns MaskPointEyes object as the JSON encoding of MaskPointEyes.
func (entity *MaskPointEyes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MaskPointEyes

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MaskPointEyes) GetClass() string {
	return ClassMaskPoint
}

// GetType returns constant class type string of the class.
func (*MaskPointEyes) GetType() string {
	return TypeMaskPointEyes
}

// MaskPointType returns constant class type string of the class.
func (*MaskPointEyes) MaskPointType() string {
	return TypeMaskPointEyes
}

// MaskPointMouth a mask should be placed relatively to the mouth
type MaskPointMouth struct {
	meta
}

// MarshalJSON returns MaskPointMouth object as the JSON encoding of MaskPointMouth.
func (entity *MaskPointMouth) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MaskPointMouth

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MaskPointMouth) GetClass() string {
	return ClassMaskPoint
}

// GetType returns constant class type string of the class.
func (*MaskPointMouth) GetType() string {
	return TypeMaskPointMouth
}

// MaskPointType returns constant class type string of the class.
func (*MaskPointMouth) MaskPointType() string {
	return TypeMaskPointMouth
}

// MaskPointChin a mask should be placed relatively to the chin
type MaskPointChin struct {
	meta
}

// MarshalJSON returns MaskPointChin object as the JSON encoding of MaskPointChin.
func (entity *MaskPointChin) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MaskPointChin

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MaskPointChin) GetClass() string {
	return ClassMaskPoint
}

// GetType returns constant class type string of the class.
func (*MaskPointChin) GetType() string {
	return TypeMaskPointChin
}

// MaskPointType returns constant class type string of the class.
func (*MaskPointChin) MaskPointType() string {
	return TypeMaskPointChin
}

// MaskPosition position on a photo where a mask should be placed
type MaskPosition struct {
	meta
	// Part of the face, relative to which the mask should be placed
	Point MaskPoint `json:"point"`
	// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)
	XShift float64 `json:"x_shift"`
	// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position)
	YShift float64 `json:"y_shift"`
	// Mask scaling coefficient. (For example, 2.0 means a doubled size)
	Scale float64 `json:"scale"`
}

// MarshalJSON returns MaskPosition object as the JSON encoding of MaskPosition.
func (entity *MaskPosition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MaskPosition

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MaskPosition) GetClass() string {
	return ClassMaskPosition
}

// GetType returns constant class type string of the class.
func (*MaskPosition) GetType() string {
	return TypeMaskPosition
}

// UnmarshalJSON sets MaskPosition object to a copy of JSON encoding of MaskPosition.
func (entity *MaskPosition) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Point  json.RawMessage `json:"point"`
		XShift float64         `json:"x_shift"`
		YShift float64         `json:"y_shift"`
		Scale  float64         `json:"scale"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.XShift = tmp.XShift
	entity.YShift = tmp.YShift
	entity.Scale = tmp.Scale

	fieldPoint, _ := UnmarshalMaskPoint(tmp.Point)
	entity.Point = fieldPoint

	return nil
}

// Animation describes an animation file. The animation must be encoded in GIF or MPEG4 format
type Animation struct {
	meta
	// Duration of the animation, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// Width of the animation
	Width int32 `json:"width"`
	// Height of the animation
	Height int32 `json:"height"`
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// MIME type of the file, usually "image/gif" or "video/mp4"
	MimeType string `json:"mime_type"`
	// Animation thumbnail; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
	// File containing the animation
	Animation *File `json:"animation"`
}

// MarshalJSON returns Animation object as the JSON encoding of Animation.
func (entity *Animation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Animation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Animation) GetClass() string {
	return ClassAnimation
}

// GetType returns constant class type string of the class.
func (*Animation) GetType() string {
	return TypeAnimation
}

// Audio describes an audio file. Audio is usually in MP3 format
type Audio struct {
	meta
	// Duration of the audio, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// Title of the audio; as defined by the sender
	Title string `json:"title"`
	// Performer of the audio; as defined by the sender
	Performer string `json:"performer"`
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// The MIME type of the file; as defined by the sender
	MimeType string `json:"mime_type"`
	// The thumbnail of the album cover; as defined by the sender. The full size thumbnail should be extracted from the downloaded file; may be null
	AlbumCoverThumbnail *PhotoSize `json:"album_cover_thumbnail"`
	// File containing the audio
	Audio *File `json:"audio"`
}

// MarshalJSON returns Audio object as the JSON encoding of Audio.
func (entity *Audio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Audio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Audio) GetClass() string {
	return ClassAudio
}

// GetType returns constant class type string of the class.
func (*Audio) GetType() string {
	return TypeAudio
}

// Document describes a document of any type
type Document struct {
	meta
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// MIME type of the file; as defined by the sender
	MimeType string `json:"mime_type"`
	// Document thumbnail; as defined by the sender; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
	// File containing the document
	Document *File `json:"document"`
}

// MarshalJSON returns Document object as the JSON encoding of Document.
func (entity *Document) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Document

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Document) GetClass() string {
	return ClassDocument
}

// GetType returns constant class type string of the class.
func (*Document) GetType() string {
	return TypeDocument
}

// Photo describes a photo
type Photo struct {
	meta
	// Photo identifier; 0 for deleted photos
	ID Int64JSON `json:"id"`
	// True, if stickers were added to the photo
	HasStickers bool `json:"has_stickers"`
	// Available variants of the photo, in different sizes
	Sizes []*PhotoSize `json:"sizes"`
}

// MarshalJSON returns Photo object as the JSON encoding of Photo.
func (entity *Photo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Photo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Photo) GetClass() string {
	return ClassPhoto
}

// GetType returns constant class type string of the class.
func (*Photo) GetType() string {
	return TypePhoto
}

// Sticker describes a sticker
type Sticker struct {
	meta
	// The identifier of the sticker set to which the sticker belongs; 0 if none
	SetID Int64JSON `json:"set_id"`
	// Sticker width; as defined by the sender
	Width int32 `json:"width"`
	// Sticker height; as defined by the sender
	Height int32 `json:"height"`
	// Emoji corresponding to the sticker
	Emoji string `json:"emoji"`
	// True, if the sticker is a mask
	IsMask bool `json:"is_mask"`
	// Position where the mask should be placed; may be null
	MaskPosition *MaskPosition `json:"mask_position"`
	// Sticker thumbnail in WEBP or JPEG format; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
	// File containing the sticker
	Sticker *File `json:"sticker"`
}

// MarshalJSON returns Sticker object as the JSON encoding of Sticker.
func (entity *Sticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Sticker

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Sticker) GetClass() string {
	return ClassSticker
}

// GetType returns constant class type string of the class.
func (*Sticker) GetType() string {
	return TypeSticker
}

// Video describes a video file
type Video struct {
	meta
	// Duration of the video, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// Video width; as defined by the sender
	Width int32 `json:"width"`
	// Video height; as defined by the sender
	Height int32 `json:"height"`
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// MIME type of the file; as defined by the sender
	MimeType string `json:"mime_type"`
	// True, if stickers were added to the photo
	HasStickers bool `json:"has_stickers"`
	// True, if the video should be tried to be streamed
	SupportsStreaming bool `json:"supports_streaming"`
	// Video thumbnail; as defined by the sender; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
	// File containing the video
	Video *File `json:"video"`
}

// MarshalJSON returns Video object as the JSON encoding of Video.
func (entity *Video) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Video

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Video) GetClass() string {
	return ClassVideo
}

// GetType returns constant class type string of the class.
func (*Video) GetType() string {
	return TypeVideo
}

// VideoNote describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format
type VideoNote struct {
	meta
	// Duration of the video, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// Video width and height; as defined by the sender
	Length int32 `json:"length"`
	// Video thumbnail; as defined by the sender; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
	// File containing the video
	Video *File `json:"video"`
}

// MarshalJSON returns VideoNote object as the JSON encoding of VideoNote.
func (entity *VideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub VideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*VideoNote) GetClass() string {
	return ClassVideoNote
}

// GetType returns constant class type string of the class.
func (*VideoNote) GetType() string {
	return TypeVideoNote
}

// VoiceNote describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel
type VoiceNote struct {
	meta
	// Duration of the voice note, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// A waveform representation of the voice note in 5-bit format
	Waveform []byte `json:"waveform"`
	// MIME type of the file; as defined by the sender
	MimeType string `json:"mime_type"`
	// File containing the voice note
	Voice *File `json:"voice"`
}

// MarshalJSON returns VoiceNote object as the JSON encoding of VoiceNote.
func (entity *VoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub VoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*VoiceNote) GetClass() string {
	return ClassVoiceNote
}

// GetType returns constant class type string of the class.
func (*VoiceNote) GetType() string {
	return TypeVoiceNote
}

// Contact describes a user contact
type Contact struct {
	meta
	// Phone number of the user
	PhoneNumber string `json:"phone_number"`
	// First name of the user; 1-255 characters in length
	FirstName string `json:"first_name"`
	// Last name of the user
	LastName string `json:"last_name"`
	// Additional data about the user in a form of vCard; 0-2048 bytes in length
	Vcard string `json:"vcard"`
	// Identifier of the user, if known; otherwise 0
	UserID int32 `json:"user_id"`
}

// MarshalJSON returns Contact object as the JSON encoding of Contact.
func (entity *Contact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Contact

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Contact) GetClass() string {
	return ClassContact
}

// GetType returns constant class type string of the class.
func (*Contact) GetType() string {
	return TypeContact
}

// Location describes a location on planet Earth
type Location struct {
	meta
	// Latitude of the location in degrees; as defined by the sender
	Latitude float64 `json:"latitude"`
	// Longitude of the location, in degrees; as defined by the sender
	Longitude float64 `json:"longitude"`
}

// MarshalJSON returns Location object as the JSON encoding of Location.
func (entity *Location) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Location

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Location) GetClass() string {
	return ClassLocation
}

// GetType returns constant class type string of the class.
func (*Location) GetType() string {
	return TypeLocation
}

// Venue describes a venue
type Venue struct {
	meta
	// Venue location; as defined by the sender
	Location *Location `json:"location"`
	// Venue name; as defined by the sender
	Title string `json:"title"`
	// Venue address; as defined by the sender
	Address string `json:"address"`
	// Provider of the venue database; as defined by the sender. Currently only "foursquare" needs to be supported
	Provider string `json:"provider"`
	// Identifier of the venue in the provider database; as defined by the sender
	ID string `json:"id"`
	// Type of the venue in the provider database; as defined by the sender
	Type string `json:"type"`
}

// MarshalJSON returns Venue object as the JSON encoding of Venue.
func (entity *Venue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Venue

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Venue) GetClass() string {
	return ClassVenue
}

// GetType returns constant class type string of the class.
func (*Venue) GetType() string {
	return TypeVenue
}

// Game describes a game
type Game struct {
	meta
	// Game ID
	ID Int64JSON `json:"id"`
	// Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name}
	ShortName string `json:"short_name"`
	// Game title
	Title string `json:"title"`
	// Game text, usually containing scoreboards for a game
	Text *FormattedText `json:"text"`
	// Game description
	Description string `json:"description"`
	// Game photo
	Photo *Photo `json:"photo"`
	// Game animation; may be null
	Animation *Animation `json:"animation"`
}

// MarshalJSON returns Game object as the JSON encoding of Game.
func (entity *Game) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Game

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Game) GetClass() string {
	return ClassGame
}

// GetType returns constant class type string of the class.
func (*Game) GetType() string {
	return TypeGame
}

// ProfilePhoto describes a user profile photo
type ProfilePhoto struct {
	meta
	// Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of userProfilePhotos
	ID Int64JSON `json:"id"`
	// A small (160x160) user profile photo
	Small *File `json:"small"`
	// A big (640x640) user profile photo
	Big *File `json:"big"`
}

// MarshalJSON returns ProfilePhoto object as the JSON encoding of ProfilePhoto.
func (entity *ProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ProfilePhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ProfilePhoto) GetClass() string {
	return ClassProfilePhoto
}

// GetType returns constant class type string of the class.
func (*ProfilePhoto) GetType() string {
	return TypeProfilePhoto
}

// ChatPhoto describes the photo of a chat
type ChatPhoto struct {
	meta
	// A small (160x160) chat photo
	Small *File `json:"small"`
	// A big (640x640) chat photo
	Big *File `json:"big"`
}

// MarshalJSON returns ChatPhoto object as the JSON encoding of ChatPhoto.
func (entity *ChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatPhoto) GetClass() string {
	return ClassChatPhoto
}

// GetType returns constant class type string of the class.
func (*ChatPhoto) GetType() string {
	return TypeChatPhoto
}

// LinkStateNone the phone number of user A is not known to user B
type LinkStateNone struct {
	meta
}

// MarshalJSON returns LinkStateNone object as the JSON encoding of LinkStateNone.
func (entity *LinkStateNone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LinkStateNone

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LinkStateNone) GetClass() string {
	return ClassLinkState
}

// GetType returns constant class type string of the class.
func (*LinkStateNone) GetType() string {
	return TypeLinkStateNone
}

// LinkStateType returns constant class type string of the class.
func (*LinkStateNone) LinkStateType() string {
	return TypeLinkStateNone
}

// LinkStateKnowsPhoneNumber the phone number of user A is known but that number has not been saved to the contacts list of user B
type LinkStateKnowsPhoneNumber struct {
	meta
}

// MarshalJSON returns LinkStateKnowsPhoneNumber object as the JSON encoding of LinkStateKnowsPhoneNumber.
func (entity *LinkStateKnowsPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LinkStateKnowsPhoneNumber

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LinkStateKnowsPhoneNumber) GetClass() string {
	return ClassLinkState
}

// GetType returns constant class type string of the class.
func (*LinkStateKnowsPhoneNumber) GetType() string {
	return TypeLinkStateKnowsPhoneNumber
}

// LinkStateType returns constant class type string of the class.
func (*LinkStateKnowsPhoneNumber) LinkStateType() string {
	return TypeLinkStateKnowsPhoneNumber
}

// LinkStateIsContact the phone number of user A has been saved to the contacts list of user B
type LinkStateIsContact struct {
	meta
}

// MarshalJSON returns LinkStateIsContact object as the JSON encoding of LinkStateIsContact.
func (entity *LinkStateIsContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LinkStateIsContact

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LinkStateIsContact) GetClass() string {
	return ClassLinkState
}

// GetType returns constant class type string of the class.
func (*LinkStateIsContact) GetType() string {
	return TypeLinkStateIsContact
}

// LinkStateType returns constant class type string of the class.
func (*LinkStateIsContact) LinkStateType() string {
	return TypeLinkStateIsContact
}

// UserTypeRegular a regular user
type UserTypeRegular struct {
	meta
}

// MarshalJSON returns UserTypeRegular object as the JSON encoding of UserTypeRegular.
func (entity *UserTypeRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserTypeRegular

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserTypeRegular) GetClass() string {
	return ClassUserType
}

// GetType returns constant class type string of the class.
func (*UserTypeRegular) GetType() string {
	return TypeUserTypeRegular
}

// UserTypeType returns constant class type string of the class.
func (*UserTypeRegular) UserTypeType() string {
	return TypeUserTypeRegular
}

// UserTypeDeleted a deleted user or deleted bot. No information on the user besides the user_id is available. It is not possible to perform any active actions on this type of user
type UserTypeDeleted struct {
	meta
}

// MarshalJSON returns UserTypeDeleted object as the JSON encoding of UserTypeDeleted.
func (entity *UserTypeDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserTypeDeleted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserTypeDeleted) GetClass() string {
	return ClassUserType
}

// GetType returns constant class type string of the class.
func (*UserTypeDeleted) GetType() string {
	return TypeUserTypeDeleted
}

// UserTypeType returns constant class type string of the class.
func (*UserTypeDeleted) UserTypeType() string {
	return TypeUserTypeDeleted
}

// UserTypeBot a bot (see https://core.telegram.org/bots)
type UserTypeBot struct {
	meta
	// True, if the bot can be invited to basic group and supergroup chats
	CanJoinGroups bool `json:"can_join_groups"`
	// True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages
	CanReadAllGroupMessages bool `json:"can_read_all_group_messages"`
	// True, if the bot supports inline queries
	IsInline bool `json:"is_inline"`
	// Placeholder for inline queries (displayed on the client input field)
	InlineQueryPlaceholder string `json:"inline_query_placeholder"`
	// True, if the location of the user should be sent with every inline query to this bot
	NeedLocation bool `json:"need_location"`
}

// MarshalJSON returns UserTypeBot object as the JSON encoding of UserTypeBot.
func (entity *UserTypeBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserTypeBot

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserTypeBot) GetClass() string {
	return ClassUserType
}

// GetType returns constant class type string of the class.
func (*UserTypeBot) GetType() string {
	return TypeUserTypeBot
}

// UserTypeType returns constant class type string of the class.
func (*UserTypeBot) UserTypeType() string {
	return TypeUserTypeBot
}

// UserTypeUnknown no information on the user besides the user_id is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type
type UserTypeUnknown struct {
	meta
}

// MarshalJSON returns UserTypeUnknown object as the JSON encoding of UserTypeUnknown.
func (entity *UserTypeUnknown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserTypeUnknown

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserTypeUnknown) GetClass() string {
	return ClassUserType
}

// GetType returns constant class type string of the class.
func (*UserTypeUnknown) GetType() string {
	return TypeUserTypeUnknown
}

// UserTypeType returns constant class type string of the class.
func (*UserTypeUnknown) UserTypeType() string {
	return TypeUserTypeUnknown
}

// BotCommand represents commands supported by a bot
type BotCommand struct {
	meta
	// Text of the bot command
	Command string `json:"command"`
	// Description of the bot command
	Description string `json:"description"`
}

// MarshalJSON returns BotCommand object as the JSON encoding of BotCommand.
func (entity *BotCommand) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub BotCommand

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*BotCommand) GetClass() string {
	return ClassBotCommand
}

// GetType returns constant class type string of the class.
func (*BotCommand) GetType() string {
	return TypeBotCommand
}

// BotInfo provides information about a bot and its supported commands
type BotInfo struct {
	meta
	// Long description shown on the user info page
	Description string `json:"description"`
	// A list of commands supported by the bot
	Commands []*BotCommand `json:"commands"`
}

// MarshalJSON returns BotInfo object as the JSON encoding of BotInfo.
func (entity *BotInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub BotInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*BotInfo) GetClass() string {
	return ClassBotInfo
}

// GetType returns constant class type string of the class.
func (*BotInfo) GetType() string {
	return TypeBotInfo
}

// User represents a user
type User struct {
	meta
	// User identifier
	ID int32 `json:"id"`
	// First name of the user
	FirstName string `json:"first_name"`
	// Last name of the user
	LastName string `json:"last_name"`
	// Username of the user
	Username string `json:"username"`
	// Phone number of the user
	PhoneNumber string `json:"phone_number"`
	// Current online status of the user
	Status UserStatus `json:"status"`
	// Profile photo of the user; may be null
	ProfilePhoto *ProfilePhoto `json:"profile_photo"`
	// Relationship from the current user to the other user
	OutgoingLink LinkState `json:"outgoing_link"`
	// Relationship from the other user to the current user
	IncomingLink LinkState `json:"incoming_link"`
	// True, if the user is verified
	IsVerified bool `json:"is_verified"`
	// If non-empty, it contains the reason why access to this user must be restricted. The format of the string is "{type}: {description}". {type} contains the type of the restriction and at least one of the suffixes "-all", "-ios", "-android", or "-wp", which describe the platforms on which access should be restricted. (For example, "terms-ios-android". {description} contains a human-readable description of the restriction, which can be shown to the user)
	RestrictionReason string `json:"restriction_reason"`
	// If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser
	HaveAccess bool `json:"have_access"`
	// Type of the user
	Type UserType `json:"type"`
	// IETF language tag of the user's language; only available to bots
	LanguageCode string `json:"language_code"`
}

// MarshalJSON returns User object as the JSON encoding of User.
func (entity *User) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub User

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*User) GetClass() string {
	return ClassUser
}

// GetType returns constant class type string of the class.
func (*User) GetType() string {
	return TypeUser
}

// UnmarshalJSON sets User object to a copy of JSON encoding of User.
func (entity *User) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                int32           `json:"id"`
		FirstName         string          `json:"first_name"`
		LastName          string          `json:"last_name"`
		Username          string          `json:"username"`
		PhoneNumber       string          `json:"phone_number"`
		Status            json.RawMessage `json:"status"`
		ProfilePhoto      *ProfilePhoto   `json:"profile_photo"`
		OutgoingLink      json.RawMessage `json:"outgoing_link"`
		IncomingLink      json.RawMessage `json:"incoming_link"`
		IsVerified        bool            `json:"is_verified"`
		RestrictionReason string          `json:"restriction_reason"`
		HaveAccess        bool            `json:"have_access"`
		Type              json.RawMessage `json:"type"`
		LanguageCode      string          `json:"language_code"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.FirstName = tmp.FirstName
	entity.LastName = tmp.LastName
	entity.Username = tmp.Username
	entity.PhoneNumber = tmp.PhoneNumber
	entity.ProfilePhoto = tmp.ProfilePhoto
	entity.IsVerified = tmp.IsVerified
	entity.RestrictionReason = tmp.RestrictionReason
	entity.HaveAccess = tmp.HaveAccess
	entity.LanguageCode = tmp.LanguageCode

	fieldStatus, _ := UnmarshalUserStatus(tmp.Status)
	entity.Status = fieldStatus

	fieldOutgoingLink, _ := UnmarshalLinkState(tmp.OutgoingLink)
	entity.OutgoingLink = fieldOutgoingLink

	fieldIncomingLink, _ := UnmarshalLinkState(tmp.IncomingLink)
	entity.IncomingLink = fieldIncomingLink

	fieldType, _ := UnmarshalUserType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// UserFullInfo contains full information about a user (except the full list of profile photos)
type UserFullInfo struct {
	meta
	// True, if the user is blacklisted by the current user
	IsBlocked bool `json:"is_blocked"`
	// True, if the user can be called
	CanBeCalled bool `json:"can_be_called"`
	// True, if the user can't be called due to their privacy settings
	HasPrivateCalls bool `json:"has_private_calls"`
	// A short user bio
	Bio string `json:"bio"`
	// For bots, the text that is included with the link when users share the bot
	ShareText string `json:"share_text"`
	// Number of group chats where both the other user and the current user are a member; 0 for the current user
	GroupInCommonCount int32 `json:"group_in_common_count"`
	// If the user is a bot, information about the bot; may be null
	BotInfo *BotInfo `json:"bot_info"`
}

// MarshalJSON returns UserFullInfo object as the JSON encoding of UserFullInfo.
func (entity *UserFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserFullInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserFullInfo) GetClass() string {
	return ClassUserFullInfo
}

// GetType returns constant class type string of the class.
func (*UserFullInfo) GetType() string {
	return TypeUserFullInfo
}

// UserProfilePhotos contains part of the list of user photos
type UserProfilePhotos struct {
	meta
	// Total number of user profile photos
	TotalCount int32 `json:"total_count"`
	// A list of photos
	Photos []*Photo `json:"photos"`
}

// MarshalJSON returns UserProfilePhotos object as the JSON encoding of UserProfilePhotos.
func (entity *UserProfilePhotos) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserProfilePhotos

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserProfilePhotos) GetClass() string {
	return ClassUserProfilePhotos
}

// GetType returns constant class type string of the class.
func (*UserProfilePhotos) GetType() string {
	return TypeUserProfilePhotos
}

// Users represents a list of users
type Users struct {
	meta
	// Approximate total count of users found
	TotalCount int32 `json:"total_count"`
	// A list of user identifiers
	UserIDs []int32 `json:"user_ids"`
}

// MarshalJSON returns Users object as the JSON encoding of Users.
func (entity *Users) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Users

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Users) GetClass() string {
	return ClassUsers
}

// GetType returns constant class type string of the class.
func (*Users) GetType() string {
	return TypeUsers
}

// ChatMemberStatusCreator the user is the creator of a chat and has all the administrator privileges
type ChatMemberStatusCreator struct {
	meta
	// True, if the user is a member of the chat
	IsMember bool `json:"is_member"`
}

// MarshalJSON returns ChatMemberStatusCreator object as the JSON encoding of ChatMemberStatusCreator.
func (entity *ChatMemberStatusCreator) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMemberStatusCreator

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMemberStatusCreator) GetClass() string {
	return ClassChatMemberStatus
}

// GetType returns constant class type string of the class.
func (*ChatMemberStatusCreator) GetType() string {
	return TypeChatMemberStatusCreator
}

// ChatMemberStatusType returns constant class type string of the class.
func (*ChatMemberStatusCreator) ChatMemberStatusType() string {
	return TypeChatMemberStatusCreator
}

// ChatMemberStatusAdministrator the user is a member of a chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, and ban unprivileged members. In supergroups and channels, there are more detailed options for administrator privileges
type ChatMemberStatusAdministrator struct {
	meta
	// True, if the current user can edit the administrator privileges for the called user
	CanBeEdited bool `json:"can_be_edited"`
	// True, if the administrator can change the chat title, photo, and other settings
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the administrator can create channel posts; applicable to channels only
	CanPostMessages bool `json:"can_post_messages"`
	// True, if the administrator can edit messages of other users and pin messages; applicable to channels only
	CanEditMessages bool `json:"can_edit_messages"`
	// True, if the administrator can delete messages of other users
	CanDeleteMessages bool `json:"can_delete_messages"`
	// True, if the administrator can invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the administrator can restrict, ban, or unban chat members
	CanRestrictMembers bool `json:"can_restrict_members"`
	// True, if the administrator can pin messages; applicable to supergroups only
	CanPinMessages bool `json:"can_pin_messages"`
	// True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that were directly or indirectly promoted by him
	CanPromoteMembers bool `json:"can_promote_members"`
}

// MarshalJSON returns ChatMemberStatusAdministrator object as the JSON encoding of ChatMemberStatusAdministrator.
func (entity *ChatMemberStatusAdministrator) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMemberStatusAdministrator

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMemberStatusAdministrator) GetClass() string {
	return ClassChatMemberStatus
}

// GetType returns constant class type string of the class.
func (*ChatMemberStatusAdministrator) GetType() string {
	return TypeChatMemberStatusAdministrator
}

// ChatMemberStatusType returns constant class type string of the class.
func (*ChatMemberStatusAdministrator) ChatMemberStatusType() string {
	return TypeChatMemberStatusAdministrator
}

// ChatMemberStatusMember the user is a member of a chat, without any additional privileges or restrictions
type ChatMemberStatusMember struct {
	meta
}

// MarshalJSON returns ChatMemberStatusMember object as the JSON encoding of ChatMemberStatusMember.
func (entity *ChatMemberStatusMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMemberStatusMember

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMemberStatusMember) GetClass() string {
	return ClassChatMemberStatus
}

// GetType returns constant class type string of the class.
func (*ChatMemberStatusMember) GetType() string {
	return TypeChatMemberStatusMember
}

// ChatMemberStatusType returns constant class type string of the class.
func (*ChatMemberStatusMember) ChatMemberStatusType() string {
	return TypeChatMemberStatusMember
}

// ChatMemberStatusRestricted the user is under certain restrictions in the chat. Not supported in basic groups and channels
type ChatMemberStatusRestricted struct {
	meta
	// True, if the user is a member of the chat
	IsMember bool `json:"is_member"`
	// Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever
	RestrictedUntilDate int32 `json:"restricted_until_date"`
	// True, if the user can send text messages, contacts, locations, and venues
	CanSendMessages bool `json:"can_send_messages"`
	// True, if the user can send audio files, documents, photos, videos, video notes, and voice notes. Implies can_send_messages permissions
	CanSendMediaMessages bool `json:"can_send_media_messages"`
	// True, if the user can send animations, games, and stickers and use inline bots. Implies can_send_media_messages permissions
	CanSendOtherMessages bool `json:"can_send_other_messages"`
	// True, if the user may add a web page preview to his messages. Implies can_send_messages permissions
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews"`
}

// MarshalJSON returns ChatMemberStatusRestricted object as the JSON encoding of ChatMemberStatusRestricted.
func (entity *ChatMemberStatusRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMemberStatusRestricted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMemberStatusRestricted) GetClass() string {
	return ClassChatMemberStatus
}

// GetType returns constant class type string of the class.
func (*ChatMemberStatusRestricted) GetType() string {
	return TypeChatMemberStatusRestricted
}

// ChatMemberStatusType returns constant class type string of the class.
func (*ChatMemberStatusRestricted) ChatMemberStatusType() string {
	return TypeChatMemberStatusRestricted
}

// ChatMemberStatusLeft the user is not a chat member
type ChatMemberStatusLeft struct {
	meta
}

// MarshalJSON returns ChatMemberStatusLeft object as the JSON encoding of ChatMemberStatusLeft.
func (entity *ChatMemberStatusLeft) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMemberStatusLeft

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMemberStatusLeft) GetClass() string {
	return ClassChatMemberStatus
}

// GetType returns constant class type string of the class.
func (*ChatMemberStatusLeft) GetType() string {
	return TypeChatMemberStatusLeft
}

// ChatMemberStatusType returns constant class type string of the class.
func (*ChatMemberStatusLeft) ChatMemberStatusType() string {
	return TypeChatMemberStatusLeft
}

// ChatMemberStatusBanned the user was banned (and hence is not a member of the chat). Implies the user can't return to the chat or view messages
type ChatMemberStatusBanned struct {
	meta
	// Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever
	BannedUntilDate int32 `json:"banned_until_date"`
}

// MarshalJSON returns ChatMemberStatusBanned object as the JSON encoding of ChatMemberStatusBanned.
func (entity *ChatMemberStatusBanned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMemberStatusBanned

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMemberStatusBanned) GetClass() string {
	return ClassChatMemberStatus
}

// GetType returns constant class type string of the class.
func (*ChatMemberStatusBanned) GetType() string {
	return TypeChatMemberStatusBanned
}

// ChatMemberStatusType returns constant class type string of the class.
func (*ChatMemberStatusBanned) ChatMemberStatusType() string {
	return TypeChatMemberStatusBanned
}

// ChatMember a user with information about joining/leaving a chat
type ChatMember struct {
	meta
	// User identifier of the chat member
	UserID int32 `json:"user_id"`
	// Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown
	InviterUserID int32 `json:"inviter_user_id"`
	// Point in time (Unix timestamp) when the user joined a chat
	JoinedChatDate int32 `json:"joined_chat_date"`
	// Status of the member in the chat
	Status ChatMemberStatus `json:"status"`
	// If the user is a bot, information about the bot; may be null. Can be null even for a bot if the bot is not a chat member
	BotInfo *BotInfo `json:"bot_info"`
}

// MarshalJSON returns ChatMember object as the JSON encoding of ChatMember.
func (entity *ChatMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMember

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMember) GetClass() string {
	return ClassChatMember
}

// GetType returns constant class type string of the class.
func (*ChatMember) GetType() string {
	return TypeChatMember
}

// UnmarshalJSON sets ChatMember object to a copy of JSON encoding of ChatMember.
func (entity *ChatMember) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserID         int32           `json:"user_id"`
		InviterUserID  int32           `json:"inviter_user_id"`
		JoinedChatDate int32           `json:"joined_chat_date"`
		Status         json.RawMessage `json:"status"`
		BotInfo        *BotInfo        `json:"bot_info"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.UserID = tmp.UserID
	entity.InviterUserID = tmp.InviterUserID
	entity.JoinedChatDate = tmp.JoinedChatDate
	entity.BotInfo = tmp.BotInfo

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	entity.Status = fieldStatus

	return nil
}

// ChatMembers contains a list of chat members
type ChatMembers struct {
	meta
	// Approximate total count of chat members found
	TotalCount int32 `json:"total_count"`
	// A list of chat members
	Members []*ChatMember `json:"members"`
}

// MarshalJSON returns ChatMembers object as the JSON encoding of ChatMembers.
func (entity *ChatMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMembers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMembers) GetClass() string {
	return ClassChatMembers
}

// GetType returns constant class type string of the class.
func (*ChatMembers) GetType() string {
	return TypeChatMembers
}

// ChatMembersFilterAdministrators returns the creator and administrators
type ChatMembersFilterAdministrators struct {
	meta
}

// MarshalJSON returns ChatMembersFilterAdministrators object as the JSON encoding of ChatMembersFilterAdministrators.
func (entity *ChatMembersFilterAdministrators) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMembersFilterAdministrators

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMembersFilterAdministrators) GetClass() string {
	return ClassChatMembersFilter
}

// GetType returns constant class type string of the class.
func (*ChatMembersFilterAdministrators) GetType() string {
	return TypeChatMembersFilterAdministrators
}

// ChatMembersFilterType returns constant class type string of the class.
func (*ChatMembersFilterAdministrators) ChatMembersFilterType() string {
	return TypeChatMembersFilterAdministrators
}

// ChatMembersFilterMembers returns all chat members, including restricted chat members
type ChatMembersFilterMembers struct {
	meta
}

// MarshalJSON returns ChatMembersFilterMembers object as the JSON encoding of ChatMembersFilterMembers.
func (entity *ChatMembersFilterMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMembersFilterMembers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMembersFilterMembers) GetClass() string {
	return ClassChatMembersFilter
}

// GetType returns constant class type string of the class.
func (*ChatMembersFilterMembers) GetType() string {
	return TypeChatMembersFilterMembers
}

// ChatMembersFilterType returns constant class type string of the class.
func (*ChatMembersFilterMembers) ChatMembersFilterType() string {
	return TypeChatMembersFilterMembers
}

// ChatMembersFilterRestricted returns users under certain restrictions in the chat; can be used only by administrators in a supergroup
type ChatMembersFilterRestricted struct {
	meta
}

// MarshalJSON returns ChatMembersFilterRestricted object as the JSON encoding of ChatMembersFilterRestricted.
func (entity *ChatMembersFilterRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMembersFilterRestricted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMembersFilterRestricted) GetClass() string {
	return ClassChatMembersFilter
}

// GetType returns constant class type string of the class.
func (*ChatMembersFilterRestricted) GetType() string {
	return TypeChatMembersFilterRestricted
}

// ChatMembersFilterType returns constant class type string of the class.
func (*ChatMembersFilterRestricted) ChatMembersFilterType() string {
	return TypeChatMembersFilterRestricted
}

// ChatMembersFilterBanned returns users banned from the chat; can be used only by administrators in a supergroup or in a channel
type ChatMembersFilterBanned struct {
	meta
}

// MarshalJSON returns ChatMembersFilterBanned object as the JSON encoding of ChatMembersFilterBanned.
func (entity *ChatMembersFilterBanned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMembersFilterBanned

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMembersFilterBanned) GetClass() string {
	return ClassChatMembersFilter
}

// GetType returns constant class type string of the class.
func (*ChatMembersFilterBanned) GetType() string {
	return TypeChatMembersFilterBanned
}

// ChatMembersFilterType returns constant class type string of the class.
func (*ChatMembersFilterBanned) ChatMembersFilterType() string {
	return TypeChatMembersFilterBanned
}

// ChatMembersFilterBots returns bot members of the chat
type ChatMembersFilterBots struct {
	meta
}

// MarshalJSON returns ChatMembersFilterBots object as the JSON encoding of ChatMembersFilterBots.
func (entity *ChatMembersFilterBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatMembersFilterBots

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatMembersFilterBots) GetClass() string {
	return ClassChatMembersFilter
}

// GetType returns constant class type string of the class.
func (*ChatMembersFilterBots) GetType() string {
	return TypeChatMembersFilterBots
}

// ChatMembersFilterType returns constant class type string of the class.
func (*ChatMembersFilterBots) ChatMembersFilterType() string {
	return TypeChatMembersFilterBots
}

// SupergroupMembersFilterRecent returns recently active users in reverse chronological order
type SupergroupMembersFilterRecent struct {
	meta
}

// MarshalJSON returns SupergroupMembersFilterRecent object as the JSON encoding of SupergroupMembersFilterRecent.
func (entity *SupergroupMembersFilterRecent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SupergroupMembersFilterRecent

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SupergroupMembersFilterRecent) GetClass() string {
	return ClassSupergroupMembersFilter
}

// GetType returns constant class type string of the class.
func (*SupergroupMembersFilterRecent) GetType() string {
	return TypeSupergroupMembersFilterRecent
}

// SupergroupMembersFilterType returns constant class type string of the class.
func (*SupergroupMembersFilterRecent) SupergroupMembersFilterType() string {
	return TypeSupergroupMembersFilterRecent
}

// SupergroupMembersFilterAdministrators returns the creator and administrators
type SupergroupMembersFilterAdministrators struct {
	meta
}

// MarshalJSON returns SupergroupMembersFilterAdministrators object as the JSON encoding of SupergroupMembersFilterAdministrators.
func (entity *SupergroupMembersFilterAdministrators) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SupergroupMembersFilterAdministrators

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SupergroupMembersFilterAdministrators) GetClass() string {
	return ClassSupergroupMembersFilter
}

// GetType returns constant class type string of the class.
func (*SupergroupMembersFilterAdministrators) GetType() string {
	return TypeSupergroupMembersFilterAdministrators
}

// SupergroupMembersFilterType returns constant class type string of the class.
func (*SupergroupMembersFilterAdministrators) SupergroupMembersFilterType() string {
	return TypeSupergroupMembersFilterAdministrators
}

// SupergroupMembersFilterSearch used to search for supergroup or channel members via a (string) query
type SupergroupMembersFilterSearch struct {
	meta
	// Query to search for
	Query string `json:"query"`
}

// MarshalJSON returns SupergroupMembersFilterSearch object as the JSON encoding of SupergroupMembersFilterSearch.
func (entity *SupergroupMembersFilterSearch) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SupergroupMembersFilterSearch

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SupergroupMembersFilterSearch) GetClass() string {
	return ClassSupergroupMembersFilter
}

// GetType returns constant class type string of the class.
func (*SupergroupMembersFilterSearch) GetType() string {
	return TypeSupergroupMembersFilterSearch
}

// SupergroupMembersFilterType returns constant class type string of the class.
func (*SupergroupMembersFilterSearch) SupergroupMembersFilterType() string {
	return TypeSupergroupMembersFilterSearch
}

// SupergroupMembersFilterRestricted returns restricted supergroup members; can be used only by administrators
type SupergroupMembersFilterRestricted struct {
	meta
	// Query to search for
	Query string `json:"query"`
}

// MarshalJSON returns SupergroupMembersFilterRestricted object as the JSON encoding of SupergroupMembersFilterRestricted.
func (entity *SupergroupMembersFilterRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SupergroupMembersFilterRestricted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SupergroupMembersFilterRestricted) GetClass() string {
	return ClassSupergroupMembersFilter
}

// GetType returns constant class type string of the class.
func (*SupergroupMembersFilterRestricted) GetType() string {
	return TypeSupergroupMembersFilterRestricted
}

// SupergroupMembersFilterType returns constant class type string of the class.
func (*SupergroupMembersFilterRestricted) SupergroupMembersFilterType() string {
	return TypeSupergroupMembersFilterRestricted
}

// SupergroupMembersFilterBanned returns users banned from the supergroup or channel; can be used only by administrators
type SupergroupMembersFilterBanned struct {
	meta
	// Query to search for
	Query string `json:"query"`
}

// MarshalJSON returns SupergroupMembersFilterBanned object as the JSON encoding of SupergroupMembersFilterBanned.
func (entity *SupergroupMembersFilterBanned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SupergroupMembersFilterBanned

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SupergroupMembersFilterBanned) GetClass() string {
	return ClassSupergroupMembersFilter
}

// GetType returns constant class type string of the class.
func (*SupergroupMembersFilterBanned) GetType() string {
	return TypeSupergroupMembersFilterBanned
}

// SupergroupMembersFilterType returns constant class type string of the class.
func (*SupergroupMembersFilterBanned) SupergroupMembersFilterType() string {
	return TypeSupergroupMembersFilterBanned
}

// SupergroupMembersFilterBots returns bot members of the supergroup or channel
type SupergroupMembersFilterBots struct {
	meta
}

// MarshalJSON returns SupergroupMembersFilterBots object as the JSON encoding of SupergroupMembersFilterBots.
func (entity *SupergroupMembersFilterBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SupergroupMembersFilterBots

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SupergroupMembersFilterBots) GetClass() string {
	return ClassSupergroupMembersFilter
}

// GetType returns constant class type string of the class.
func (*SupergroupMembersFilterBots) GetType() string {
	return TypeSupergroupMembersFilterBots
}

// SupergroupMembersFilterType returns constant class type string of the class.
func (*SupergroupMembersFilterBots) SupergroupMembersFilterType() string {
	return TypeSupergroupMembersFilterBots
}

// BasicGroup represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users)
type BasicGroup struct {
	meta
	// Group identifier
	ID int32 `json:"id"`
	// Number of members in the group
	MemberCount int32 `json:"member_count"`
	// Status of the current user in the group
	Status ChatMemberStatus `json:"status"`
	// True, if all members have been granted administrator rights in the group
	EveryoneIsAdministrator bool `json:"everyone_is_administrator"`
	// True, if the group is active
	IsActive bool `json:"is_active"`
	// Identifier of the supergroup to which this group was upgraded; 0 if none
	UpgradedToSupergroupID int32 `json:"upgraded_to_supergroup_id"`
}

// MarshalJSON returns BasicGroup object as the JSON encoding of BasicGroup.
func (entity *BasicGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub BasicGroup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*BasicGroup) GetClass() string {
	return ClassBasicGroup
}

// GetType returns constant class type string of the class.
func (*BasicGroup) GetType() string {
	return TypeBasicGroup
}

// UnmarshalJSON sets BasicGroup object to a copy of JSON encoding of BasicGroup.
func (entity *BasicGroup) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                      int32           `json:"id"`
		MemberCount             int32           `json:"member_count"`
		Status                  json.RawMessage `json:"status"`
		EveryoneIsAdministrator bool            `json:"everyone_is_administrator"`
		IsActive                bool            `json:"is_active"`
		UpgradedToSupergroupID  int32           `json:"upgraded_to_supergroup_id"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.MemberCount = tmp.MemberCount
	entity.EveryoneIsAdministrator = tmp.EveryoneIsAdministrator
	entity.IsActive = tmp.IsActive
	entity.UpgradedToSupergroupID = tmp.UpgradedToSupergroupID

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	entity.Status = fieldStatus

	return nil
}

// BasicGroupFullInfo contains full information about a basic group
type BasicGroupFullInfo struct {
	meta
	// User identifier of the creator of the group; 0 if unknown
	CreatorUserID int32 `json:"creator_user_id"`
	// Group members
	Members []*ChatMember `json:"members"`
	// Invite link for this group; available only for the group creator and only after it has been generated at least once
	InviteLink string `json:"invite_link"`
}

// MarshalJSON returns BasicGroupFullInfo object as the JSON encoding of BasicGroupFullInfo.
func (entity *BasicGroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub BasicGroupFullInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*BasicGroupFullInfo) GetClass() string {
	return ClassBasicGroupFullInfo
}

// GetType returns constant class type string of the class.
func (*BasicGroupFullInfo) GetType() string {
	return TypeBasicGroupFullInfo
}

// Supergroup represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers
type Supergroup struct {
	meta
	// Supergroup or channel identifier
	ID int32 `json:"id"`
	// Username of the supergroup or channel; empty for private supergroups or channels
	Username string `json:"username"`
	// Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member
	Date int32 `json:"date"`
	// Status of the current user in the supergroup or channel
	Status ChatMemberStatus `json:"status"`
	// Member count; 0 if unknown. Currently it is guaranteed to be known only if the supergroup or channel was found through SearchPublicChats
	MemberCount int32 `json:"member_count"`
	// True, if any member of the supergroup can invite other members. This field has no meaning for channels
	AnyoneCanInvite bool `json:"anyone_can_invite"`
	// True, if messages sent to the channel should contain information about the sender. This field is only applicable to channels
	SignMessages bool `json:"sign_messages"`
	// True, if the supergroup is a channel
	IsChannel bool `json:"is_channel"`
	// True, if the supergroup or channel is verified
	IsVerified bool `json:"is_verified"`
	// If non-empty, contains the reason why access to this supergroup or channel must be restricted. Format of the string is "{type}: {description}". {type} Contains the type of the restriction and at least one of the suffixes "-all", "-ios", "-android", or "-wp", which describe the platforms on which access should be restricted. (For example, "terms-ios-android". {description} contains a human-readable description of the restriction, which can be shown to the user)
	RestrictionReason string `json:"restriction_reason"`
}

// MarshalJSON returns Supergroup object as the JSON encoding of Supergroup.
func (entity *Supergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Supergroup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Supergroup) GetClass() string {
	return ClassSupergroup
}

// GetType returns constant class type string of the class.
func (*Supergroup) GetType() string {
	return TypeSupergroup
}

// UnmarshalJSON sets Supergroup object to a copy of JSON encoding of Supergroup.
func (entity *Supergroup) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                int32           `json:"id"`
		Username          string          `json:"username"`
		Date              int32           `json:"date"`
		Status            json.RawMessage `json:"status"`
		MemberCount       int32           `json:"member_count"`
		AnyoneCanInvite   bool            `json:"anyone_can_invite"`
		SignMessages      bool            `json:"sign_messages"`
		IsChannel         bool            `json:"is_channel"`
		IsVerified        bool            `json:"is_verified"`
		RestrictionReason string          `json:"restriction_reason"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Username = tmp.Username
	entity.Date = tmp.Date
	entity.MemberCount = tmp.MemberCount
	entity.AnyoneCanInvite = tmp.AnyoneCanInvite
	entity.SignMessages = tmp.SignMessages
	entity.IsChannel = tmp.IsChannel
	entity.IsVerified = tmp.IsVerified
	entity.RestrictionReason = tmp.RestrictionReason

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	entity.Status = fieldStatus

	return nil
}

// SupergroupFullInfo contains full information about a supergroup or channel
type SupergroupFullInfo struct {
	meta
	// Supergroup or channel description
	Description string `json:"description"`
	// Number of members in the supergroup or channel; 0 if unknown
	MemberCount int32 `json:"member_count"`
	// Number of privileged users in the supergroup or channel; 0 if unknown
	AdministratorCount int32 `json:"administrator_count"`
	// Number of restricted users in the supergroup; 0 if unknown
	RestrictedCount int32 `json:"restricted_count"`
	// Number of users banned from chat; 0 if unknown
	BannedCount int32 `json:"banned_count"`
	// True, if members of the chat can be retrieved
	CanGetMembers bool `json:"can_get_members"`
	// True, if the chat can be made public
	CanSetUsername bool `json:"can_set_username"`
	// True, if the supergroup sticker set can be changed
	CanSetStickerSet bool `json:"can_set_sticker_set"`
	// True, if new chat members will have access to old messages. In public supergroups and both public and private channels, old messages are always available, so this option affects only private supergroups. The value of this field is only available for chat administrators
	IsAllHistoryAvailable bool `json:"is_all_history_available"`
	// Identifier of the supergroup sticker set; 0 if none
	StickerSetID Int64JSON `json:"sticker_set_id"`
	// Invite link for this chat
	InviteLink string `json:"invite_link"`
	// Identifier of the pinned message in the chat; 0 if none
	PinnedMessageID int64 `json:"pinned_message_id"`
	// Identifier of the basic group from which supergroup was upgraded; 0 if none
	UpgradedFromBasicGroupID int32 `json:"upgraded_from_basic_group_id"`
	// Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none
	UpgradedFromMaxMessageID int64 `json:"upgraded_from_max_message_id"`
}

// MarshalJSON returns SupergroupFullInfo object as the JSON encoding of SupergroupFullInfo.
func (entity *SupergroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SupergroupFullInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SupergroupFullInfo) GetClass() string {
	return ClassSupergroupFullInfo
}

// GetType returns constant class type string of the class.
func (*SupergroupFullInfo) GetType() string {
	return TypeSupergroupFullInfo
}

// SecretChatStatePending the secret chat is not yet created; waiting for the other user to get online
type SecretChatStatePending struct {
	meta
}

// MarshalJSON returns SecretChatStatePending object as the JSON encoding of SecretChatStatePending.
func (entity *SecretChatStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SecretChatStatePending

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SecretChatStatePending) GetClass() string {
	return ClassSecretChatState
}

// GetType returns constant class type string of the class.
func (*SecretChatStatePending) GetType() string {
	return TypeSecretChatStatePending
}

// SecretChatStateType returns constant class type string of the class.
func (*SecretChatStatePending) SecretChatStateType() string {
	return TypeSecretChatStatePending
}

// SecretChatStateReady the secret chat is ready to use
type SecretChatStateReady struct {
	meta
}

// MarshalJSON returns SecretChatStateReady object as the JSON encoding of SecretChatStateReady.
func (entity *SecretChatStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SecretChatStateReady

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SecretChatStateReady) GetClass() string {
	return ClassSecretChatState
}

// GetType returns constant class type string of the class.
func (*SecretChatStateReady) GetType() string {
	return TypeSecretChatStateReady
}

// SecretChatStateType returns constant class type string of the class.
func (*SecretChatStateReady) SecretChatStateType() string {
	return TypeSecretChatStateReady
}

// SecretChatStateClosed the secret chat is closed
type SecretChatStateClosed struct {
	meta
}

// MarshalJSON returns SecretChatStateClosed object as the JSON encoding of SecretChatStateClosed.
func (entity *SecretChatStateClosed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SecretChatStateClosed

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SecretChatStateClosed) GetClass() string {
	return ClassSecretChatState
}

// GetType returns constant class type string of the class.
func (*SecretChatStateClosed) GetType() string {
	return TypeSecretChatStateClosed
}

// SecretChatStateType returns constant class type string of the class.
func (*SecretChatStateClosed) SecretChatStateType() string {
	return TypeSecretChatStateClosed
}

// SecretChat represents a secret chat
type SecretChat struct {
	meta
	// Secret chat identifier
	ID int32 `json:"id"`
	// Identifier of the chat partner
	UserID int32 `json:"user_id"`
	// State of the secret chat
	State SecretChatState `json:"state"`
	// True, if the chat was created by the current user; otherwise false
	IsOutbound bool `json:"is_outbound"`
	// Current message Time To Live setting (self-destruct timer) for the chat, in seconds
	TTL int32 `json:"ttl"`
	// Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 bytes, which must be used to make a 12x12 square image with a color depth of 4. The first 16 bytes should be used to make a central 8x8 square, while the remaining 20 bytes should be used to construct a 2-pixel-wide border around that square. Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers
	KeyHash []byte `json:"key_hash"`
	// Secret chat layer; determines features supported by the other client. Video notes are supported if the layer >= 66
	Layer int32 `json:"layer"`
}

// MarshalJSON returns SecretChat object as the JSON encoding of SecretChat.
func (entity *SecretChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SecretChat

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SecretChat) GetClass() string {
	return ClassSecretChat
}

// GetType returns constant class type string of the class.
func (*SecretChat) GetType() string {
	return TypeSecretChat
}

// UnmarshalJSON sets SecretChat object to a copy of JSON encoding of SecretChat.
func (entity *SecretChat) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID         int32           `json:"id"`
		UserID     int32           `json:"user_id"`
		State      json.RawMessage `json:"state"`
		IsOutbound bool            `json:"is_outbound"`
		TTL        int32           `json:"ttl"`
		KeyHash    []byte          `json:"key_hash"`
		Layer      int32           `json:"layer"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.UserID = tmp.UserID
	entity.IsOutbound = tmp.IsOutbound
	entity.TTL = tmp.TTL
	entity.KeyHash = tmp.KeyHash
	entity.Layer = tmp.Layer

	fieldState, _ := UnmarshalSecretChatState(tmp.State)
	entity.State = fieldState

	return nil
}

// MessageForwardedFromUser the message was originally written by a known user
type MessageForwardedFromUser struct {
	meta
	// Identifier of the user that originally sent this message
	SenderUserID int32 `json:"sender_user_id"`
	// Point in time (Unix timestamp) when the message was originally sent
	Date int32 `json:"date"`
	// For messages forwarded to the chat with the current user (saved messages), the identifier of the chat from which the message was forwarded; 0 if unknown
	ForwardedFromChatID int64 `json:"forwarded_from_chat_id"`
	// For messages forwarded to the chat with the current user (saved messages) the identifier of the original message from which the new message was forwarded; 0 if unknown
	ForwardedFromMessageID int64 `json:"forwarded_from_message_id"`
}

// MarshalJSON returns MessageForwardedFromUser object as the JSON encoding of MessageForwardedFromUser.
func (entity *MessageForwardedFromUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageForwardedFromUser

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageForwardedFromUser) GetClass() string {
	return ClassMessageForwardInfo
}

// GetType returns constant class type string of the class.
func (*MessageForwardedFromUser) GetType() string {
	return TypeMessageForwardedFromUser
}

// MessageForwardInfoType returns constant class type string of the class.
func (*MessageForwardedFromUser) MessageForwardInfoType() string {
	return TypeMessageForwardedFromUser
}

// MessageForwardedPost the message was originally a post in a channel
type MessageForwardedPost struct {
	meta
	// Identifier of the chat from which the message was forwarded
	ChatID int64 `json:"chat_id"`
	// Post author signature
	AuthorSignature string `json:"author_signature"`
	// Point in time (Unix timestamp) when the message was originally sent
	Date int32 `json:"date"`
	// Message identifier of the original message from which the new message was forwarded; 0 if unknown
	MessageID int64 `json:"message_id"`
	// For messages forwarded to the chat with the current user (saved messages), the identifier of the chat from which the message was forwarded; 0 if unknown
	ForwardedFromChatID int64 `json:"forwarded_from_chat_id"`
	// For messages forwarded to the chat with the current user (saved messages), the identifier of the original message from which the new message was forwarded; 0 if unknown
	ForwardedFromMessageID int64 `json:"forwarded_from_message_id"`
}

// MarshalJSON returns MessageForwardedPost object as the JSON encoding of MessageForwardedPost.
func (entity *MessageForwardedPost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageForwardedPost

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageForwardedPost) GetClass() string {
	return ClassMessageForwardInfo
}

// GetType returns constant class type string of the class.
func (*MessageForwardedPost) GetType() string {
	return TypeMessageForwardedPost
}

// MessageForwardInfoType returns constant class type string of the class.
func (*MessageForwardedPost) MessageForwardInfoType() string {
	return TypeMessageForwardedPost
}

// MessageSendingStatePending the message is being sent now, but has not yet been delivered to the server
type MessageSendingStatePending struct {
	meta
}

// MarshalJSON returns MessageSendingStatePending object as the JSON encoding of MessageSendingStatePending.
func (entity *MessageSendingStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageSendingStatePending

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageSendingStatePending) GetClass() string {
	return ClassMessageSendingState
}

// GetType returns constant class type string of the class.
func (*MessageSendingStatePending) GetType() string {
	return TypeMessageSendingStatePending
}

// MessageSendingStateType returns constant class type string of the class.
func (*MessageSendingStatePending) MessageSendingStateType() string {
	return TypeMessageSendingStatePending
}

// MessageSendingStateFailed the message failed to be sent
type MessageSendingStateFailed struct {
	meta
}

// MarshalJSON returns MessageSendingStateFailed object as the JSON encoding of MessageSendingStateFailed.
func (entity *MessageSendingStateFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageSendingStateFailed

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageSendingStateFailed) GetClass() string {
	return ClassMessageSendingState
}

// GetType returns constant class type string of the class.
func (*MessageSendingStateFailed) GetType() string {
	return TypeMessageSendingStateFailed
}

// MessageSendingStateType returns constant class type string of the class.
func (*MessageSendingStateFailed) MessageSendingStateType() string {
	return TypeMessageSendingStateFailed
}

// Message describes a message
type Message struct {
	meta
	// Message identifier, unique for the chat to which the message belongs
	ID int64 `json:"id"`
	// Identifier of the user who sent the message; 0 if unknown. It is unknown for channel posts
	SenderUserID int32 `json:"sender_user_id"`
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Information about the sending state of the message; may be null
	SendingState MessageSendingState `json:"sending_state"`
	// True, if the message is outgoing
	IsOutgoing bool `json:"is_outgoing"`
	// True, if the message can be edited
	CanBeEdited bool `json:"can_be_edited"`
	// True, if the message can be forwarded
	CanBeForwarded bool `json:"can_be_forwarded"`
	// True, if the message can be deleted only for the current user while other users will continue to see it
	CanBeDeletedOnlyForSelf bool `json:"can_be_deleted_only_for_self"`
	// True, if the message can be deleted for all users
	CanBeDeletedForAllUsers bool `json:"can_be_deleted_for_all_users"`
	// True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts
	IsChannelPost bool `json:"is_channel_post"`
	// True, if the message contains an unread mention for the current user
	ContainsUnreadMention bool `json:"contains_unread_mention"`
	// Point in time (Unix timestamp) when the message was sent
	Date int32 `json:"date"`
	// Point in time (Unix timestamp) when the message was last edited
	EditDate int32 `json:"edit_date"`
	// Information about the initial message sender; may be null
	ForwardInfo MessageForwardInfo `json:"forward_info"`
	// If non-zero, the identifier of the message this message is replying to; can be the identifier of a deleted message
	ReplyToMessageID int64 `json:"reply_to_message_id"`
	// For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none. TDLib will send updateDeleteMessages or updateMessageContent once the TTL expires
	TTL int32 `json:"ttl"`
	// Time left before the message expires, in seconds
	TTLExpiresIn float64 `json:"ttl_expires_in"`
	// If non-zero, the user identifier of the bot through which this message was sent
	ViaBotUserID int32 `json:"via_bot_user_id"`
	// For channel posts, optional author signature
	AuthorSignature string `json:"author_signature"`
	// Number of times this message was viewed
	Views int32 `json:"views"`
	// Unique identifier of an album this message belongs to. Only photos and videos can be grouped together in albums
	MediaAlbumID Int64JSON `json:"media_album_id"`
	// Content of the message
	Content MessageContent `json:"content"`
	// Reply markup for the message; may be null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

// MarshalJSON returns Message object as the JSON encoding of Message.
func (entity *Message) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Message

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Message) GetClass() string {
	return ClassMessage
}

// GetType returns constant class type string of the class.
func (*Message) GetType() string {
	return TypeMessage
}

// UnmarshalJSON sets Message object to a copy of JSON encoding of Message.
func (entity *Message) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                      int64           `json:"id"`
		SenderUserID            int32           `json:"sender_user_id"`
		ChatID                  int64           `json:"chat_id"`
		SendingState            json.RawMessage `json:"sending_state"`
		IsOutgoing              bool            `json:"is_outgoing"`
		CanBeEdited             bool            `json:"can_be_edited"`
		CanBeForwarded          bool            `json:"can_be_forwarded"`
		CanBeDeletedOnlyForSelf bool            `json:"can_be_deleted_only_for_self"`
		CanBeDeletedForAllUsers bool            `json:"can_be_deleted_for_all_users"`
		IsChannelPost           bool            `json:"is_channel_post"`
		ContainsUnreadMention   bool            `json:"contains_unread_mention"`
		Date                    int32           `json:"date"`
		EditDate                int32           `json:"edit_date"`
		ForwardInfo             json.RawMessage `json:"forward_info"`
		ReplyToMessageID        int64           `json:"reply_to_message_id"`
		TTL                     int32           `json:"ttl"`
		TTLExpiresIn            float64         `json:"ttl_expires_in"`
		ViaBotUserID            int32           `json:"via_bot_user_id"`
		AuthorSignature         string          `json:"author_signature"`
		Views                   int32           `json:"views"`
		MediaAlbumID            Int64JSON       `json:"media_album_id"`
		Content                 json.RawMessage `json:"content"`
		ReplyMarkup             json.RawMessage `json:"reply_markup"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.SenderUserID = tmp.SenderUserID
	entity.ChatID = tmp.ChatID
	entity.IsOutgoing = tmp.IsOutgoing
	entity.CanBeEdited = tmp.CanBeEdited
	entity.CanBeForwarded = tmp.CanBeForwarded
	entity.CanBeDeletedOnlyForSelf = tmp.CanBeDeletedOnlyForSelf
	entity.CanBeDeletedForAllUsers = tmp.CanBeDeletedForAllUsers
	entity.IsChannelPost = tmp.IsChannelPost
	entity.ContainsUnreadMention = tmp.ContainsUnreadMention
	entity.Date = tmp.Date
	entity.EditDate = tmp.EditDate
	entity.ReplyToMessageID = tmp.ReplyToMessageID
	entity.TTL = tmp.TTL
	entity.TTLExpiresIn = tmp.TTLExpiresIn
	entity.ViaBotUserID = tmp.ViaBotUserID
	entity.AuthorSignature = tmp.AuthorSignature
	entity.Views = tmp.Views
	entity.MediaAlbumID = tmp.MediaAlbumID

	fieldSendingState, _ := UnmarshalMessageSendingState(tmp.SendingState)
	entity.SendingState = fieldSendingState

	fieldForwardInfo, _ := UnmarshalMessageForwardInfo(tmp.ForwardInfo)
	entity.ForwardInfo = fieldForwardInfo

	fieldContent, _ := UnmarshalMessageContent(tmp.Content)
	entity.Content = fieldContent

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	return nil
}

// Messages contains a list of messages
type Messages struct {
	meta
	// Approximate total count of messages found
	TotalCount int32 `json:"total_count"`
	// List of messages; messages may be null
	Messages []*Message `json:"messages"`
}

// MarshalJSON returns Messages object as the JSON encoding of Messages.
func (entity *Messages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Messages

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Messages) GetClass() string {
	return ClassMessages
}

// GetType returns constant class type string of the class.
func (*Messages) GetType() string {
	return TypeMessages
}

// FoundMessages contains a list of messages found by a search
type FoundMessages struct {
	meta
	// List of messages
	Messages []*Message `json:"messages"`
	// Value to pass as from_search_id to get more results
	NextFromSearchID Int64JSON `json:"next_from_search_id"`
}

// MarshalJSON returns FoundMessages object as the JSON encoding of FoundMessages.
func (entity *FoundMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FoundMessages

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FoundMessages) GetClass() string {
	return ClassFoundMessages
}

// GetType returns constant class type string of the class.
func (*FoundMessages) GetType() string {
	return TypeFoundMessages
}

// NotificationSettingsScopePrivateChats notification settings applied to all private and secret chats when the corresponding chat setting has a default value
type NotificationSettingsScopePrivateChats struct {
	meta
}

// MarshalJSON returns NotificationSettingsScopePrivateChats object as the JSON encoding of NotificationSettingsScopePrivateChats.
func (entity *NotificationSettingsScopePrivateChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NotificationSettingsScopePrivateChats

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NotificationSettingsScopePrivateChats) GetClass() string {
	return ClassNotificationSettingsScope
}

// GetType returns constant class type string of the class.
func (*NotificationSettingsScopePrivateChats) GetType() string {
	return TypeNotificationSettingsScopePrivateChats
}

// NotificationSettingsScopeType returns constant class type string of the class.
func (*NotificationSettingsScopePrivateChats) NotificationSettingsScopeType() string {
	return TypeNotificationSettingsScopePrivateChats
}

// NotificationSettingsScopeGroupChats notification settings applied to all basic groups, supergroups and channels when the corresponding chat setting has a default value
type NotificationSettingsScopeGroupChats struct {
	meta
}

// MarshalJSON returns NotificationSettingsScopeGroupChats object as the JSON encoding of NotificationSettingsScopeGroupChats.
func (entity *NotificationSettingsScopeGroupChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NotificationSettingsScopeGroupChats

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NotificationSettingsScopeGroupChats) GetClass() string {
	return ClassNotificationSettingsScope
}

// GetType returns constant class type string of the class.
func (*NotificationSettingsScopeGroupChats) GetType() string {
	return TypeNotificationSettingsScopeGroupChats
}

// NotificationSettingsScopeType returns constant class type string of the class.
func (*NotificationSettingsScopeGroupChats) NotificationSettingsScopeType() string {
	return TypeNotificationSettingsScopeGroupChats
}

// ChatNotificationSettings contains information about notification settings for a chat
type ChatNotificationSettings struct {
	meta
	// If true, mute_for is ignored and the value for the relevant type of chat is used instead
	UseDefaultMuteFor bool `json:"use_default_mute_for"`
	// Time left before notifications will be unmuted, in seconds
	MuteFor int32 `json:"mute_for"`
	// If true, sound is ignored and the value for the relevant type of chat is used instead
	UseDefaultSound bool `json:"use_default_sound"`
	// The name of an audio file to be used for notification sounds; only applies to iOS applications
	Sound string `json:"sound"`
	// If true, show_preview is ignored and the value for the relevant type of chat is used instead
	UseDefaultShowPreview bool `json:"use_default_show_preview"`
	// True, if message content should be displayed in notifications
	ShowPreview bool `json:"show_preview"`
}

// MarshalJSON returns ChatNotificationSettings object as the JSON encoding of ChatNotificationSettings.
func (entity *ChatNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatNotificationSettings

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatNotificationSettings) GetClass() string {
	return ClassChatNotificationSettings
}

// GetType returns constant class type string of the class.
func (*ChatNotificationSettings) GetType() string {
	return TypeChatNotificationSettings
}

// ScopeNotificationSettings contains information about notification settings for several chats
type ScopeNotificationSettings struct {
	meta
	// Time left before notifications will be unmuted, in seconds
	MuteFor int32 `json:"mute_for"`
	// The name of an audio file to be used for notification sounds; only applies to iOS applications
	Sound string `json:"sound"`
	// True, if message content should be displayed in notifications
	ShowPreview bool `json:"show_preview"`
}

// MarshalJSON returns ScopeNotificationSettings object as the JSON encoding of ScopeNotificationSettings.
func (entity *ScopeNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ScopeNotificationSettings

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ScopeNotificationSettings) GetClass() string {
	return ClassScopeNotificationSettings
}

// GetType returns constant class type string of the class.
func (*ScopeNotificationSettings) GetType() string {
	return TypeScopeNotificationSettings
}

// DraftMessage contains information about a message draft
type DraftMessage struct {
	meta
	// Identifier of the message to reply to; 0 if none
	ReplyToMessageID int64 `json:"reply_to_message_id"`
	// Content of the message draft; this should always be of type inputMessageText
	InputMessageText InputMessageContent `json:"input_message_text"`
}

// MarshalJSON returns DraftMessage object as the JSON encoding of DraftMessage.
func (entity *DraftMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DraftMessage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DraftMessage) GetClass() string {
	return ClassDraftMessage
}

// GetType returns constant class type string of the class.
func (*DraftMessage) GetType() string {
	return TypeDraftMessage
}

// UnmarshalJSON sets DraftMessage object to a copy of JSON encoding of DraftMessage.
func (entity *DraftMessage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ReplyToMessageID int64           `json:"reply_to_message_id"`
		InputMessageText json.RawMessage `json:"input_message_text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ReplyToMessageID = tmp.ReplyToMessageID

	fieldInputMessageText, _ := UnmarshalInputMessageContent(tmp.InputMessageText)
	entity.InputMessageText = fieldInputMessageText

	return nil
}

// ChatTypePrivate an ordinary chat with a user
type ChatTypePrivate struct {
	meta
	// User identifier
	UserID int32 `json:"user_id"`
}

// MarshalJSON returns ChatTypePrivate object as the JSON encoding of ChatTypePrivate.
func (entity *ChatTypePrivate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatTypePrivate

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatTypePrivate) GetClass() string {
	return ClassChatType
}

// GetType returns constant class type string of the class.
func (*ChatTypePrivate) GetType() string {
	return TypeChatTypePrivate
}

// ChatTypeType returns constant class type string of the class.
func (*ChatTypePrivate) ChatTypeType() string {
	return TypeChatTypePrivate
}

// ChatTypeBasicGroup a basic group (i.e., a chat with 0-200 other users)
type ChatTypeBasicGroup struct {
	meta
	// Basic group identifier
	BasicGroupID int32 `json:"basic_group_id"`
}

// MarshalJSON returns ChatTypeBasicGroup object as the JSON encoding of ChatTypeBasicGroup.
func (entity *ChatTypeBasicGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatTypeBasicGroup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatTypeBasicGroup) GetClass() string {
	return ClassChatType
}

// GetType returns constant class type string of the class.
func (*ChatTypeBasicGroup) GetType() string {
	return TypeChatTypeBasicGroup
}

// ChatTypeType returns constant class type string of the class.
func (*ChatTypeBasicGroup) ChatTypeType() string {
	return TypeChatTypeBasicGroup
}

// ChatTypeSupergroup a supergroup (i.e. a chat with up to GetOption("supergroup_max_size") other users), or channel (with unlimited members)
type ChatTypeSupergroup struct {
	meta
	// Supergroup or channel identifier
	SupergroupID int32 `json:"supergroup_id"`
	// True, if the supergroup is a channel
	IsChannel bool `json:"is_channel"`
}

// MarshalJSON returns ChatTypeSupergroup object as the JSON encoding of ChatTypeSupergroup.
func (entity *ChatTypeSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatTypeSupergroup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatTypeSupergroup) GetClass() string {
	return ClassChatType
}

// GetType returns constant class type string of the class.
func (*ChatTypeSupergroup) GetType() string {
	return TypeChatTypeSupergroup
}

// ChatTypeType returns constant class type string of the class.
func (*ChatTypeSupergroup) ChatTypeType() string {
	return TypeChatTypeSupergroup
}

// ChatTypeSecret a secret chat with a user
type ChatTypeSecret struct {
	meta
	// Secret chat identifier
	SecretChatID int32 `json:"secret_chat_id"`
	// User identifier of the secret chat peer
	UserID int32 `json:"user_id"`
}

// MarshalJSON returns ChatTypeSecret object as the JSON encoding of ChatTypeSecret.
func (entity *ChatTypeSecret) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatTypeSecret

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatTypeSecret) GetClass() string {
	return ClassChatType
}

// GetType returns constant class type string of the class.
func (*ChatTypeSecret) GetType() string {
	return TypeChatTypeSecret
}

// ChatTypeType returns constant class type string of the class.
func (*ChatTypeSecret) ChatTypeType() string {
	return TypeChatTypeSecret
}

// Chat a chat. (Can be a private chat, basic group, supergroup, or secret chat)
type Chat struct {
	meta
	// Chat unique identifier
	ID int64 `json:"id"`
	// Type of the chat
	Type ChatType `json:"type"`
	// Chat title
	Title string `json:"title"`
	// Chat photo; may be null
	Photo *ChatPhoto `json:"photo"`
	// Last message in the chat; may be null
	LastMessage *Message `json:"last_message"`
	// Descending parameter by which chats are sorted in the main chat list. If the order number of two chats is the same, they must be sorted in descending order by ID. If 0, the position of the chat in the list is undetermined
	Order Int64JSON `json:"order"`
	// True, if the chat is pinned
	IsPinned bool `json:"is_pinned"`
	// True, if the chat is marked as unread
	IsMarkedAsUnread bool `json:"is_marked_as_unread"`
	// True, if the chat is sponsored by the user's MTProxy server
	IsSponsored bool `json:"is_sponsored"`
	// True, if the chat can be reported to Telegram moderators through reportChat
	CanBeReported bool `json:"can_be_reported"`
	// Default value of the disable_notification parameter, used when a message is sent to the chat
	DefaultDisableNotification bool `json:"default_disable_notification"`
	// Number of unread messages in the chat
	UnreadCount int32 `json:"unread_count"`
	// Identifier of the last read incoming message
	LastReadInboxMessageID int64 `json:"last_read_inbox_message_id"`
	// Identifier of the last read outgoing message
	LastReadOutboxMessageID int64 `json:"last_read_outbox_message_id"`
	// Number of unread messages with a mention/reply in the chat
	UnreadMentionCount int32 `json:"unread_mention_count"`
	// Notification settings for this chat
	NotificationSettings *ChatNotificationSettings `json:"notification_settings"`
	// Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat
	ReplyMarkupMessageID int64 `json:"reply_markup_message_id"`
	// A draft of a message in the chat; may be null
	DraftMessage *DraftMessage `json:"draft_message"`
	// Contains client-specific data associated with the chat. (For example, the chat position or local chat notification settings can be stored here.) Persistent if a message database is used
	ClientData string `json:"client_data"`
}

// MarshalJSON returns Chat object as the JSON encoding of Chat.
func (entity *Chat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Chat

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Chat) GetClass() string {
	return ClassChat
}

// GetType returns constant class type string of the class.
func (*Chat) GetType() string {
	return TypeChat
}

// UnmarshalJSON sets Chat object to a copy of JSON encoding of Chat.
func (entity *Chat) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                         int64                     `json:"id"`
		Type                       json.RawMessage           `json:"type"`
		Title                      string                    `json:"title"`
		Photo                      *ChatPhoto                `json:"photo"`
		LastMessage                *Message                  `json:"last_message"`
		Order                      Int64JSON                 `json:"order"`
		IsPinned                   bool                      `json:"is_pinned"`
		IsMarkedAsUnread           bool                      `json:"is_marked_as_unread"`
		IsSponsored                bool                      `json:"is_sponsored"`
		CanBeReported              bool                      `json:"can_be_reported"`
		DefaultDisableNotification bool                      `json:"default_disable_notification"`
		UnreadCount                int32                     `json:"unread_count"`
		LastReadInboxMessageID     int64                     `json:"last_read_inbox_message_id"`
		LastReadOutboxMessageID    int64                     `json:"last_read_outbox_message_id"`
		UnreadMentionCount         int32                     `json:"unread_mention_count"`
		NotificationSettings       *ChatNotificationSettings `json:"notification_settings"`
		ReplyMarkupMessageID       int64                     `json:"reply_markup_message_id"`
		DraftMessage               *DraftMessage             `json:"draft_message"`
		ClientData                 string                    `json:"client_data"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.Photo = tmp.Photo
	entity.LastMessage = tmp.LastMessage
	entity.Order = tmp.Order
	entity.IsPinned = tmp.IsPinned
	entity.IsMarkedAsUnread = tmp.IsMarkedAsUnread
	entity.IsSponsored = tmp.IsSponsored
	entity.CanBeReported = tmp.CanBeReported
	entity.DefaultDisableNotification = tmp.DefaultDisableNotification
	entity.UnreadCount = tmp.UnreadCount
	entity.LastReadInboxMessageID = tmp.LastReadInboxMessageID
	entity.LastReadOutboxMessageID = tmp.LastReadOutboxMessageID
	entity.UnreadMentionCount = tmp.UnreadMentionCount
	entity.NotificationSettings = tmp.NotificationSettings
	entity.ReplyMarkupMessageID = tmp.ReplyMarkupMessageID
	entity.DraftMessage = tmp.DraftMessage
	entity.ClientData = tmp.ClientData

	fieldType, _ := UnmarshalChatType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// Chats represents a list of chats
type Chats struct {
	meta
	// List of chat identifiers
	ChatIDs []int64 `json:"chat_ids"`
}

// MarshalJSON returns Chats object as the JSON encoding of Chats.
func (entity *Chats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Chats

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Chats) GetClass() string {
	return ClassChats
}

// GetType returns constant class type string of the class.
func (*Chats) GetType() string {
	return TypeChats
}

// ChatInviteLink contains a chat invite link
type ChatInviteLink struct {
	meta
	// Chat invite link
	InviteLink string `json:"invite_link"`
}

// MarshalJSON returns ChatInviteLink object as the JSON encoding of ChatInviteLink.
func (entity *ChatInviteLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatInviteLink

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatInviteLink) GetClass() string {
	return ClassChatInviteLink
}

// GetType returns constant class type string of the class.
func (*ChatInviteLink) GetType() string {
	return TypeChatInviteLink
}

// ChatInviteLinkInfo contains information about a chat invite link
type ChatInviteLinkInfo struct {
	meta
	// Chat identifier of the invite link; 0 if the user is not a member of this chat
	ChatID int64 `json:"chat_id"`
	// Contains information about the type of the chat
	Type ChatType `json:"type"`
	// Title of the chat
	Title string `json:"title"`
	// Chat photo; may be null
	Photo *ChatPhoto `json:"photo"`
	// Number of members
	MemberCount int32 `json:"member_count"`
	// User identifiers of some chat members that may be known to the current user
	MemberUserIDs []int32 `json:"member_user_ids"`
	// True, if the chat is a public supergroup or channel with a username
	IsPublic bool `json:"is_public"`
}

// MarshalJSON returns ChatInviteLinkInfo object as the JSON encoding of ChatInviteLinkInfo.
func (entity *ChatInviteLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatInviteLinkInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatInviteLinkInfo) GetClass() string {
	return ClassChatInviteLinkInfo
}

// GetType returns constant class type string of the class.
func (*ChatInviteLinkInfo) GetType() string {
	return TypeChatInviteLinkInfo
}

// UnmarshalJSON sets ChatInviteLinkInfo object to a copy of JSON encoding of ChatInviteLinkInfo.
func (entity *ChatInviteLinkInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatID        int64           `json:"chat_id"`
		Type          json.RawMessage `json:"type"`
		Title         string          `json:"title"`
		Photo         *ChatPhoto      `json:"photo"`
		MemberCount   int32           `json:"member_count"`
		MemberUserIDs []int32         `json:"member_user_ids"`
		IsPublic      bool            `json:"is_public"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ChatID = tmp.ChatID
	entity.Title = tmp.Title
	entity.Photo = tmp.Photo
	entity.MemberCount = tmp.MemberCount
	entity.MemberUserIDs = tmp.MemberUserIDs
	entity.IsPublic = tmp.IsPublic

	fieldType, _ := UnmarshalChatType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// KeyboardButtonTypeText a simple button, with text that should be sent when the button is pressed
type KeyboardButtonTypeText struct {
	meta
}

// MarshalJSON returns KeyboardButtonTypeText object as the JSON encoding of KeyboardButtonTypeText.
func (entity *KeyboardButtonTypeText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub KeyboardButtonTypeText

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*KeyboardButtonTypeText) GetClass() string {
	return ClassKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*KeyboardButtonTypeText) GetType() string {
	return TypeKeyboardButtonTypeText
}

// KeyboardButtonTypeType returns constant class type string of the class.
func (*KeyboardButtonTypeText) KeyboardButtonTypeType() string {
	return TypeKeyboardButtonTypeText
}

// KeyboardButtonTypeRequestPhoneNumber a button that sends the user's phone number when pressed; available only in private chats
type KeyboardButtonTypeRequestPhoneNumber struct {
	meta
}

// MarshalJSON returns KeyboardButtonTypeRequestPhoneNumber object as the JSON encoding of KeyboardButtonTypeRequestPhoneNumber.
func (entity *KeyboardButtonTypeRequestPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub KeyboardButtonTypeRequestPhoneNumber

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*KeyboardButtonTypeRequestPhoneNumber) GetClass() string {
	return ClassKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*KeyboardButtonTypeRequestPhoneNumber) GetType() string {
	return TypeKeyboardButtonTypeRequestPhoneNumber
}

// KeyboardButtonTypeType returns constant class type string of the class.
func (*KeyboardButtonTypeRequestPhoneNumber) KeyboardButtonTypeType() string {
	return TypeKeyboardButtonTypeRequestPhoneNumber
}

// KeyboardButtonTypeRequestLocation a button that sends the user's location when pressed; available only in private chats
type KeyboardButtonTypeRequestLocation struct {
	meta
}

// MarshalJSON returns KeyboardButtonTypeRequestLocation object as the JSON encoding of KeyboardButtonTypeRequestLocation.
func (entity *KeyboardButtonTypeRequestLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub KeyboardButtonTypeRequestLocation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*KeyboardButtonTypeRequestLocation) GetClass() string {
	return ClassKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*KeyboardButtonTypeRequestLocation) GetType() string {
	return TypeKeyboardButtonTypeRequestLocation
}

// KeyboardButtonTypeType returns constant class type string of the class.
func (*KeyboardButtonTypeRequestLocation) KeyboardButtonTypeType() string {
	return TypeKeyboardButtonTypeRequestLocation
}

// KeyboardButton represents a single button in a bot keyboard
type KeyboardButton struct {
	meta
	// Text of the button
	Text string `json:"text"`
	// Type of the button
	Type KeyboardButtonType `json:"type"`
}

// MarshalJSON returns KeyboardButton object as the JSON encoding of KeyboardButton.
func (entity *KeyboardButton) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub KeyboardButton

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*KeyboardButton) GetClass() string {
	return ClassKeyboardButton
}

// GetType returns constant class type string of the class.
func (*KeyboardButton) GetType() string {
	return TypeKeyboardButton
}

// UnmarshalJSON sets KeyboardButton object to a copy of JSON encoding of KeyboardButton.
func (entity *KeyboardButton) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text string          `json:"text"`
		Type json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Text = tmp.Text

	fieldType, _ := UnmarshalKeyboardButtonType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// InlineKeyboardButtonTypeURL a button that opens a specified URL
type InlineKeyboardButtonTypeURL struct {
	meta
	// HTTP or tg:// URL to open
	URL string `json:"url"`
}

// MarshalJSON returns InlineKeyboardButtonTypeURL object as the JSON encoding of InlineKeyboardButtonTypeURL.
func (entity *InlineKeyboardButtonTypeURL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineKeyboardButtonTypeURL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineKeyboardButtonTypeURL) GetClass() string {
	return ClassInlineKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeURL) GetType() string {
	return TypeInlineKeyboardButtonTypeURL
}

// InlineKeyboardButtonTypeType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeURL) InlineKeyboardButtonTypeType() string {
	return TypeInlineKeyboardButtonTypeURL
}

// InlineKeyboardButtonTypeCallback a button that sends a special callback query to a bot
type InlineKeyboardButtonTypeCallback struct {
	meta
	// Data to be sent to the bot via a callback query
	Data []byte `json:"data"`
}

// MarshalJSON returns InlineKeyboardButtonTypeCallback object as the JSON encoding of InlineKeyboardButtonTypeCallback.
func (entity *InlineKeyboardButtonTypeCallback) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineKeyboardButtonTypeCallback

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineKeyboardButtonTypeCallback) GetClass() string {
	return ClassInlineKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeCallback) GetType() string {
	return TypeInlineKeyboardButtonTypeCallback
}

// InlineKeyboardButtonTypeType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeCallback) InlineKeyboardButtonTypeType() string {
	return TypeInlineKeyboardButtonTypeCallback
}

// InlineKeyboardButtonTypeCallbackGame a button with a game that sends a special callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame
type InlineKeyboardButtonTypeCallbackGame struct {
	meta
}

// MarshalJSON returns InlineKeyboardButtonTypeCallbackGame object as the JSON encoding of InlineKeyboardButtonTypeCallbackGame.
func (entity *InlineKeyboardButtonTypeCallbackGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineKeyboardButtonTypeCallbackGame

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineKeyboardButtonTypeCallbackGame) GetClass() string {
	return ClassInlineKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeCallbackGame) GetType() string {
	return TypeInlineKeyboardButtonTypeCallbackGame
}

// InlineKeyboardButtonTypeType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeCallbackGame) InlineKeyboardButtonTypeType() string {
	return TypeInlineKeyboardButtonTypeCallbackGame
}

// InlineKeyboardButtonTypeSwitchInline a button that forces an inline query to the bot to be inserted in the input field
type InlineKeyboardButtonTypeSwitchInline struct {
	meta
	// Inline query to be sent to the bot
	Query string `json:"query"`
	// True, if the inline query should be sent from the current chat
	InCurrentChat bool `json:"in_current_chat"`
}

// MarshalJSON returns InlineKeyboardButtonTypeSwitchInline object as the JSON encoding of InlineKeyboardButtonTypeSwitchInline.
func (entity *InlineKeyboardButtonTypeSwitchInline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineKeyboardButtonTypeSwitchInline

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineKeyboardButtonTypeSwitchInline) GetClass() string {
	return ClassInlineKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeSwitchInline) GetType() string {
	return TypeInlineKeyboardButtonTypeSwitchInline
}

// InlineKeyboardButtonTypeType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeSwitchInline) InlineKeyboardButtonTypeType() string {
	return TypeInlineKeyboardButtonTypeSwitchInline
}

// InlineKeyboardButtonTypeBuy a button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice
type InlineKeyboardButtonTypeBuy struct {
	meta
}

// MarshalJSON returns InlineKeyboardButtonTypeBuy object as the JSON encoding of InlineKeyboardButtonTypeBuy.
func (entity *InlineKeyboardButtonTypeBuy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineKeyboardButtonTypeBuy

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineKeyboardButtonTypeBuy) GetClass() string {
	return ClassInlineKeyboardButtonType
}

// GetType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeBuy) GetType() string {
	return TypeInlineKeyboardButtonTypeBuy
}

// InlineKeyboardButtonTypeType returns constant class type string of the class.
func (*InlineKeyboardButtonTypeBuy) InlineKeyboardButtonTypeType() string {
	return TypeInlineKeyboardButtonTypeBuy
}

// InlineKeyboardButton represents a single button in an inline keyboard
type InlineKeyboardButton struct {
	meta
	// Text of the button
	Text string `json:"text"`
	// Type of the button
	Type InlineKeyboardButtonType `json:"type"`
}

// MarshalJSON returns InlineKeyboardButton object as the JSON encoding of InlineKeyboardButton.
func (entity *InlineKeyboardButton) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineKeyboardButton

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineKeyboardButton) GetClass() string {
	return ClassInlineKeyboardButton
}

// GetType returns constant class type string of the class.
func (*InlineKeyboardButton) GetType() string {
	return TypeInlineKeyboardButton
}

// UnmarshalJSON sets InlineKeyboardButton object to a copy of JSON encoding of InlineKeyboardButton.
func (entity *InlineKeyboardButton) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text string          `json:"text"`
		Type json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Text = tmp.Text

	fieldType, _ := UnmarshalInlineKeyboardButtonType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// ReplyMarkupRemoveKeyboard instructs clients to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, UpdateChatReplyMarkup with message_id == 0 will be sent
type ReplyMarkupRemoveKeyboard struct {
	meta
	// True, if the keyboard is removed only for the mentioned users or the target user of a reply
	IsPersonal bool `json:"is_personal"`
}

// MarshalJSON returns ReplyMarkupRemoveKeyboard object as the JSON encoding of ReplyMarkupRemoveKeyboard.
func (entity *ReplyMarkupRemoveKeyboard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ReplyMarkupRemoveKeyboard

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ReplyMarkupRemoveKeyboard) GetClass() string {
	return ClassReplyMarkup
}

// GetType returns constant class type string of the class.
func (*ReplyMarkupRemoveKeyboard) GetType() string {
	return TypeReplyMarkupRemoveKeyboard
}

// ReplyMarkupType returns constant class type string of the class.
func (*ReplyMarkupRemoveKeyboard) ReplyMarkupType() string {
	return TypeReplyMarkupRemoveKeyboard
}

// ReplyMarkupForceReply instructs clients to force a reply to this message
type ReplyMarkupForceReply struct {
	meta
	// True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply
	IsPersonal bool `json:"is_personal"`
}

// MarshalJSON returns ReplyMarkupForceReply object as the JSON encoding of ReplyMarkupForceReply.
func (entity *ReplyMarkupForceReply) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ReplyMarkupForceReply

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ReplyMarkupForceReply) GetClass() string {
	return ClassReplyMarkup
}

// GetType returns constant class type string of the class.
func (*ReplyMarkupForceReply) GetType() string {
	return TypeReplyMarkupForceReply
}

// ReplyMarkupType returns constant class type string of the class.
func (*ReplyMarkupForceReply) ReplyMarkupType() string {
	return TypeReplyMarkupForceReply
}

// ReplyMarkupShowKeyboard contains a custom keyboard layout to quickly reply to bots
type ReplyMarkupShowKeyboard struct {
	meta
	// A list of rows of bot keyboard buttons
	Rows [][]*KeyboardButton `json:"rows"`
	// True, if the client needs to resize the keyboard vertically
	ResizeKeyboard bool `json:"resize_keyboard"`
	// True, if the client needs to hide the keyboard after use
	OneTime bool `json:"one_time"`
	// True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply
	IsPersonal bool `json:"is_personal"`
}

// MarshalJSON returns ReplyMarkupShowKeyboard object as the JSON encoding of ReplyMarkupShowKeyboard.
func (entity *ReplyMarkupShowKeyboard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ReplyMarkupShowKeyboard

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ReplyMarkupShowKeyboard) GetClass() string {
	return ClassReplyMarkup
}

// GetType returns constant class type string of the class.
func (*ReplyMarkupShowKeyboard) GetType() string {
	return TypeReplyMarkupShowKeyboard
}

// ReplyMarkupType returns constant class type string of the class.
func (*ReplyMarkupShowKeyboard) ReplyMarkupType() string {
	return TypeReplyMarkupShowKeyboard
}

// ReplyMarkupInlineKeyboard contains an inline keyboard layout
type ReplyMarkupInlineKeyboard struct {
	meta
	// A list of rows of inline keyboard buttons
	Rows [][]*InlineKeyboardButton `json:"rows"`
}

// MarshalJSON returns ReplyMarkupInlineKeyboard object as the JSON encoding of ReplyMarkupInlineKeyboard.
func (entity *ReplyMarkupInlineKeyboard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ReplyMarkupInlineKeyboard

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ReplyMarkupInlineKeyboard) GetClass() string {
	return ClassReplyMarkup
}

// GetType returns constant class type string of the class.
func (*ReplyMarkupInlineKeyboard) GetType() string {
	return TypeReplyMarkupInlineKeyboard
}

// ReplyMarkupType returns constant class type string of the class.
func (*ReplyMarkupInlineKeyboard) ReplyMarkupType() string {
	return TypeReplyMarkupInlineKeyboard
}

// RichTextPlain a plain text
type RichTextPlain struct {
	meta
	// Text
	Text string `json:"text"`
}

// MarshalJSON returns RichTextPlain object as the JSON encoding of RichTextPlain.
func (entity *RichTextPlain) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextPlain

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextPlain) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextPlain) GetType() string {
	return TypeRichTextPlain
}

// RichTextType returns constant class type string of the class.
func (*RichTextPlain) RichTextType() string {
	return TypeRichTextPlain
}

// RichTextBold a bold rich text
type RichTextBold struct {
	meta
	// Text
	Text RichText `json:"text"`
}

// MarshalJSON returns RichTextBold object as the JSON encoding of RichTextBold.
func (entity *RichTextBold) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextBold

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextBold) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextBold) GetType() string {
	return TypeRichTextBold
}

// RichTextType returns constant class type string of the class.
func (*RichTextBold) RichTextType() string {
	return TypeRichTextBold
}

// UnmarshalJSON sets RichTextBold object to a copy of JSON encoding of RichTextBold.
func (entity *RichTextBold) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// RichTextItalic an italicized rich text
type RichTextItalic struct {
	meta
	// Text
	Text RichText `json:"text"`
}

// MarshalJSON returns RichTextItalic object as the JSON encoding of RichTextItalic.
func (entity *RichTextItalic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextItalic

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextItalic) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextItalic) GetType() string {
	return TypeRichTextItalic
}

// RichTextType returns constant class type string of the class.
func (*RichTextItalic) RichTextType() string {
	return TypeRichTextItalic
}

// UnmarshalJSON sets RichTextItalic object to a copy of JSON encoding of RichTextItalic.
func (entity *RichTextItalic) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// RichTextUnderline an underlined rich text
type RichTextUnderline struct {
	meta
	// Text
	Text RichText `json:"text"`
}

// MarshalJSON returns RichTextUnderline object as the JSON encoding of RichTextUnderline.
func (entity *RichTextUnderline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextUnderline

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextUnderline) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextUnderline) GetType() string {
	return TypeRichTextUnderline
}

// RichTextType returns constant class type string of the class.
func (*RichTextUnderline) RichTextType() string {
	return TypeRichTextUnderline
}

// UnmarshalJSON sets RichTextUnderline object to a copy of JSON encoding of RichTextUnderline.
func (entity *RichTextUnderline) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// RichTextStrikethrough a strike-through rich text
type RichTextStrikethrough struct {
	meta
	// Text
	Text RichText `json:"text"`
}

// MarshalJSON returns RichTextStrikethrough object as the JSON encoding of RichTextStrikethrough.
func (entity *RichTextStrikethrough) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextStrikethrough

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextStrikethrough) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextStrikethrough) GetType() string {
	return TypeRichTextStrikethrough
}

// RichTextType returns constant class type string of the class.
func (*RichTextStrikethrough) RichTextType() string {
	return TypeRichTextStrikethrough
}

// UnmarshalJSON sets RichTextStrikethrough object to a copy of JSON encoding of RichTextStrikethrough.
func (entity *RichTextStrikethrough) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// RichTextFixed a fixed-width rich text
type RichTextFixed struct {
	meta
	// Text
	Text RichText `json:"text"`
}

// MarshalJSON returns RichTextFixed object as the JSON encoding of RichTextFixed.
func (entity *RichTextFixed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextFixed

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextFixed) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextFixed) GetType() string {
	return TypeRichTextFixed
}

// RichTextType returns constant class type string of the class.
func (*RichTextFixed) RichTextType() string {
	return TypeRichTextFixed
}

// UnmarshalJSON sets RichTextFixed object to a copy of JSON encoding of RichTextFixed.
func (entity *RichTextFixed) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// RichTextURL a rich text URL link
type RichTextURL struct {
	meta
	// Text
	Text RichText `json:"text"`
	// URL
	URL string `json:"url"`
}

// MarshalJSON returns RichTextURL object as the JSON encoding of RichTextURL.
func (entity *RichTextURL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextURL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextURL) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextURL) GetType() string {
	return TypeRichTextURL
}

// RichTextType returns constant class type string of the class.
func (*RichTextURL) RichTextType() string {
	return TypeRichTextURL
}

// UnmarshalJSON sets RichTextURL object to a copy of JSON encoding of RichTextURL.
func (entity *RichTextURL) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
		URL  string          `json:"url"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.URL = tmp.URL

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// RichTextEmailAddress a rich text email link
type RichTextEmailAddress struct {
	meta
	// Text
	Text RichText `json:"text"`
	// Email address
	EmailAddress string `json:"email_address"`
}

// MarshalJSON returns RichTextEmailAddress object as the JSON encoding of RichTextEmailAddress.
func (entity *RichTextEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTextEmailAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTextEmailAddress) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTextEmailAddress) GetType() string {
	return TypeRichTextEmailAddress
}

// RichTextType returns constant class type string of the class.
func (*RichTextEmailAddress) RichTextType() string {
	return TypeRichTextEmailAddress
}

// UnmarshalJSON sets RichTextEmailAddress object to a copy of JSON encoding of RichTextEmailAddress.
func (entity *RichTextEmailAddress) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text         json.RawMessage `json:"text"`
		EmailAddress string          `json:"email_address"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.EmailAddress = tmp.EmailAddress

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// RichTexts a concatenation of rich texts
type RichTexts struct {
	meta
	// Texts
	Texts []RichText `json:"texts"`
}

// MarshalJSON returns RichTexts object as the JSON encoding of RichTexts.
func (entity *RichTexts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub RichTexts

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*RichTexts) GetClass() string {
	return ClassRichText
}

// GetType returns constant class type string of the class.
func (*RichTexts) GetType() string {
	return TypeRichTexts
}

// RichTextType returns constant class type string of the class.
func (*RichTexts) RichTextType() string {
	return TypeRichTexts
}

// PageBlockTitle the title of a page
type PageBlockTitle struct {
	meta
	// Title
	Title RichText `json:"title"`
}

// MarshalJSON returns PageBlockTitle object as the JSON encoding of PageBlockTitle.
func (entity *PageBlockTitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockTitle

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockTitle) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockTitle) GetType() string {
	return TypePageBlockTitle
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockTitle) PageBlockType() string {
	return TypePageBlockTitle
}

// UnmarshalJSON sets PageBlockTitle object to a copy of JSON encoding of PageBlockTitle.
func (entity *PageBlockTitle) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Title json.RawMessage `json:"title"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldTitle, _ := UnmarshalRichText(tmp.Title)
	entity.Title = fieldTitle

	return nil
}

// PageBlockSubtitle the subtitle of a page
type PageBlockSubtitle struct {
	meta
	// Subtitle
	Subtitle RichText `json:"subtitle"`
}

// MarshalJSON returns PageBlockSubtitle object as the JSON encoding of PageBlockSubtitle.
func (entity *PageBlockSubtitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockSubtitle

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockSubtitle) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockSubtitle) GetType() string {
	return TypePageBlockSubtitle
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockSubtitle) PageBlockType() string {
	return TypePageBlockSubtitle
}

// UnmarshalJSON sets PageBlockSubtitle object to a copy of JSON encoding of PageBlockSubtitle.
func (entity *PageBlockSubtitle) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Subtitle json.RawMessage `json:"subtitle"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldSubtitle, _ := UnmarshalRichText(tmp.Subtitle)
	entity.Subtitle = fieldSubtitle

	return nil
}

// PageBlockAuthorDate the author and publishing date of a page
type PageBlockAuthorDate struct {
	meta
	// Author
	Author RichText `json:"author"`
	// Point in time (Unix timestamp) when the article was published; 0 if unknown
	PublishDate int32 `json:"publish_date"`
}

// MarshalJSON returns PageBlockAuthorDate object as the JSON encoding of PageBlockAuthorDate.
func (entity *PageBlockAuthorDate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockAuthorDate

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockAuthorDate) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockAuthorDate) GetType() string {
	return TypePageBlockAuthorDate
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockAuthorDate) PageBlockType() string {
	return TypePageBlockAuthorDate
}

// UnmarshalJSON sets PageBlockAuthorDate object to a copy of JSON encoding of PageBlockAuthorDate.
func (entity *PageBlockAuthorDate) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Author      json.RawMessage `json:"author"`
		PublishDate int32           `json:"publish_date"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.PublishDate = tmp.PublishDate

	fieldAuthor, _ := UnmarshalRichText(tmp.Author)
	entity.Author = fieldAuthor

	return nil
}

// PageBlockHeader a header
type PageBlockHeader struct {
	meta
	// Header
	Header RichText `json:"header"`
}

// MarshalJSON returns PageBlockHeader object as the JSON encoding of PageBlockHeader.
func (entity *PageBlockHeader) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockHeader

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockHeader) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockHeader) GetType() string {
	return TypePageBlockHeader
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockHeader) PageBlockType() string {
	return TypePageBlockHeader
}

// UnmarshalJSON sets PageBlockHeader object to a copy of JSON encoding of PageBlockHeader.
func (entity *PageBlockHeader) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Header json.RawMessage `json:"header"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldHeader, _ := UnmarshalRichText(tmp.Header)
	entity.Header = fieldHeader

	return nil
}

// PageBlockSubheader a subheader
type PageBlockSubheader struct {
	meta
	// Subheader
	Subheader RichText `json:"subheader"`
}

// MarshalJSON returns PageBlockSubheader object as the JSON encoding of PageBlockSubheader.
func (entity *PageBlockSubheader) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockSubheader

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockSubheader) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockSubheader) GetType() string {
	return TypePageBlockSubheader
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockSubheader) PageBlockType() string {
	return TypePageBlockSubheader
}

// UnmarshalJSON sets PageBlockSubheader object to a copy of JSON encoding of PageBlockSubheader.
func (entity *PageBlockSubheader) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Subheader json.RawMessage `json:"subheader"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldSubheader, _ := UnmarshalRichText(tmp.Subheader)
	entity.Subheader = fieldSubheader

	return nil
}

// PageBlockParagraph a text paragraph
type PageBlockParagraph struct {
	meta
	// Paragraph text
	Text RichText `json:"text"`
}

// MarshalJSON returns PageBlockParagraph object as the JSON encoding of PageBlockParagraph.
func (entity *PageBlockParagraph) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockParagraph

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockParagraph) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockParagraph) GetType() string {
	return TypePageBlockParagraph
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockParagraph) PageBlockType() string {
	return TypePageBlockParagraph
}

// UnmarshalJSON sets PageBlockParagraph object to a copy of JSON encoding of PageBlockParagraph.
func (entity *PageBlockParagraph) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// PageBlockPreformatted a preformatted text paragraph
type PageBlockPreformatted struct {
	meta
	// Paragraph text
	Text RichText `json:"text"`
	// Programming language for which the text should be formatted
	Language string `json:"language"`
}

// MarshalJSON returns PageBlockPreformatted object as the JSON encoding of PageBlockPreformatted.
func (entity *PageBlockPreformatted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockPreformatted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockPreformatted) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockPreformatted) GetType() string {
	return TypePageBlockPreformatted
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockPreformatted) PageBlockType() string {
	return TypePageBlockPreformatted
}

// UnmarshalJSON sets PageBlockPreformatted object to a copy of JSON encoding of PageBlockPreformatted.
func (entity *PageBlockPreformatted) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text     json.RawMessage `json:"text"`
		Language string          `json:"language"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Language = tmp.Language

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	return nil
}

// PageBlockFooter the footer of a page
type PageBlockFooter struct {
	meta
	// Footer
	Footer RichText `json:"footer"`
}

// MarshalJSON returns PageBlockFooter object as the JSON encoding of PageBlockFooter.
func (entity *PageBlockFooter) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockFooter

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockFooter) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockFooter) GetType() string {
	return TypePageBlockFooter
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockFooter) PageBlockType() string {
	return TypePageBlockFooter
}

// UnmarshalJSON sets PageBlockFooter object to a copy of JSON encoding of PageBlockFooter.
func (entity *PageBlockFooter) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Footer json.RawMessage `json:"footer"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFooter, _ := UnmarshalRichText(tmp.Footer)
	entity.Footer = fieldFooter

	return nil
}

// PageBlockDivider an empty block separating a page
type PageBlockDivider struct {
	meta
}

// MarshalJSON returns PageBlockDivider object as the JSON encoding of PageBlockDivider.
func (entity *PageBlockDivider) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockDivider

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockDivider) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockDivider) GetType() string {
	return TypePageBlockDivider
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockDivider) PageBlockType() string {
	return TypePageBlockDivider
}

// PageBlockAnchor an invisible anchor on a page, which can be used in a URL to open the page from the specified anchor
type PageBlockAnchor struct {
	meta
	// Name of the anchor
	Name string `json:"name"`
}

// MarshalJSON returns PageBlockAnchor object as the JSON encoding of PageBlockAnchor.
func (entity *PageBlockAnchor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockAnchor

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockAnchor) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockAnchor) GetType() string {
	return TypePageBlockAnchor
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockAnchor) PageBlockType() string {
	return TypePageBlockAnchor
}

// PageBlockList a list of texts
type PageBlockList struct {
	meta
	// Texts
	Items []RichText `json:"items"`
	// True, if the items should be marked with numbers
	IsOrdered bool `json:"is_ordered"`
}

// MarshalJSON returns PageBlockList object as the JSON encoding of PageBlockList.
func (entity *PageBlockList) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockList

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockList) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockList) GetType() string {
	return TypePageBlockList
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockList) PageBlockType() string {
	return TypePageBlockList
}

// PageBlockBlockQuote a block quote
type PageBlockBlockQuote struct {
	meta
	// Quote text
	Text RichText `json:"text"`
	// Quote caption
	Caption RichText `json:"caption"`
}

// MarshalJSON returns PageBlockBlockQuote object as the JSON encoding of PageBlockBlockQuote.
func (entity *PageBlockBlockQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockBlockQuote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockBlockQuote) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockBlockQuote) GetType() string {
	return TypePageBlockBlockQuote
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockBlockQuote) PageBlockType() string {
	return TypePageBlockBlockQuote
}

// UnmarshalJSON sets PageBlockBlockQuote object to a copy of JSON encoding of PageBlockBlockQuote.
func (entity *PageBlockBlockQuote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text    json.RawMessage `json:"text"`
		Caption json.RawMessage `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockPullQuote a pull quote
type PageBlockPullQuote struct {
	meta
	// Quote text
	Text RichText `json:"text"`
	// Quote caption
	Caption RichText `json:"caption"`
}

// MarshalJSON returns PageBlockPullQuote object as the JSON encoding of PageBlockPullQuote.
func (entity *PageBlockPullQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockPullQuote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockPullQuote) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockPullQuote) GetType() string {
	return TypePageBlockPullQuote
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockPullQuote) PageBlockType() string {
	return TypePageBlockPullQuote
}

// UnmarshalJSON sets PageBlockPullQuote object to a copy of JSON encoding of PageBlockPullQuote.
func (entity *PageBlockPullQuote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text    json.RawMessage `json:"text"`
		Caption json.RawMessage `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	entity.Text = fieldText

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockAnimation an animation
type PageBlockAnimation struct {
	meta
	// Animation file; may be null
	Animation *Animation `json:"animation"`
	// Animation caption
	Caption RichText `json:"caption"`
	// True, if the animation should be played automatically
	NeedAutoplay bool `json:"need_autoplay"`
}

// MarshalJSON returns PageBlockAnimation object as the JSON encoding of PageBlockAnimation.
func (entity *PageBlockAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockAnimation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockAnimation) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockAnimation) GetType() string {
	return TypePageBlockAnimation
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockAnimation) PageBlockType() string {
	return TypePageBlockAnimation
}

// UnmarshalJSON sets PageBlockAnimation object to a copy of JSON encoding of PageBlockAnimation.
func (entity *PageBlockAnimation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Animation    *Animation      `json:"animation"`
		Caption      json.RawMessage `json:"caption"`
		NeedAutoplay bool            `json:"need_autoplay"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Animation = tmp.Animation
	entity.NeedAutoplay = tmp.NeedAutoplay

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockAudio an audio file
type PageBlockAudio struct {
	meta
	// Audio file; may be null
	Audio *Audio `json:"audio"`
	// Audio file caption
	Caption RichText `json:"caption"`
}

// MarshalJSON returns PageBlockAudio object as the JSON encoding of PageBlockAudio.
func (entity *PageBlockAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockAudio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockAudio) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockAudio) GetType() string {
	return TypePageBlockAudio
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockAudio) PageBlockType() string {
	return TypePageBlockAudio
}

// UnmarshalJSON sets PageBlockAudio object to a copy of JSON encoding of PageBlockAudio.
func (entity *PageBlockAudio) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Audio   *Audio          `json:"audio"`
		Caption json.RawMessage `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Audio = tmp.Audio

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockPhoto a photo
type PageBlockPhoto struct {
	meta
	// Photo file; may be null
	Photo *Photo `json:"photo"`
	// Photo caption
	Caption RichText `json:"caption"`
}

// MarshalJSON returns PageBlockPhoto object as the JSON encoding of PageBlockPhoto.
func (entity *PageBlockPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockPhoto) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockPhoto) GetType() string {
	return TypePageBlockPhoto
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockPhoto) PageBlockType() string {
	return TypePageBlockPhoto
}

// UnmarshalJSON sets PageBlockPhoto object to a copy of JSON encoding of PageBlockPhoto.
func (entity *PageBlockPhoto) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Photo   *Photo          `json:"photo"`
		Caption json.RawMessage `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Photo = tmp.Photo

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockVideo a video
type PageBlockVideo struct {
	meta
	// Video file; may be null
	Video *Video `json:"video"`
	// Video caption
	Caption RichText `json:"caption"`
	// True, if the video should be played automatically
	NeedAutoplay bool `json:"need_autoplay"`
	// True, if the video should be looped
	IsLooped bool `json:"is_looped"`
}

// MarshalJSON returns PageBlockVideo object as the JSON encoding of PageBlockVideo.
func (entity *PageBlockVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockVideo) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockVideo) GetType() string {
	return TypePageBlockVideo
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockVideo) PageBlockType() string {
	return TypePageBlockVideo
}

// UnmarshalJSON sets PageBlockVideo object to a copy of JSON encoding of PageBlockVideo.
func (entity *PageBlockVideo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Video        *Video          `json:"video"`
		Caption      json.RawMessage `json:"caption"`
		NeedAutoplay bool            `json:"need_autoplay"`
		IsLooped     bool            `json:"is_looped"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Video = tmp.Video
	entity.NeedAutoplay = tmp.NeedAutoplay
	entity.IsLooped = tmp.IsLooped

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockCover a page cover
type PageBlockCover struct {
	meta
	// Cover
	Cover PageBlock `json:"cover"`
}

// MarshalJSON returns PageBlockCover object as the JSON encoding of PageBlockCover.
func (entity *PageBlockCover) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockCover

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockCover) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockCover) GetType() string {
	return TypePageBlockCover
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockCover) PageBlockType() string {
	return TypePageBlockCover
}

// UnmarshalJSON sets PageBlockCover object to a copy of JSON encoding of PageBlockCover.
func (entity *PageBlockCover) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Cover json.RawMessage `json:"cover"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldCover, _ := UnmarshalPageBlock(tmp.Cover)
	entity.Cover = fieldCover

	return nil
}

// PageBlockEmbedded an embedded web page
type PageBlockEmbedded struct {
	meta
	// Web page URL, if available
	URL string `json:"url"`
	// HTML-markup of the embedded page
	HTML string `json:"html"`
	// Poster photo, if available; may be null
	PosterPhoto *Photo `json:"poster_photo"`
	// Block width
	Width int32 `json:"width"`
	// Block height
	Height int32 `json:"height"`
	// Block caption
	Caption RichText `json:"caption"`
	// True, if the block should be full width
	IsFullWidth bool `json:"is_full_width"`
	// True, if scrolling should be allowed
	AllowScrolling bool `json:"allow_scrolling"`
}

// MarshalJSON returns PageBlockEmbedded object as the JSON encoding of PageBlockEmbedded.
func (entity *PageBlockEmbedded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockEmbedded

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockEmbedded) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockEmbedded) GetType() string {
	return TypePageBlockEmbedded
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockEmbedded) PageBlockType() string {
	return TypePageBlockEmbedded
}

// UnmarshalJSON sets PageBlockEmbedded object to a copy of JSON encoding of PageBlockEmbedded.
func (entity *PageBlockEmbedded) UnmarshalJSON(data []byte) error {
	var tmp struct {
		URL            string          `json:"url"`
		HTML           string          `json:"html"`
		PosterPhoto    *Photo          `json:"poster_photo"`
		Width          int32           `json:"width"`
		Height         int32           `json:"height"`
		Caption        json.RawMessage `json:"caption"`
		IsFullWidth    bool            `json:"is_full_width"`
		AllowScrolling bool            `json:"allow_scrolling"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.URL = tmp.URL
	entity.HTML = tmp.HTML
	entity.PosterPhoto = tmp.PosterPhoto
	entity.Width = tmp.Width
	entity.Height = tmp.Height
	entity.IsFullWidth = tmp.IsFullWidth
	entity.AllowScrolling = tmp.AllowScrolling

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockEmbeddedPost an embedded post
type PageBlockEmbeddedPost struct {
	meta
	// Web page URL
	URL string `json:"url"`
	// Post author
	Author string `json:"author"`
	// Post author photo
	AuthorPhoto *Photo `json:"author_photo"`
	// Point in time (Unix timestamp) when the post was created; 0 if unknown
	Date int32 `json:"date"`
	// Post content
	PageBlocks []PageBlock `json:"page_blocks"`
	// Post caption
	Caption RichText `json:"caption"`
}

// MarshalJSON returns PageBlockEmbeddedPost object as the JSON encoding of PageBlockEmbeddedPost.
func (entity *PageBlockEmbeddedPost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockEmbeddedPost

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockEmbeddedPost) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockEmbeddedPost) GetType() string {
	return TypePageBlockEmbeddedPost
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockEmbeddedPost) PageBlockType() string {
	return TypePageBlockEmbeddedPost
}

// UnmarshalJSON sets PageBlockEmbeddedPost object to a copy of JSON encoding of PageBlockEmbeddedPost.
func (entity *PageBlockEmbeddedPost) UnmarshalJSON(data []byte) error {
	var tmp struct {
		URL         string          `json:"url"`
		Author      string          `json:"author"`
		AuthorPhoto *Photo          `json:"author_photo"`
		Date        int32           `json:"date"`
		PageBlocks  []PageBlock     `json:"page_blocks"`
		Caption     json.RawMessage `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.URL = tmp.URL
	entity.Author = tmp.Author
	entity.AuthorPhoto = tmp.AuthorPhoto
	entity.Date = tmp.Date
	entity.PageBlocks = tmp.PageBlocks

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockCollage a collage
type PageBlockCollage struct {
	meta
	// Collage item contents
	PageBlocks []PageBlock `json:"page_blocks"`
	// Block caption
	Caption RichText `json:"caption"`
}

// MarshalJSON returns PageBlockCollage object as the JSON encoding of PageBlockCollage.
func (entity *PageBlockCollage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockCollage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockCollage) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockCollage) GetType() string {
	return TypePageBlockCollage
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockCollage) PageBlockType() string {
	return TypePageBlockCollage
}

// UnmarshalJSON sets PageBlockCollage object to a copy of JSON encoding of PageBlockCollage.
func (entity *PageBlockCollage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PageBlocks []PageBlock     `json:"page_blocks"`
		Caption    json.RawMessage `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.PageBlocks = tmp.PageBlocks

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockSlideshow a slideshow
type PageBlockSlideshow struct {
	meta
	// Slideshow item contents
	PageBlocks []PageBlock `json:"page_blocks"`
	// Block caption
	Caption RichText `json:"caption"`
}

// MarshalJSON returns PageBlockSlideshow object as the JSON encoding of PageBlockSlideshow.
func (entity *PageBlockSlideshow) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockSlideshow

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockSlideshow) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockSlideshow) GetType() string {
	return TypePageBlockSlideshow
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockSlideshow) PageBlockType() string {
	return TypePageBlockSlideshow
}

// UnmarshalJSON sets PageBlockSlideshow object to a copy of JSON encoding of PageBlockSlideshow.
func (entity *PageBlockSlideshow) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PageBlocks []PageBlock     `json:"page_blocks"`
		Caption    json.RawMessage `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.PageBlocks = tmp.PageBlocks

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	entity.Caption = fieldCaption

	return nil
}

// PageBlockChatLink a link to a chat
type PageBlockChatLink struct {
	meta
	// Chat title
	Title string `json:"title"`
	// Chat photo; may be null
	Photo *ChatPhoto `json:"photo"`
	// Chat username, by which all other information about the chat should be resolved
	Username string `json:"username"`
}

// MarshalJSON returns PageBlockChatLink object as the JSON encoding of PageBlockChatLink.
func (entity *PageBlockChatLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PageBlockChatLink

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PageBlockChatLink) GetClass() string {
	return ClassPageBlock
}

// GetType returns constant class type string of the class.
func (*PageBlockChatLink) GetType() string {
	return TypePageBlockChatLink
}

// PageBlockType returns constant class type string of the class.
func (*PageBlockChatLink) PageBlockType() string {
	return TypePageBlockChatLink
}

// WebPageInstantView describes an instant view page for a web page
type WebPageInstantView struct {
	meta
	// Content of the web page
	PageBlocks []PageBlock `json:"page_blocks"`
	// True, if the instant view contains the full page. A network request might be needed to get the full web page instant view
	IsFull bool `json:"is_full"`
}

// MarshalJSON returns WebPageInstantView object as the JSON encoding of WebPageInstantView.
func (entity *WebPageInstantView) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub WebPageInstantView

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*WebPageInstantView) GetClass() string {
	return ClassWebPageInstantView
}

// GetType returns constant class type string of the class.
func (*WebPageInstantView) GetType() string {
	return TypeWebPageInstantView
}

// WebPage describes a web page preview
type WebPage struct {
	meta
	// Original URL of the link
	URL string `json:"url"`
	// URL to display
	DisplayURL string `json:"display_url"`
	// Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else
	Type string `json:"type"`
	// Short name of the site (e.g., Google Docs, App Store)
	SiteName string `json:"site_name"`
	// Title of the content
	Title string `json:"title"`
	// Description of the content
	Description string `json:"description"`
	// Image representing the content; may be null
	Photo *Photo `json:"photo"`
	// URL to show in the embedded preview
	EmbedURL string `json:"embed_url"`
	// MIME type of the embedded preview, (e.g., text/html or video/mp4)
	EmbedType string `json:"embed_type"`
	// Width of the embedded preview
	EmbedWidth int32 `json:"embed_width"`
	// Height of the embedded preview
	EmbedHeight int32 `json:"embed_height"`
	// Duration of the content, in seconds
	Duration int32 `json:"duration"`
	// Author of the content
	Author string `json:"author"`
	// Preview of the content as an animation, if available; may be null
	Animation *Animation `json:"animation"`
	// Preview of the content as an audio file, if available; may be null
	Audio *Audio `json:"audio"`
	// Preview of the content as a document, if available (currently only available for small PDF files and ZIP archives); may be null
	Document *Document `json:"document"`
	// Preview of the content as a sticker for small WEBP files, if available; may be null
	Sticker *Sticker `json:"sticker"`
	// Preview of the content as a video, if available; may be null
	Video *Video `json:"video"`
	// Preview of the content as a video note, if available; may be null
	VideoNote *VideoNote `json:"video_note"`
	// Preview of the content as a voice note, if available; may be null
	VoiceNote *VoiceNote `json:"voice_note"`
	// True, if the web page has an instant view
	HasInstantView bool `json:"has_instant_view"`
}

// MarshalJSON returns WebPage object as the JSON encoding of WebPage.
func (entity *WebPage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub WebPage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*WebPage) GetClass() string {
	return ClassWebPage
}

// GetType returns constant class type string of the class.
func (*WebPage) GetType() string {
	return TypeWebPage
}

// Address describes an address
type Address struct {
	meta
	// A two-letter ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code"`
	// State, if applicable
	State string `json:"state"`
	// City
	City string `json:"city"`
	// First line of the address
	StreetLine1 string `json:"street_line1"`
	// Second line of the address
	StreetLine2 string `json:"street_line2"`
	// Address postal code
	PostalCode string `json:"postal_code"`
}

// MarshalJSON returns Address object as the JSON encoding of Address.
func (entity *Address) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Address

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Address) GetClass() string {
	return ClassAddress
}

// GetType returns constant class type string of the class.
func (*Address) GetType() string {
	return TypeAddress
}

// LabeledPricePart portion of the price of a product (e.g., "delivery cost", "tax amount")
type LabeledPricePart struct {
	meta
	// Label for this portion of the product price
	Label string `json:"label"`
	// Currency amount in minimal quantity of the currency
	Amount int64 `json:"amount"`
}

// MarshalJSON returns LabeledPricePart object as the JSON encoding of LabeledPricePart.
func (entity *LabeledPricePart) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LabeledPricePart

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LabeledPricePart) GetClass() string {
	return ClassLabeledPricePart
}

// GetType returns constant class type string of the class.
func (*LabeledPricePart) GetType() string {
	return TypeLabeledPricePart
}

// Invoice product invoice
type Invoice struct {
	meta
	// ISO 4217 currency code
	Currency string `json:"currency"`
	// A list of objects used to calculate the total price of the product
	PriceParts []*LabeledPricePart `json:"price_parts"`
	// True, if the payment is a test payment
	IsTest bool `json:"is_test"`
	// True, if the user's name is needed for payment
	NeedName bool `json:"need_name"`
	// True, if the user's phone number is needed for payment
	NeedPhoneNumber bool `json:"need_phone_number"`
	// True, if the user's email address is needed for payment
	NeedEmailAddress bool `json:"need_email_address"`
	// True, if the user's shipping address is needed for payment
	NeedShippingAddress bool `json:"need_shipping_address"`
	// True, if the user's phone number will be sent to the provider
	SendPhoneNumberToProvider bool `json:"send_phone_number_to_provider"`
	// True, if the user's email address will be sent to the provider
	SendEmailAddressToProvider bool `json:"send_email_address_to_provider"`
	// True, if the total price depends on the shipping method
	IsFlexible bool `json:"is_flexible"`
}

// MarshalJSON returns Invoice object as the JSON encoding of Invoice.
func (entity *Invoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Invoice

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Invoice) GetClass() string {
	return ClassInvoice
}

// GetType returns constant class type string of the class.
func (*Invoice) GetType() string {
	return TypeInvoice
}

// OrderInfo order information
type OrderInfo struct {
	meta
	// Name of the user
	Name string `json:"name"`
	// Phone number of the user
	PhoneNumber string `json:"phone_number"`
	// Email address of the user
	EmailAddress string `json:"email_address"`
	// Shipping address for this order; may be null
	ShippingAddress *Address `json:"shipping_address"`
}

// MarshalJSON returns OrderInfo object as the JSON encoding of OrderInfo.
func (entity *OrderInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub OrderInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*OrderInfo) GetClass() string {
	return ClassOrderInfo
}

// GetType returns constant class type string of the class.
func (*OrderInfo) GetType() string {
	return TypeOrderInfo
}

// ShippingOption one shipping option
type ShippingOption struct {
	meta
	// Shipping option identifier
	ID string `json:"id"`
	// Option title
	Title string `json:"title"`
	// A list of objects used to calculate the total shipping costs
	PriceParts []*LabeledPricePart `json:"price_parts"`
}

// MarshalJSON returns ShippingOption object as the JSON encoding of ShippingOption.
func (entity *ShippingOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ShippingOption

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ShippingOption) GetClass() string {
	return ClassShippingOption
}

// GetType returns constant class type string of the class.
func (*ShippingOption) GetType() string {
	return TypeShippingOption
}

// SavedCredentials contains information about saved card credentials
type SavedCredentials struct {
	meta
	// Unique identifier of the saved credentials
	ID string `json:"id"`
	// Title of the saved credentials
	Title string `json:"title"`
}

// MarshalJSON returns SavedCredentials object as the JSON encoding of SavedCredentials.
func (entity *SavedCredentials) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SavedCredentials

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SavedCredentials) GetClass() string {
	return ClassSavedCredentials
}

// GetType returns constant class type string of the class.
func (*SavedCredentials) GetType() string {
	return TypeSavedCredentials
}

// InputCredentialsSaved applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password
type InputCredentialsSaved struct {
	meta
	// Identifier of the saved credentials
	SavedCredentialsID string `json:"saved_credentials_id"`
}

// MarshalJSON returns InputCredentialsSaved object as the JSON encoding of InputCredentialsSaved.
func (entity *InputCredentialsSaved) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputCredentialsSaved

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputCredentialsSaved) GetClass() string {
	return ClassInputCredentials
}

// GetType returns constant class type string of the class.
func (*InputCredentialsSaved) GetType() string {
	return TypeInputCredentialsSaved
}

// InputCredentialsType returns constant class type string of the class.
func (*InputCredentialsSaved) InputCredentialsType() string {
	return TypeInputCredentialsSaved
}

// InputCredentialsNew applies if a user enters new credentials on a payment provider website
type InputCredentialsNew struct {
	meta
	// Contains JSON-encoded data with a credential identifier from the payment provider
	Data string `json:"data"`
	// True, if the credential identifier can be saved on the server side
	AllowSave bool `json:"allow_save"`
}

// MarshalJSON returns InputCredentialsNew object as the JSON encoding of InputCredentialsNew.
func (entity *InputCredentialsNew) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputCredentialsNew

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputCredentialsNew) GetClass() string {
	return ClassInputCredentials
}

// GetType returns constant class type string of the class.
func (*InputCredentialsNew) GetType() string {
	return TypeInputCredentialsNew
}

// InputCredentialsType returns constant class type string of the class.
func (*InputCredentialsNew) InputCredentialsType() string {
	return TypeInputCredentialsNew
}

// InputCredentialsAndroidPay applies if a user enters new credentials using Android Pay
type InputCredentialsAndroidPay struct {
	meta
	// JSON-encoded data with the credential identifier
	Data string `json:"data"`
}

// MarshalJSON returns InputCredentialsAndroidPay object as the JSON encoding of InputCredentialsAndroidPay.
func (entity *InputCredentialsAndroidPay) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputCredentialsAndroidPay

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputCredentialsAndroidPay) GetClass() string {
	return ClassInputCredentials
}

// GetType returns constant class type string of the class.
func (*InputCredentialsAndroidPay) GetType() string {
	return TypeInputCredentialsAndroidPay
}

// InputCredentialsType returns constant class type string of the class.
func (*InputCredentialsAndroidPay) InputCredentialsType() string {
	return TypeInputCredentialsAndroidPay
}

// InputCredentialsApplePay applies if a user enters new credentials using Apple Pay
type InputCredentialsApplePay struct {
	meta
	// JSON-encoded data with the credential identifier
	Data string `json:"data"`
}

// MarshalJSON returns InputCredentialsApplePay object as the JSON encoding of InputCredentialsApplePay.
func (entity *InputCredentialsApplePay) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputCredentialsApplePay

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputCredentialsApplePay) GetClass() string {
	return ClassInputCredentials
}

// GetType returns constant class type string of the class.
func (*InputCredentialsApplePay) GetType() string {
	return TypeInputCredentialsApplePay
}

// InputCredentialsType returns constant class type string of the class.
func (*InputCredentialsApplePay) InputCredentialsType() string {
	return TypeInputCredentialsApplePay
}

// PaymentsProviderStripe stripe payment provider
type PaymentsProviderStripe struct {
	meta
	// Stripe API publishable key
	PublishableKey string `json:"publishable_key"`
	// True, if the user country must be provided
	NeedCountry bool `json:"need_country"`
	// True, if the user ZIP/postal code must be provided
	NeedPostalCode bool `json:"need_postal_code"`
	// True, if the cardholder name must be provided
	NeedCardholderName bool `json:"need_cardholder_name"`
}

// MarshalJSON returns PaymentsProviderStripe object as the JSON encoding of PaymentsProviderStripe.
func (entity *PaymentsProviderStripe) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PaymentsProviderStripe

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PaymentsProviderStripe) GetClass() string {
	return ClassPaymentsProviderStripe
}

// GetType returns constant class type string of the class.
func (*PaymentsProviderStripe) GetType() string {
	return TypePaymentsProviderStripe
}

// PaymentForm contains information about an invoice payment form
type PaymentForm struct {
	meta
	// Full information of the invoice
	Invoice *Invoice `json:"invoice"`
	// Payment form URL
	URL string `json:"url"`
	// Contains information about the payment provider, if available, to support it natively without the need for opening the URL; may be null
	PaymentsProvider *PaymentsProviderStripe `json:"payments_provider"`
	// Saved server-side order information; may be null
	SavedOrderInfo *OrderInfo `json:"saved_order_info"`
	// Contains information about saved card credentials; may be null
	SavedCredentials *SavedCredentials `json:"saved_credentials"`
	// True, if the user can choose to save credentials
	CanSaveCredentials bool `json:"can_save_credentials"`
	// True, if the user will be able to save credentials protected by a password they set up
	NeedPassword bool `json:"need_password"`
}

// MarshalJSON returns PaymentForm object as the JSON encoding of PaymentForm.
func (entity *PaymentForm) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PaymentForm

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PaymentForm) GetClass() string {
	return ClassPaymentForm
}

// GetType returns constant class type string of the class.
func (*PaymentForm) GetType() string {
	return TypePaymentForm
}

// ValidatedOrderInfo contains a temporary identifier of validated order information, which is stored for one hour. Also contains the available shipping options
type ValidatedOrderInfo struct {
	meta
	// Temporary identifier of the order information
	OrderInfoID string `json:"order_info_id"`
	// Available shipping options
	ShippingOptions []*ShippingOption `json:"shipping_options"`
}

// MarshalJSON returns ValidatedOrderInfo object as the JSON encoding of ValidatedOrderInfo.
func (entity *ValidatedOrderInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ValidatedOrderInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ValidatedOrderInfo) GetClass() string {
	return ClassValidatedOrderInfo
}

// GetType returns constant class type string of the class.
func (*ValidatedOrderInfo) GetType() string {
	return TypeValidatedOrderInfo
}

// PaymentResult contains the result of a payment request
type PaymentResult struct {
	meta
	// True, if the payment request was successful; otherwise the verification_url will be not empty
	Success bool `json:"success"`
	// URL for additional payment credentials verification
	VerificationURL string `json:"verification_url"`
}

// MarshalJSON returns PaymentResult object as the JSON encoding of PaymentResult.
func (entity *PaymentResult) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PaymentResult

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PaymentResult) GetClass() string {
	return ClassPaymentResult
}

// GetType returns constant class type string of the class.
func (*PaymentResult) GetType() string {
	return TypePaymentResult
}

// PaymentReceipt contains information about a successful payment
type PaymentReceipt struct {
	meta
	// Point in time (Unix timestamp) when the payment was made
	Date int32 `json:"date"`
	// User identifier of the payment provider bot
	PaymentsProviderUserID int32 `json:"payments_provider_user_id"`
	// Contains information about the invoice
	Invoice *Invoice `json:"invoice"`
	// Contains order information; may be null
	OrderInfo *OrderInfo `json:"order_info"`
	// Chosen shipping option; may be null
	ShippingOption *ShippingOption `json:"shipping_option"`
	// Title of the saved credentials
	CredentialsTitle string `json:"credentials_title"`
}

// MarshalJSON returns PaymentReceipt object as the JSON encoding of PaymentReceipt.
func (entity *PaymentReceipt) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PaymentReceipt

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PaymentReceipt) GetClass() string {
	return ClassPaymentReceipt
}

// GetType returns constant class type string of the class.
func (*PaymentReceipt) GetType() string {
	return TypePaymentReceipt
}

// DatedFile file with the date it was uploaded
type DatedFile struct {
	meta
	// The file
	File *File `json:"file"`
	// Point in time (Unix timestamp) when the file was uploaded
	Date int32 `json:"date"`
}

// MarshalJSON returns DatedFile object as the JSON encoding of DatedFile.
func (entity *DatedFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DatedFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DatedFile) GetClass() string {
	return ClassDatedFile
}

// GetType returns constant class type string of the class.
func (*DatedFile) GetType() string {
	return TypeDatedFile
}

// PassportElementTypePersonalDetails a Telegram Passport element containing the user's personal details
type PassportElementTypePersonalDetails struct {
	meta
}

// MarshalJSON returns PassportElementTypePersonalDetails object as the JSON encoding of PassportElementTypePersonalDetails.
func (entity *PassportElementTypePersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypePersonalDetails

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypePersonalDetails) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypePersonalDetails) GetType() string {
	return TypePassportElementTypePersonalDetails
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypePersonalDetails) PassportElementTypeType() string {
	return TypePassportElementTypePersonalDetails
}

// PassportElementTypePassport a Telegram Passport element containing the user's passport
type PassportElementTypePassport struct {
	meta
}

// MarshalJSON returns PassportElementTypePassport object as the JSON encoding of PassportElementTypePassport.
func (entity *PassportElementTypePassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypePassport

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypePassport) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypePassport) GetType() string {
	return TypePassportElementTypePassport
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypePassport) PassportElementTypeType() string {
	return TypePassportElementTypePassport
}

// PassportElementTypeDriverLicense a Telegram Passport element containing the user's driver license
type PassportElementTypeDriverLicense struct {
	meta
}

// MarshalJSON returns PassportElementTypeDriverLicense object as the JSON encoding of PassportElementTypeDriverLicense.
func (entity *PassportElementTypeDriverLicense) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeDriverLicense

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeDriverLicense) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeDriverLicense) GetType() string {
	return TypePassportElementTypeDriverLicense
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeDriverLicense) PassportElementTypeType() string {
	return TypePassportElementTypeDriverLicense
}

// PassportElementTypeIdentityCard a Telegram Passport element containing the user's identity card
type PassportElementTypeIdentityCard struct {
	meta
}

// MarshalJSON returns PassportElementTypeIdentityCard object as the JSON encoding of PassportElementTypeIdentityCard.
func (entity *PassportElementTypeIdentityCard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeIdentityCard

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeIdentityCard) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeIdentityCard) GetType() string {
	return TypePassportElementTypeIdentityCard
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeIdentityCard) PassportElementTypeType() string {
	return TypePassportElementTypeIdentityCard
}

// PassportElementTypeInternalPassport a Telegram Passport element containing the user's internal passport
type PassportElementTypeInternalPassport struct {
	meta
}

// MarshalJSON returns PassportElementTypeInternalPassport object as the JSON encoding of PassportElementTypeInternalPassport.
func (entity *PassportElementTypeInternalPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeInternalPassport

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeInternalPassport) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeInternalPassport) GetType() string {
	return TypePassportElementTypeInternalPassport
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeInternalPassport) PassportElementTypeType() string {
	return TypePassportElementTypeInternalPassport
}

// PassportElementTypeAddress a Telegram Passport element containing the user's address
type PassportElementTypeAddress struct {
	meta
}

// MarshalJSON returns PassportElementTypeAddress object as the JSON encoding of PassportElementTypeAddress.
func (entity *PassportElementTypeAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeAddress) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeAddress) GetType() string {
	return TypePassportElementTypeAddress
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeAddress) PassportElementTypeType() string {
	return TypePassportElementTypeAddress
}

// PassportElementTypeUtilityBill a Telegram Passport element containing the user's utility bill
type PassportElementTypeUtilityBill struct {
	meta
}

// MarshalJSON returns PassportElementTypeUtilityBill object as the JSON encoding of PassportElementTypeUtilityBill.
func (entity *PassportElementTypeUtilityBill) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeUtilityBill

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeUtilityBill) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeUtilityBill) GetType() string {
	return TypePassportElementTypeUtilityBill
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeUtilityBill) PassportElementTypeType() string {
	return TypePassportElementTypeUtilityBill
}

// PassportElementTypeBankStatement a Telegram Passport element containing the user's bank statement
type PassportElementTypeBankStatement struct {
	meta
}

// MarshalJSON returns PassportElementTypeBankStatement object as the JSON encoding of PassportElementTypeBankStatement.
func (entity *PassportElementTypeBankStatement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeBankStatement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeBankStatement) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeBankStatement) GetType() string {
	return TypePassportElementTypeBankStatement
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeBankStatement) PassportElementTypeType() string {
	return TypePassportElementTypeBankStatement
}

// PassportElementTypeRentalAgreement a Telegram Passport element containing the user's rental agreement
type PassportElementTypeRentalAgreement struct {
	meta
}

// MarshalJSON returns PassportElementTypeRentalAgreement object as the JSON encoding of PassportElementTypeRentalAgreement.
func (entity *PassportElementTypeRentalAgreement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeRentalAgreement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeRentalAgreement) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeRentalAgreement) GetType() string {
	return TypePassportElementTypeRentalAgreement
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeRentalAgreement) PassportElementTypeType() string {
	return TypePassportElementTypeRentalAgreement
}

// PassportElementTypePassportRegistration a Telegram Passport element containing the registration page of the user's passport
type PassportElementTypePassportRegistration struct {
	meta
}

// MarshalJSON returns PassportElementTypePassportRegistration object as the JSON encoding of PassportElementTypePassportRegistration.
func (entity *PassportElementTypePassportRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypePassportRegistration

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypePassportRegistration) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypePassportRegistration) GetType() string {
	return TypePassportElementTypePassportRegistration
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypePassportRegistration) PassportElementTypeType() string {
	return TypePassportElementTypePassportRegistration
}

// PassportElementTypeTemporaryRegistration a Telegram Passport element containing the user's temporary registration
type PassportElementTypeTemporaryRegistration struct {
	meta
}

// MarshalJSON returns PassportElementTypeTemporaryRegistration object as the JSON encoding of PassportElementTypeTemporaryRegistration.
func (entity *PassportElementTypeTemporaryRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeTemporaryRegistration

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeTemporaryRegistration) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeTemporaryRegistration) GetType() string {
	return TypePassportElementTypeTemporaryRegistration
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeTemporaryRegistration) PassportElementTypeType() string {
	return TypePassportElementTypeTemporaryRegistration
}

// PassportElementTypePhoneNumber a Telegram Passport element containing the user's phone number
type PassportElementTypePhoneNumber struct {
	meta
}

// MarshalJSON returns PassportElementTypePhoneNumber object as the JSON encoding of PassportElementTypePhoneNumber.
func (entity *PassportElementTypePhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypePhoneNumber

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypePhoneNumber) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypePhoneNumber) GetType() string {
	return TypePassportElementTypePhoneNumber
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypePhoneNumber) PassportElementTypeType() string {
	return TypePassportElementTypePhoneNumber
}

// PassportElementTypeEmailAddress a Telegram Passport element containing the user's email address
type PassportElementTypeEmailAddress struct {
	meta
}

// MarshalJSON returns PassportElementTypeEmailAddress object as the JSON encoding of PassportElementTypeEmailAddress.
func (entity *PassportElementTypeEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTypeEmailAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTypeEmailAddress) GetClass() string {
	return ClassPassportElementType
}

// GetType returns constant class type string of the class.
func (*PassportElementTypeEmailAddress) GetType() string {
	return TypePassportElementTypeEmailAddress
}

// PassportElementTypeType returns constant class type string of the class.
func (*PassportElementTypeEmailAddress) PassportElementTypeType() string {
	return TypePassportElementTypeEmailAddress
}

// Date represents a date according to the Gregorian calendar
type Date struct {
	meta
	// Day of the month, 1-31
	Day int32 `json:"day"`
	// Month, 1-12
	Month int32 `json:"month"`
	// Year, 1-9999
	Year int32 `json:"year"`
}

// MarshalJSON returns Date object as the JSON encoding of Date.
func (entity *Date) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Date

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Date) GetClass() string {
	return ClassDate
}

// GetType returns constant class type string of the class.
func (*Date) GetType() string {
	return TypeDate
}

// PersonalDetails contains the user's personal details
type PersonalDetails struct {
	meta
	// First name of the user written in English; 1-255 characters
	FirstName string `json:"first_name"`
	// Middle name of the user written in English; 0-255 characters
	MiddleName string `json:"middle_name"`
	// Last name of the user written in English; 1-255 characters
	LastName string `json:"last_name"`
	// Native first name of the user; 1-255 characters
	NativeFirstName string `json:"native_first_name"`
	// Native middle name of the user; 0-255 characters
	NativeMiddleName string `json:"native_middle_name"`
	// Native last name of the user; 1-255 characters
	NativeLastName string `json:"native_last_name"`
	// Birthdate of the user
	Birthdate *Date `json:"birthdate"`
	// Gender of the user, "male" or "female"
	Gender string `json:"gender"`
	// A two-letter ISO 3166-1 alpha-2 country code of the user's country
	CountryCode string `json:"country_code"`
	// A two-letter ISO 3166-1 alpha-2 country code of the user's residence country
	ResidenceCountryCode string `json:"residence_country_code"`
}

// MarshalJSON returns PersonalDetails object as the JSON encoding of PersonalDetails.
func (entity *PersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PersonalDetails

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PersonalDetails) GetClass() string {
	return ClassPersonalDetails
}

// GetType returns constant class type string of the class.
func (*PersonalDetails) GetType() string {
	return TypePersonalDetails
}

// IdentityDocument an identity document
type IdentityDocument struct {
	meta
	// Document number; 1-24 characters
	Number string `json:"number"`
	// Document expiry date; may be null
	ExpiryDate *Date `json:"expiry_date"`
	// Front side of the document
	FrontSide *DatedFile `json:"front_side"`
	// Reverse side of the document; only for driver license and identity card
	ReverseSide *DatedFile `json:"reverse_side"`
	// Selfie with the document; may be null
	Selfie *DatedFile `json:"selfie"`
	// List of files containing a certified English translation of the document
	Translation []*DatedFile `json:"translation"`
}

// MarshalJSON returns IdentityDocument object as the JSON encoding of IdentityDocument.
func (entity *IdentityDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub IdentityDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*IdentityDocument) GetClass() string {
	return ClassIdentityDocument
}

// GetType returns constant class type string of the class.
func (*IdentityDocument) GetType() string {
	return TypeIdentityDocument
}

// InputIdentityDocument an identity document to be saved to Telegram Passport
type InputIdentityDocument struct {
	meta
	// Document number; 1-24 characters
	Number string `json:"number"`
	// Document expiry date, if available
	ExpiryDate *Date `json:"expiry_date"`
	// Front side of the document
	FrontSide InputFile `json:"front_side"`
	// Reverse side of the document; only for driver license and identity card
	ReverseSide InputFile `json:"reverse_side"`
	// Selfie with the document, if available
	Selfie InputFile `json:"selfie"`
	// List of files containing a certified English translation of the document
	Translation []InputFile `json:"translation"`
}

// MarshalJSON returns InputIdentityDocument object as the JSON encoding of InputIdentityDocument.
func (entity *InputIdentityDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputIdentityDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputIdentityDocument) GetClass() string {
	return ClassInputIdentityDocument
}

// GetType returns constant class type string of the class.
func (*InputIdentityDocument) GetType() string {
	return TypeInputIdentityDocument
}

// UnmarshalJSON sets InputIdentityDocument object to a copy of JSON encoding of InputIdentityDocument.
func (entity *InputIdentityDocument) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Number      string          `json:"number"`
		ExpiryDate  *Date           `json:"expiry_date"`
		FrontSide   json.RawMessage `json:"front_side"`
		ReverseSide json.RawMessage `json:"reverse_side"`
		Selfie      json.RawMessage `json:"selfie"`
		Translation []InputFile     `json:"translation"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Number = tmp.Number
	entity.ExpiryDate = tmp.ExpiryDate
	entity.Translation = tmp.Translation

	fieldFrontSide, _ := UnmarshalInputFile(tmp.FrontSide)
	entity.FrontSide = fieldFrontSide

	fieldReverseSide, _ := UnmarshalInputFile(tmp.ReverseSide)
	entity.ReverseSide = fieldReverseSide

	fieldSelfie, _ := UnmarshalInputFile(tmp.Selfie)
	entity.Selfie = fieldSelfie

	return nil
}

// PersonalDocument a personal document, containing some information about a user
type PersonalDocument struct {
	meta
	// List of files containing the pages of the document
	Files []*DatedFile `json:"files"`
	// List of files containing a certified English translation of the document
	Translation []*DatedFile `json:"translation"`
}

// MarshalJSON returns PersonalDocument object as the JSON encoding of PersonalDocument.
func (entity *PersonalDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PersonalDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PersonalDocument) GetClass() string {
	return ClassPersonalDocument
}

// GetType returns constant class type string of the class.
func (*PersonalDocument) GetType() string {
	return TypePersonalDocument
}

// InputPersonalDocument a personal document to be saved to Telegram Passport
type InputPersonalDocument struct {
	meta
	// List of files containing the pages of the document
	Files []InputFile `json:"files"`
	// List of files containing a certified English translation of the document
	Translation []InputFile `json:"translation"`
}

// MarshalJSON returns InputPersonalDocument object as the JSON encoding of InputPersonalDocument.
func (entity *InputPersonalDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPersonalDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPersonalDocument) GetClass() string {
	return ClassInputPersonalDocument
}

// GetType returns constant class type string of the class.
func (*InputPersonalDocument) GetType() string {
	return TypeInputPersonalDocument
}

// PassportElementPersonalDetails a Telegram Passport element containing the user's personal details
type PassportElementPersonalDetails struct {
	meta
	// Personal details of the user
	PersonalDetails *PersonalDetails `json:"personal_details"`
}

// MarshalJSON returns PassportElementPersonalDetails object as the JSON encoding of PassportElementPersonalDetails.
func (entity *PassportElementPersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementPersonalDetails

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementPersonalDetails) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementPersonalDetails) GetType() string {
	return TypePassportElementPersonalDetails
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementPersonalDetails) PassportElementType() string {
	return TypePassportElementPersonalDetails
}

// PassportElementPassport a Telegram Passport element containing the user's passport
type PassportElementPassport struct {
	meta
	// Passport
	Passport *IdentityDocument `json:"passport"`
}

// MarshalJSON returns PassportElementPassport object as the JSON encoding of PassportElementPassport.
func (entity *PassportElementPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementPassport

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementPassport) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementPassport) GetType() string {
	return TypePassportElementPassport
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementPassport) PassportElementType() string {
	return TypePassportElementPassport
}

// PassportElementDriverLicense a Telegram Passport element containing the user's driver license
type PassportElementDriverLicense struct {
	meta
	// Driver license
	DriverLicense *IdentityDocument `json:"driver_license"`
}

// MarshalJSON returns PassportElementDriverLicense object as the JSON encoding of PassportElementDriverLicense.
func (entity *PassportElementDriverLicense) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementDriverLicense

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementDriverLicense) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementDriverLicense) GetType() string {
	return TypePassportElementDriverLicense
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementDriverLicense) PassportElementType() string {
	return TypePassportElementDriverLicense
}

// PassportElementIdentityCard a Telegram Passport element containing the user's identity card
type PassportElementIdentityCard struct {
	meta
	// Identity card
	IdentityCard *IdentityDocument `json:"identity_card"`
}

// MarshalJSON returns PassportElementIdentityCard object as the JSON encoding of PassportElementIdentityCard.
func (entity *PassportElementIdentityCard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementIdentityCard

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementIdentityCard) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementIdentityCard) GetType() string {
	return TypePassportElementIdentityCard
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementIdentityCard) PassportElementType() string {
	return TypePassportElementIdentityCard
}

// PassportElementInternalPassport a Telegram Passport element containing the user's internal passport
type PassportElementInternalPassport struct {
	meta
	// Internal passport
	InternalPassport *IdentityDocument `json:"internal_passport"`
}

// MarshalJSON returns PassportElementInternalPassport object as the JSON encoding of PassportElementInternalPassport.
func (entity *PassportElementInternalPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementInternalPassport

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementInternalPassport) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementInternalPassport) GetType() string {
	return TypePassportElementInternalPassport
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementInternalPassport) PassportElementType() string {
	return TypePassportElementInternalPassport
}

// PassportElementAddress a Telegram Passport element containing the user's address
type PassportElementAddress struct {
	meta
	// Address
	Address *Address `json:"address"`
}

// MarshalJSON returns PassportElementAddress object as the JSON encoding of PassportElementAddress.
func (entity *PassportElementAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementAddress) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementAddress) GetType() string {
	return TypePassportElementAddress
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementAddress) PassportElementType() string {
	return TypePassportElementAddress
}

// PassportElementUtilityBill a Telegram Passport element containing the user's utility bill
type PassportElementUtilityBill struct {
	meta
	// Utility bill
	UtilityBill *PersonalDocument `json:"utility_bill"`
}

// MarshalJSON returns PassportElementUtilityBill object as the JSON encoding of PassportElementUtilityBill.
func (entity *PassportElementUtilityBill) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementUtilityBill

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementUtilityBill) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementUtilityBill) GetType() string {
	return TypePassportElementUtilityBill
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementUtilityBill) PassportElementType() string {
	return TypePassportElementUtilityBill
}

// PassportElementBankStatement a Telegram Passport element containing the user's bank statement
type PassportElementBankStatement struct {
	meta
	// Bank statement
	BankStatement *PersonalDocument `json:"bank_statement"`
}

// MarshalJSON returns PassportElementBankStatement object as the JSON encoding of PassportElementBankStatement.
func (entity *PassportElementBankStatement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementBankStatement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementBankStatement) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementBankStatement) GetType() string {
	return TypePassportElementBankStatement
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementBankStatement) PassportElementType() string {
	return TypePassportElementBankStatement
}

// PassportElementRentalAgreement a Telegram Passport element containing the user's rental agreement
type PassportElementRentalAgreement struct {
	meta
	// Rental agreement
	RentalAgreement *PersonalDocument `json:"rental_agreement"`
}

// MarshalJSON returns PassportElementRentalAgreement object as the JSON encoding of PassportElementRentalAgreement.
func (entity *PassportElementRentalAgreement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementRentalAgreement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementRentalAgreement) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementRentalAgreement) GetType() string {
	return TypePassportElementRentalAgreement
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementRentalAgreement) PassportElementType() string {
	return TypePassportElementRentalAgreement
}

// PassportElementPassportRegistration a Telegram Passport element containing the user's passport registration pages
type PassportElementPassportRegistration struct {
	meta
	// Passport registration pages
	PassportRegistration *PersonalDocument `json:"passport_registration"`
}

// MarshalJSON returns PassportElementPassportRegistration object as the JSON encoding of PassportElementPassportRegistration.
func (entity *PassportElementPassportRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementPassportRegistration

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementPassportRegistration) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementPassportRegistration) GetType() string {
	return TypePassportElementPassportRegistration
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementPassportRegistration) PassportElementType() string {
	return TypePassportElementPassportRegistration
}

// PassportElementTemporaryRegistration a Telegram Passport element containing the user's temporary registration
type PassportElementTemporaryRegistration struct {
	meta
	// Temporary registration
	TemporaryRegistration *PersonalDocument `json:"temporary_registration"`
}

// MarshalJSON returns PassportElementTemporaryRegistration object as the JSON encoding of PassportElementTemporaryRegistration.
func (entity *PassportElementTemporaryRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementTemporaryRegistration

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementTemporaryRegistration) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementTemporaryRegistration) GetType() string {
	return TypePassportElementTemporaryRegistration
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementTemporaryRegistration) PassportElementType() string {
	return TypePassportElementTemporaryRegistration
}

// PassportElementPhoneNumber a Telegram Passport element containing the user's phone number
type PassportElementPhoneNumber struct {
	meta
	// Phone number
	PhoneNumber string `json:"phone_number"`
}

// MarshalJSON returns PassportElementPhoneNumber object as the JSON encoding of PassportElementPhoneNumber.
func (entity *PassportElementPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementPhoneNumber

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementPhoneNumber) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementPhoneNumber) GetType() string {
	return TypePassportElementPhoneNumber
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementPhoneNumber) PassportElementType() string {
	return TypePassportElementPhoneNumber
}

// PassportElementEmailAddress a Telegram Passport element containing the user's email address
type PassportElementEmailAddress struct {
	meta
	// Email address
	EmailAddress string `json:"email_address"`
}

// MarshalJSON returns PassportElementEmailAddress object as the JSON encoding of PassportElementEmailAddress.
func (entity *PassportElementEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementEmailAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementEmailAddress) GetClass() string {
	return ClassPassportElement
}

// GetType returns constant class type string of the class.
func (*PassportElementEmailAddress) GetType() string {
	return TypePassportElementEmailAddress
}

// PassportElementType returns constant class type string of the class.
func (*PassportElementEmailAddress) PassportElementType() string {
	return TypePassportElementEmailAddress
}

// InputPassportElementPersonalDetails a Telegram Passport element to be saved containing the user's personal details
type InputPassportElementPersonalDetails struct {
	meta
	// Personal details of the user
	PersonalDetails *PersonalDetails `json:"personal_details"`
}

// MarshalJSON returns InputPassportElementPersonalDetails object as the JSON encoding of InputPassportElementPersonalDetails.
func (entity *InputPassportElementPersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementPersonalDetails

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementPersonalDetails) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementPersonalDetails) GetType() string {
	return TypeInputPassportElementPersonalDetails
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementPersonalDetails) InputPassportElementType() string {
	return TypeInputPassportElementPersonalDetails
}

// InputPassportElementPassport a Telegram Passport element to be saved containing the user's passport
type InputPassportElementPassport struct {
	meta
	// The passport to be saved
	Passport *InputIdentityDocument `json:"passport"`
}

// MarshalJSON returns InputPassportElementPassport object as the JSON encoding of InputPassportElementPassport.
func (entity *InputPassportElementPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementPassport

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementPassport) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementPassport) GetType() string {
	return TypeInputPassportElementPassport
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementPassport) InputPassportElementType() string {
	return TypeInputPassportElementPassport
}

// InputPassportElementDriverLicense a Telegram Passport element to be saved containing the user's driver license
type InputPassportElementDriverLicense struct {
	meta
	// The driver license to be saved
	DriverLicense *InputIdentityDocument `json:"driver_license"`
}

// MarshalJSON returns InputPassportElementDriverLicense object as the JSON encoding of InputPassportElementDriverLicense.
func (entity *InputPassportElementDriverLicense) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementDriverLicense

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementDriverLicense) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementDriverLicense) GetType() string {
	return TypeInputPassportElementDriverLicense
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementDriverLicense) InputPassportElementType() string {
	return TypeInputPassportElementDriverLicense
}

// InputPassportElementIdentityCard a Telegram Passport element to be saved containing the user's identity card
type InputPassportElementIdentityCard struct {
	meta
	// The identity card to be saved
	IdentityCard *InputIdentityDocument `json:"identity_card"`
}

// MarshalJSON returns InputPassportElementIdentityCard object as the JSON encoding of InputPassportElementIdentityCard.
func (entity *InputPassportElementIdentityCard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementIdentityCard

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementIdentityCard) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementIdentityCard) GetType() string {
	return TypeInputPassportElementIdentityCard
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementIdentityCard) InputPassportElementType() string {
	return TypeInputPassportElementIdentityCard
}

// InputPassportElementInternalPassport a Telegram Passport element to be saved containing the user's internal passport
type InputPassportElementInternalPassport struct {
	meta
	// The internal passport to be saved
	InternalPassport *InputIdentityDocument `json:"internal_passport"`
}

// MarshalJSON returns InputPassportElementInternalPassport object as the JSON encoding of InputPassportElementInternalPassport.
func (entity *InputPassportElementInternalPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementInternalPassport

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementInternalPassport) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementInternalPassport) GetType() string {
	return TypeInputPassportElementInternalPassport
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementInternalPassport) InputPassportElementType() string {
	return TypeInputPassportElementInternalPassport
}

// InputPassportElementAddress a Telegram Passport element to be saved containing the user's address
type InputPassportElementAddress struct {
	meta
	// The address to be saved
	Address *Address `json:"address"`
}

// MarshalJSON returns InputPassportElementAddress object as the JSON encoding of InputPassportElementAddress.
func (entity *InputPassportElementAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementAddress) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementAddress) GetType() string {
	return TypeInputPassportElementAddress
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementAddress) InputPassportElementType() string {
	return TypeInputPassportElementAddress
}

// InputPassportElementUtilityBill a Telegram Passport element to be saved containing the user's utility bill
type InputPassportElementUtilityBill struct {
	meta
	// The utility bill to be saved
	UtilityBill *InputPersonalDocument `json:"utility_bill"`
}

// MarshalJSON returns InputPassportElementUtilityBill object as the JSON encoding of InputPassportElementUtilityBill.
func (entity *InputPassportElementUtilityBill) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementUtilityBill

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementUtilityBill) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementUtilityBill) GetType() string {
	return TypeInputPassportElementUtilityBill
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementUtilityBill) InputPassportElementType() string {
	return TypeInputPassportElementUtilityBill
}

// InputPassportElementBankStatement a Telegram Passport element to be saved containing the user's bank statement
type InputPassportElementBankStatement struct {
	meta
	// The bank statement to be saved
	BankStatement *InputPersonalDocument `json:"bank_statement"`
}

// MarshalJSON returns InputPassportElementBankStatement object as the JSON encoding of InputPassportElementBankStatement.
func (entity *InputPassportElementBankStatement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementBankStatement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementBankStatement) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementBankStatement) GetType() string {
	return TypeInputPassportElementBankStatement
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementBankStatement) InputPassportElementType() string {
	return TypeInputPassportElementBankStatement
}

// InputPassportElementRentalAgreement a Telegram Passport element to be saved containing the user's rental agreement
type InputPassportElementRentalAgreement struct {
	meta
	// The rental agreement to be saved
	RentalAgreement *InputPersonalDocument `json:"rental_agreement"`
}

// MarshalJSON returns InputPassportElementRentalAgreement object as the JSON encoding of InputPassportElementRentalAgreement.
func (entity *InputPassportElementRentalAgreement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementRentalAgreement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementRentalAgreement) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementRentalAgreement) GetType() string {
	return TypeInputPassportElementRentalAgreement
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementRentalAgreement) InputPassportElementType() string {
	return TypeInputPassportElementRentalAgreement
}

// InputPassportElementPassportRegistration a Telegram Passport element to be saved containing the user's passport registration
type InputPassportElementPassportRegistration struct {
	meta
	// The passport registration page to be saved
	PassportRegistration *InputPersonalDocument `json:"passport_registration"`
}

// MarshalJSON returns InputPassportElementPassportRegistration object as the JSON encoding of InputPassportElementPassportRegistration.
func (entity *InputPassportElementPassportRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementPassportRegistration

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementPassportRegistration) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementPassportRegistration) GetType() string {
	return TypeInputPassportElementPassportRegistration
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementPassportRegistration) InputPassportElementType() string {
	return TypeInputPassportElementPassportRegistration
}

// InputPassportElementTemporaryRegistration a Telegram Passport element to be saved containing the user's temporary registration
type InputPassportElementTemporaryRegistration struct {
	meta
	// The temporary registration document to be saved
	TemporaryRegistration *InputPersonalDocument `json:"temporary_registration"`
}

// MarshalJSON returns InputPassportElementTemporaryRegistration object as the JSON encoding of InputPassportElementTemporaryRegistration.
func (entity *InputPassportElementTemporaryRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementTemporaryRegistration

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementTemporaryRegistration) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementTemporaryRegistration) GetType() string {
	return TypeInputPassportElementTemporaryRegistration
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementTemporaryRegistration) InputPassportElementType() string {
	return TypeInputPassportElementTemporaryRegistration
}

// InputPassportElementPhoneNumber a Telegram Passport element to be saved containing the user's phone number
type InputPassportElementPhoneNumber struct {
	meta
	// The phone number to be saved
	PhoneNumber string `json:"phone_number"`
}

// MarshalJSON returns InputPassportElementPhoneNumber object as the JSON encoding of InputPassportElementPhoneNumber.
func (entity *InputPassportElementPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementPhoneNumber

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementPhoneNumber) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementPhoneNumber) GetType() string {
	return TypeInputPassportElementPhoneNumber
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementPhoneNumber) InputPassportElementType() string {
	return TypeInputPassportElementPhoneNumber
}

// InputPassportElementEmailAddress a Telegram Passport element to be saved containing the user's email address
type InputPassportElementEmailAddress struct {
	meta
	// The email address to be saved
	EmailAddress string `json:"email_address"`
}

// MarshalJSON returns InputPassportElementEmailAddress object as the JSON encoding of InputPassportElementEmailAddress.
func (entity *InputPassportElementEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementEmailAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementEmailAddress) GetClass() string {
	return ClassInputPassportElement
}

// GetType returns constant class type string of the class.
func (*InputPassportElementEmailAddress) GetType() string {
	return TypeInputPassportElementEmailAddress
}

// InputPassportElementType returns constant class type string of the class.
func (*InputPassportElementEmailAddress) InputPassportElementType() string {
	return TypeInputPassportElementEmailAddress
}

// PassportElements contains information about saved Telegram Passport elements
type PassportElements struct {
	meta
	// Telegram Passport elements
	Elements []PassportElement `json:"elements"`
}

// MarshalJSON returns PassportElements object as the JSON encoding of PassportElements.
func (entity *PassportElements) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElements

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElements) GetClass() string {
	return ClassPassportElements
}

// GetType returns constant class type string of the class.
func (*PassportElements) GetType() string {
	return TypePassportElements
}

// PassportElementErrorSourceUnspecified the element contains an error in an unspecified place. The error will be considered resolved when new data is added
type PassportElementErrorSourceUnspecified struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceUnspecified object as the JSON encoding of PassportElementErrorSourceUnspecified.
func (entity *PassportElementErrorSourceUnspecified) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceUnspecified

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceUnspecified) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceUnspecified) GetType() string {
	return TypePassportElementErrorSourceUnspecified
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceUnspecified) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceUnspecified
}

// PassportElementErrorSourceDataField one of the data fields contains an error. The error will be considered resolved when the value of the field changes
type PassportElementErrorSourceDataField struct {
	meta
	// Field name
	FieldName string `json:"field_name"`
}

// MarshalJSON returns PassportElementErrorSourceDataField object as the JSON encoding of PassportElementErrorSourceDataField.
func (entity *PassportElementErrorSourceDataField) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceDataField

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceDataField) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceDataField) GetType() string {
	return TypePassportElementErrorSourceDataField
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceDataField) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceDataField
}

// PassportElementErrorSourceFrontSide the front side of the document contains an error. The error will be considered resolved when the file with the front side changes
type PassportElementErrorSourceFrontSide struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceFrontSide object as the JSON encoding of PassportElementErrorSourceFrontSide.
func (entity *PassportElementErrorSourceFrontSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceFrontSide

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceFrontSide) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceFrontSide) GetType() string {
	return TypePassportElementErrorSourceFrontSide
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceFrontSide) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceFrontSide
}

// PassportElementErrorSourceReverseSide the reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes
type PassportElementErrorSourceReverseSide struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceReverseSide object as the JSON encoding of PassportElementErrorSourceReverseSide.
func (entity *PassportElementErrorSourceReverseSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceReverseSide

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceReverseSide) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceReverseSide) GetType() string {
	return TypePassportElementErrorSourceReverseSide
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceReverseSide) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceReverseSide
}

// PassportElementErrorSourceSelfie the selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes
type PassportElementErrorSourceSelfie struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceSelfie object as the JSON encoding of PassportElementErrorSourceSelfie.
func (entity *PassportElementErrorSourceSelfie) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceSelfie

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceSelfie) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceSelfie) GetType() string {
	return TypePassportElementErrorSourceSelfie
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceSelfie) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceSelfie
}

// PassportElementErrorSourceTranslationFile one of files with the translation of the document contains an error. The error will be considered resolved when the file changes
type PassportElementErrorSourceTranslationFile struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceTranslationFile object as the JSON encoding of PassportElementErrorSourceTranslationFile.
func (entity *PassportElementErrorSourceTranslationFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceTranslationFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceTranslationFile) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceTranslationFile) GetType() string {
	return TypePassportElementErrorSourceTranslationFile
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceTranslationFile) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceTranslationFile
}

// PassportElementErrorSourceTranslationFiles the translation of the document contains an error. The error will be considered resolved when the list of translation files changes
type PassportElementErrorSourceTranslationFiles struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceTranslationFiles object as the JSON encoding of PassportElementErrorSourceTranslationFiles.
func (entity *PassportElementErrorSourceTranslationFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceTranslationFiles

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceTranslationFiles) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceTranslationFiles) GetType() string {
	return TypePassportElementErrorSourceTranslationFiles
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceTranslationFiles) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceTranslationFiles
}

// PassportElementErrorSourceFile the file contains an error. The error will be considered resolved when the file changes
type PassportElementErrorSourceFile struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceFile object as the JSON encoding of PassportElementErrorSourceFile.
func (entity *PassportElementErrorSourceFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceFile) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceFile) GetType() string {
	return TypePassportElementErrorSourceFile
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceFile) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceFile
}

// PassportElementErrorSourceFiles the list of attached files contains an error. The error will be considered resolved when the list of files changes
type PassportElementErrorSourceFiles struct {
	meta
}

// MarshalJSON returns PassportElementErrorSourceFiles object as the JSON encoding of PassportElementErrorSourceFiles.
func (entity *PassportElementErrorSourceFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementErrorSourceFiles

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementErrorSourceFiles) GetClass() string {
	return ClassPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*PassportElementErrorSourceFiles) GetType() string {
	return TypePassportElementErrorSourceFiles
}

// PassportElementErrorSourceType returns constant class type string of the class.
func (*PassportElementErrorSourceFiles) PassportElementErrorSourceType() string {
	return TypePassportElementErrorSourceFiles
}

// PassportElementError contains the description of an error in a Telegram Passport element
type PassportElementError struct {
	meta
	// Type of the Telegram Passport element which has the error
	Type PassportElementType `json:"type"`
	// Error message
	Message string `json:"message"`
	// Error source
	Source PassportElementErrorSource `json:"source"`
}

// MarshalJSON returns PassportElementError object as the JSON encoding of PassportElementError.
func (entity *PassportElementError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportElementError

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportElementError) GetClass() string {
	return ClassPassportElementError
}

// GetType returns constant class type string of the class.
func (*PassportElementError) GetType() string {
	return TypePassportElementError
}

// UnmarshalJSON sets PassportElementError object to a copy of JSON encoding of PassportElementError.
func (entity *PassportElementError) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type    json.RawMessage `json:"type"`
		Message string          `json:"message"`
		Source  json.RawMessage `json:"source"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Message = tmp.Message

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	entity.Type = fieldType

	fieldSource, _ := UnmarshalPassportElementErrorSource(tmp.Source)
	entity.Source = fieldSource

	return nil
}

// PassportSuitableElement contains information about a Telegram Passport element that was requested by a service
type PassportSuitableElement struct {
	meta
	// Type of the element
	Type PassportElementType `json:"type"`
	// True, if a selfie is required with the identity document
	IsSelfieRequired bool `json:"is_selfie_required"`
	// True, if a certified English translation is required with the document
	IsTranslationRequired bool `json:"is_translation_required"`
	// True, if personal details must include the user's name in the language of their country of residence
	IsNativeNameRequired bool `json:"is_native_name_required"`
}

// MarshalJSON returns PassportSuitableElement object as the JSON encoding of PassportSuitableElement.
func (entity *PassportSuitableElement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportSuitableElement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportSuitableElement) GetClass() string {
	return ClassPassportSuitableElement
}

// GetType returns constant class type string of the class.
func (*PassportSuitableElement) GetType() string {
	return TypePassportSuitableElement
}

// UnmarshalJSON sets PassportSuitableElement object to a copy of JSON encoding of PassportSuitableElement.
func (entity *PassportSuitableElement) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type                  json.RawMessage `json:"type"`
		IsSelfieRequired      bool            `json:"is_selfie_required"`
		IsTranslationRequired bool            `json:"is_translation_required"`
		IsNativeNameRequired  bool            `json:"is_native_name_required"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.IsSelfieRequired = tmp.IsSelfieRequired
	entity.IsTranslationRequired = tmp.IsTranslationRequired
	entity.IsNativeNameRequired = tmp.IsNativeNameRequired

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// PassportRequiredElement contains a description of the required Telegram Passport element that was requested by a service
type PassportRequiredElement struct {
	meta
	// List of Telegram Passport elements any of which is enough to provide
	SuitableElements []*PassportSuitableElement `json:"suitable_elements"`
}

// MarshalJSON returns PassportRequiredElement object as the JSON encoding of PassportRequiredElement.
func (entity *PassportRequiredElement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportRequiredElement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportRequiredElement) GetClass() string {
	return ClassPassportRequiredElement
}

// GetType returns constant class type string of the class.
func (*PassportRequiredElement) GetType() string {
	return TypePassportRequiredElement
}

// PassportAuthorizationForm contains information about a Telegram Passport authorization form that was requested
type PassportAuthorizationForm struct {
	meta
	// Unique identifier of the authorization form
	ID int32 `json:"id"`
	// Information about the Telegram Passport elements that need to be provided to complete the form
	RequiredElements []*PassportRequiredElement `json:"required_elements"`
	// Already available Telegram Passport elements
	Elements []PassportElement `json:"elements"`
	// Errors in the elements that are already available
	Errors []*PassportElementError `json:"errors"`
	// URL for the privacy policy of the service; can be empty
	PrivacyPolicyURL string `json:"privacy_policy_url"`
}

// MarshalJSON returns PassportAuthorizationForm object as the JSON encoding of PassportAuthorizationForm.
func (entity *PassportAuthorizationForm) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PassportAuthorizationForm

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PassportAuthorizationForm) GetClass() string {
	return ClassPassportAuthorizationForm
}

// GetType returns constant class type string of the class.
func (*PassportAuthorizationForm) GetType() string {
	return TypePassportAuthorizationForm
}

// EncryptedCredentials contains encrypted Telegram Passport data credentials
type EncryptedCredentials struct {
	meta
	// The encrypted credentials
	Data []byte `json:"data"`
	// The decrypted data hash
	Hash []byte `json:"hash"`
	// Secret for data decryption, encrypted with the service's public key
	Secret []byte `json:"secret"`
}

// MarshalJSON returns EncryptedCredentials object as the JSON encoding of EncryptedCredentials.
func (entity *EncryptedCredentials) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub EncryptedCredentials

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*EncryptedCredentials) GetClass() string {
	return ClassEncryptedCredentials
}

// GetType returns constant class type string of the class.
func (*EncryptedCredentials) GetType() string {
	return TypeEncryptedCredentials
}

// EncryptedPassportElement contains information about an encrypted Telegram Passport element; for bots only
type EncryptedPassportElement struct {
	meta
	// Type of Telegram Passport element
	Type PassportElementType `json:"type"`
	// Encrypted JSON-encoded data about the user
	Data []byte `json:"data"`
	// The front side of an identity document
	FrontSide *DatedFile `json:"front_side"`
	// The reverse side of an identity document; may be null
	ReverseSide *DatedFile `json:"reverse_side"`
	// Selfie with the document; may be null
	Selfie *DatedFile `json:"selfie"`
	// List of files containing a certified English translation of the document
	Translation []*DatedFile `json:"translation"`
	// List of attached files
	Files []*DatedFile `json:"files"`
	// Unencrypted data, phone number or email address
	Value string `json:"value"`
	// Hash of the entire element
	Hash string `json:"hash"`
}

// MarshalJSON returns EncryptedPassportElement object as the JSON encoding of EncryptedPassportElement.
func (entity *EncryptedPassportElement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub EncryptedPassportElement

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*EncryptedPassportElement) GetClass() string {
	return ClassEncryptedPassportElement
}

// GetType returns constant class type string of the class.
func (*EncryptedPassportElement) GetType() string {
	return TypeEncryptedPassportElement
}

// UnmarshalJSON sets EncryptedPassportElement object to a copy of JSON encoding of EncryptedPassportElement.
func (entity *EncryptedPassportElement) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type        json.RawMessage `json:"type"`
		Data        []byte          `json:"data"`
		FrontSide   *DatedFile      `json:"front_side"`
		ReverseSide *DatedFile      `json:"reverse_side"`
		Selfie      *DatedFile      `json:"selfie"`
		Translation []*DatedFile    `json:"translation"`
		Files       []*DatedFile    `json:"files"`
		Value       string          `json:"value"`
		Hash        string          `json:"hash"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Data = tmp.Data
	entity.FrontSide = tmp.FrontSide
	entity.ReverseSide = tmp.ReverseSide
	entity.Selfie = tmp.Selfie
	entity.Translation = tmp.Translation
	entity.Files = tmp.Files
	entity.Value = tmp.Value
	entity.Hash = tmp.Hash

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// InputPassportElementErrorSourceUnspecified the element contains an error in an unspecified place. The error will be considered resolved when new data is added
type InputPassportElementErrorSourceUnspecified struct {
	meta
	// Current hash of the entire element
	ElementHash []byte `json:"element_hash"`
}

// MarshalJSON returns InputPassportElementErrorSourceUnspecified object as the JSON encoding of InputPassportElementErrorSourceUnspecified.
func (entity *InputPassportElementErrorSourceUnspecified) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceUnspecified

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceUnspecified) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceUnspecified) GetType() string {
	return TypeInputPassportElementErrorSourceUnspecified
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceUnspecified) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceUnspecified
}

// InputPassportElementErrorSourceDataField a data field contains an error. The error is considered resolved when the field's value changes
type InputPassportElementErrorSourceDataField struct {
	meta
	// Field name
	FieldName string `json:"field_name"`
	// Current data hash
	DataHash []byte `json:"data_hash"`
}

// MarshalJSON returns InputPassportElementErrorSourceDataField object as the JSON encoding of InputPassportElementErrorSourceDataField.
func (entity *InputPassportElementErrorSourceDataField) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceDataField

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceDataField) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceDataField) GetType() string {
	return TypeInputPassportElementErrorSourceDataField
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceDataField) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceDataField
}

// InputPassportElementErrorSourceFrontSide the front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes
type InputPassportElementErrorSourceFrontSide struct {
	meta
	// Current hash of the file containing the front side
	FileHash []byte `json:"file_hash"`
}

// MarshalJSON returns InputPassportElementErrorSourceFrontSide object as the JSON encoding of InputPassportElementErrorSourceFrontSide.
func (entity *InputPassportElementErrorSourceFrontSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceFrontSide

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceFrontSide) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceFrontSide) GetType() string {
	return TypeInputPassportElementErrorSourceFrontSide
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceFrontSide) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceFrontSide
}

// InputPassportElementErrorSourceReverseSide the reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes
type InputPassportElementErrorSourceReverseSide struct {
	meta
	// Current hash of the file containing the reverse side
	FileHash []byte `json:"file_hash"`
}

// MarshalJSON returns InputPassportElementErrorSourceReverseSide object as the JSON encoding of InputPassportElementErrorSourceReverseSide.
func (entity *InputPassportElementErrorSourceReverseSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceReverseSide

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceReverseSide) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceReverseSide) GetType() string {
	return TypeInputPassportElementErrorSourceReverseSide
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceReverseSide) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceReverseSide
}

// InputPassportElementErrorSourceSelfie the selfie contains an error. The error is considered resolved when the file with the selfie changes
type InputPassportElementErrorSourceSelfie struct {
	meta
	// Current hash of the file containing the selfie
	FileHash []byte `json:"file_hash"`
}

// MarshalJSON returns InputPassportElementErrorSourceSelfie object as the JSON encoding of InputPassportElementErrorSourceSelfie.
func (entity *InputPassportElementErrorSourceSelfie) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceSelfie

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceSelfie) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceSelfie) GetType() string {
	return TypeInputPassportElementErrorSourceSelfie
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceSelfie) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceSelfie
}

// InputPassportElementErrorSourceTranslationFile one of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes
type InputPassportElementErrorSourceTranslationFile struct {
	meta
	// Current hash of the file containing the translation
	FileHash []byte `json:"file_hash"`
}

// MarshalJSON returns InputPassportElementErrorSourceTranslationFile object as the JSON encoding of InputPassportElementErrorSourceTranslationFile.
func (entity *InputPassportElementErrorSourceTranslationFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceTranslationFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceTranslationFile) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceTranslationFile) GetType() string {
	return TypeInputPassportElementErrorSourceTranslationFile
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceTranslationFile) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceTranslationFile
}

// InputPassportElementErrorSourceTranslationFiles the translation of the document contains an error. The error is considered resolved when the list of files changes
type InputPassportElementErrorSourceTranslationFiles struct {
	meta
	// Current hashes of all files with the translation
	FileHashes [][]byte `json:"file_hashes"`
}

// MarshalJSON returns InputPassportElementErrorSourceTranslationFiles object as the JSON encoding of InputPassportElementErrorSourceTranslationFiles.
func (entity *InputPassportElementErrorSourceTranslationFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceTranslationFiles

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceTranslationFiles) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceTranslationFiles) GetType() string {
	return TypeInputPassportElementErrorSourceTranslationFiles
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceTranslationFiles) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceTranslationFiles
}

// InputPassportElementErrorSourceFile the file contains an error. The error is considered resolved when the file changes
type InputPassportElementErrorSourceFile struct {
	meta
	// Current hash of the file which has the error
	FileHash []byte `json:"file_hash"`
}

// MarshalJSON returns InputPassportElementErrorSourceFile object as the JSON encoding of InputPassportElementErrorSourceFile.
func (entity *InputPassportElementErrorSourceFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceFile) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceFile) GetType() string {
	return TypeInputPassportElementErrorSourceFile
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceFile) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceFile
}

// InputPassportElementErrorSourceFiles the list of attached files contains an error. The error is considered resolved when the file list changes
type InputPassportElementErrorSourceFiles struct {
	meta
	// Current hashes of all attached files
	FileHashes [][]byte `json:"file_hashes"`
}

// MarshalJSON returns InputPassportElementErrorSourceFiles object as the JSON encoding of InputPassportElementErrorSourceFiles.
func (entity *InputPassportElementErrorSourceFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementErrorSourceFiles

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementErrorSourceFiles) GetClass() string {
	return ClassInputPassportElementErrorSource
}

// GetType returns constant class type string of the class.
func (*InputPassportElementErrorSourceFiles) GetType() string {
	return TypeInputPassportElementErrorSourceFiles
}

// InputPassportElementErrorSourceType returns constant class type string of the class.
func (*InputPassportElementErrorSourceFiles) InputPassportElementErrorSourceType() string {
	return TypeInputPassportElementErrorSourceFiles
}

// InputPassportElementError contains the description of an error in a Telegram Passport element; for bots only
type InputPassportElementError struct {
	meta
	// Type of Telegram Passport element that has the error
	Type PassportElementType `json:"type"`
	// Error message
	Message string `json:"message"`
	// Error source
	Source InputPassportElementErrorSource `json:"source"`
}

// MarshalJSON returns InputPassportElementError object as the JSON encoding of InputPassportElementError.
func (entity *InputPassportElementError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputPassportElementError

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputPassportElementError) GetClass() string {
	return ClassInputPassportElementError
}

// GetType returns constant class type string of the class.
func (*InputPassportElementError) GetType() string {
	return TypeInputPassportElementError
}

// UnmarshalJSON sets InputPassportElementError object to a copy of JSON encoding of InputPassportElementError.
func (entity *InputPassportElementError) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type    json.RawMessage `json:"type"`
		Message string          `json:"message"`
		Source  json.RawMessage `json:"source"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Message = tmp.Message

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	entity.Type = fieldType

	fieldSource, _ := UnmarshalInputPassportElementErrorSource(tmp.Source)
	entity.Source = fieldSource

	return nil
}

// MessageText a text message
type MessageText struct {
	meta
	// Text of the message
	Text *FormattedText `json:"text"`
	// A preview of the web page that's mentioned in the text; may be null
	WebPage *WebPage `json:"web_page"`
}

// MarshalJSON returns MessageText object as the JSON encoding of MessageText.
func (entity *MessageText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageText

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageText) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageText) GetType() string {
	return TypeMessageText
}

// MessageContentType returns constant class type string of the class.
func (*MessageText) MessageContentType() string {
	return TypeMessageText
}

// MessageAnimation an animation message (GIF-style).
type MessageAnimation struct {
	meta
	// Message content
	Animation *Animation `json:"animation"`
	// Animation caption
	Caption *FormattedText `json:"caption"`
	// True, if the animation thumbnail must be blurred and the animation must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

// MarshalJSON returns MessageAnimation object as the JSON encoding of MessageAnimation.
func (entity *MessageAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageAnimation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageAnimation) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageAnimation) GetType() string {
	return TypeMessageAnimation
}

// MessageContentType returns constant class type string of the class.
func (*MessageAnimation) MessageContentType() string {
	return TypeMessageAnimation
}

// MessageAudio an audio message
type MessageAudio struct {
	meta
	// Message content
	Audio *Audio `json:"audio"`
	// Audio caption
	Caption *FormattedText `json:"caption"`
}

// MarshalJSON returns MessageAudio object as the JSON encoding of MessageAudio.
func (entity *MessageAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageAudio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageAudio) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageAudio) GetType() string {
	return TypeMessageAudio
}

// MessageContentType returns constant class type string of the class.
func (*MessageAudio) MessageContentType() string {
	return TypeMessageAudio
}

// MessageDocument a document message (general file)
type MessageDocument struct {
	meta
	// Message content
	Document *Document `json:"document"`
	// Document caption
	Caption *FormattedText `json:"caption"`
}

// MarshalJSON returns MessageDocument object as the JSON encoding of MessageDocument.
func (entity *MessageDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageDocument) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageDocument) GetType() string {
	return TypeMessageDocument
}

// MessageContentType returns constant class type string of the class.
func (*MessageDocument) MessageContentType() string {
	return TypeMessageDocument
}

// MessagePhoto a photo message
type MessagePhoto struct {
	meta
	// Message content
	Photo *Photo `json:"photo"`
	// Photo caption
	Caption *FormattedText `json:"caption"`
	// True, if the photo must be blurred and must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

// MarshalJSON returns MessagePhoto object as the JSON encoding of MessagePhoto.
func (entity *MessagePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessagePhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessagePhoto) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessagePhoto) GetType() string {
	return TypeMessagePhoto
}

// MessageContentType returns constant class type string of the class.
func (*MessagePhoto) MessageContentType() string {
	return TypeMessagePhoto
}

// MessageExpiredPhoto an expired photo message (self-destructed after TTL has elapsed)
type MessageExpiredPhoto struct {
	meta
}

// MarshalJSON returns MessageExpiredPhoto object as the JSON encoding of MessageExpiredPhoto.
func (entity *MessageExpiredPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageExpiredPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageExpiredPhoto) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageExpiredPhoto) GetType() string {
	return TypeMessageExpiredPhoto
}

// MessageContentType returns constant class type string of the class.
func (*MessageExpiredPhoto) MessageContentType() string {
	return TypeMessageExpiredPhoto
}

// MessageSticker a sticker message
type MessageSticker struct {
	meta
	// Message content
	Sticker *Sticker `json:"sticker"`
}

// MarshalJSON returns MessageSticker object as the JSON encoding of MessageSticker.
func (entity *MessageSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageSticker

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageSticker) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageSticker) GetType() string {
	return TypeMessageSticker
}

// MessageContentType returns constant class type string of the class.
func (*MessageSticker) MessageContentType() string {
	return TypeMessageSticker
}

// MessageVideo a video message
type MessageVideo struct {
	meta
	// Message content
	Video *Video `json:"video"`
	// Video caption
	Caption *FormattedText `json:"caption"`
	// True, if the video thumbnail must be blurred and the video must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

// MarshalJSON returns MessageVideo object as the JSON encoding of MessageVideo.
func (entity *MessageVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageVideo) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageVideo) GetType() string {
	return TypeMessageVideo
}

// MessageContentType returns constant class type string of the class.
func (*MessageVideo) MessageContentType() string {
	return TypeMessageVideo
}

// MessageExpiredVideo an expired video message (self-destructed after TTL has elapsed)
type MessageExpiredVideo struct {
	meta
}

// MarshalJSON returns MessageExpiredVideo object as the JSON encoding of MessageExpiredVideo.
func (entity *MessageExpiredVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageExpiredVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageExpiredVideo) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageExpiredVideo) GetType() string {
	return TypeMessageExpiredVideo
}

// MessageContentType returns constant class type string of the class.
func (*MessageExpiredVideo) MessageContentType() string {
	return TypeMessageExpiredVideo
}

// MessageVideoNote a video note message
type MessageVideoNote struct {
	meta
	// Message content
	VideoNote *VideoNote `json:"video_note"`
	// True, if at least one of the recipients has viewed the video note
	IsViewed bool `json:"is_viewed"`
	// True, if the video note thumbnail must be blurred and the video note must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

// MarshalJSON returns MessageVideoNote object as the JSON encoding of MessageVideoNote.
func (entity *MessageVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageVideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageVideoNote) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageVideoNote) GetType() string {
	return TypeMessageVideoNote
}

// MessageContentType returns constant class type string of the class.
func (*MessageVideoNote) MessageContentType() string {
	return TypeMessageVideoNote
}

// MessageVoiceNote a voice note message
type MessageVoiceNote struct {
	meta
	// Message content
	VoiceNote *VoiceNote `json:"voice_note"`
	// Voice note caption
	Caption *FormattedText `json:"caption"`
	// True, if at least one of the recipients has listened to the voice note
	IsListened bool `json:"is_listened"`
}

// MarshalJSON returns MessageVoiceNote object as the JSON encoding of MessageVoiceNote.
func (entity *MessageVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageVoiceNote) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageVoiceNote) GetType() string {
	return TypeMessageVoiceNote
}

// MessageContentType returns constant class type string of the class.
func (*MessageVoiceNote) MessageContentType() string {
	return TypeMessageVoiceNote
}

// MessageLocation a message with a location
type MessageLocation struct {
	meta
	// Message content
	Location *Location `json:"location"`
	// Time relative to the message sent date until which the location can be updated, in seconds
	LivePeriod int32 `json:"live_period"`
	// Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes
	ExpiresIn int32 `json:"expires_in"`
}

// MarshalJSON returns MessageLocation object as the JSON encoding of MessageLocation.
func (entity *MessageLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageLocation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageLocation) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageLocation) GetType() string {
	return TypeMessageLocation
}

// MessageContentType returns constant class type string of the class.
func (*MessageLocation) MessageContentType() string {
	return TypeMessageLocation
}

// MessageVenue a message with information about a venue
type MessageVenue struct {
	meta
	// Message content
	Venue *Venue `json:"venue"`
}

// MarshalJSON returns MessageVenue object as the JSON encoding of MessageVenue.
func (entity *MessageVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageVenue

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageVenue) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageVenue) GetType() string {
	return TypeMessageVenue
}

// MessageContentType returns constant class type string of the class.
func (*MessageVenue) MessageContentType() string {
	return TypeMessageVenue
}

// MessageContact a message with a user contact
type MessageContact struct {
	meta
	// Message content
	Contact *Contact `json:"contact"`
}

// MarshalJSON returns MessageContact object as the JSON encoding of MessageContact.
func (entity *MessageContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageContact

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageContact) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageContact) GetType() string {
	return TypeMessageContact
}

// MessageContentType returns constant class type string of the class.
func (*MessageContact) MessageContentType() string {
	return TypeMessageContact
}

// MessageGame a message with a game
type MessageGame struct {
	meta
	// Game
	Game *Game `json:"game"`
}

// MarshalJSON returns MessageGame object as the JSON encoding of MessageGame.
func (entity *MessageGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageGame

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageGame) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageGame) GetType() string {
	return TypeMessageGame
}

// MessageContentType returns constant class type string of the class.
func (*MessageGame) MessageContentType() string {
	return TypeMessageGame
}

// MessageInvoice a message with an invoice from a bot
type MessageInvoice struct {
	meta
	// Product title
	Title string `json:"title"`
	// Product description
	Description string `json:"description"`
	// Product photo; may be null
	Photo *Photo `json:"photo"`
	// Currency for the product price
	Currency string `json:"currency"`
	// Product total price in the minimal quantity of the currency
	TotalAmount int64 `json:"total_amount"`
	// Unique invoice bot start_parameter. To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter}
	StartParameter string `json:"start_parameter"`
	// True, if the invoice is a test invoice
	IsTest bool `json:"is_test"`
	// True, if the shipping address should be specified
	NeedShippingAddress bool `json:"need_shipping_address"`
	// The identifier of the message with the receipt, after the product has been purchased
	ReceiptMessageID int64 `json:"receipt_message_id"`
}

// MarshalJSON returns MessageInvoice object as the JSON encoding of MessageInvoice.
func (entity *MessageInvoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageInvoice

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageInvoice) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageInvoice) GetType() string {
	return TypeMessageInvoice
}

// MessageContentType returns constant class type string of the class.
func (*MessageInvoice) MessageContentType() string {
	return TypeMessageInvoice
}

// MessageCall a message with information about an ended call
type MessageCall struct {
	meta
	// Reason why the call was discarded
	DiscardReason CallDiscardReason `json:"discard_reason"`
	// Call duration, in seconds
	Duration int32 `json:"duration"`
}

// MarshalJSON returns MessageCall object as the JSON encoding of MessageCall.
func (entity *MessageCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageCall

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageCall) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageCall) GetType() string {
	return TypeMessageCall
}

// MessageContentType returns constant class type string of the class.
func (*MessageCall) MessageContentType() string {
	return TypeMessageCall
}

// UnmarshalJSON sets MessageCall object to a copy of JSON encoding of MessageCall.
func (entity *MessageCall) UnmarshalJSON(data []byte) error {
	var tmp struct {
		DiscardReason json.RawMessage `json:"discard_reason"`
		Duration      int32           `json:"duration"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Duration = tmp.Duration

	fieldDiscardReason, _ := UnmarshalCallDiscardReason(tmp.DiscardReason)
	entity.DiscardReason = fieldDiscardReason

	return nil
}

// MessageBasicGroupChatCreate a newly created basic group
type MessageBasicGroupChatCreate struct {
	meta
	// Title of the basic group
	Title string `json:"title"`
	// User identifiers of members in the basic group
	MemberUserIDs []int32 `json:"member_user_ids"`
}

// MarshalJSON returns MessageBasicGroupChatCreate object as the JSON encoding of MessageBasicGroupChatCreate.
func (entity *MessageBasicGroupChatCreate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageBasicGroupChatCreate

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageBasicGroupChatCreate) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageBasicGroupChatCreate) GetType() string {
	return TypeMessageBasicGroupChatCreate
}

// MessageContentType returns constant class type string of the class.
func (*MessageBasicGroupChatCreate) MessageContentType() string {
	return TypeMessageBasicGroupChatCreate
}

// MessageSupergroupChatCreate a newly created supergroup or channel
type MessageSupergroupChatCreate struct {
	meta
	// Title of the supergroup or channel
	Title string `json:"title"`
}

// MarshalJSON returns MessageSupergroupChatCreate object as the JSON encoding of MessageSupergroupChatCreate.
func (entity *MessageSupergroupChatCreate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageSupergroupChatCreate

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageSupergroupChatCreate) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageSupergroupChatCreate) GetType() string {
	return TypeMessageSupergroupChatCreate
}

// MessageContentType returns constant class type string of the class.
func (*MessageSupergroupChatCreate) MessageContentType() string {
	return TypeMessageSupergroupChatCreate
}

// MessageChatChangeTitle an updated chat title
type MessageChatChangeTitle struct {
	meta
	// New chat title
	Title string `json:"title"`
}

// MarshalJSON returns MessageChatChangeTitle object as the JSON encoding of MessageChatChangeTitle.
func (entity *MessageChatChangeTitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatChangeTitle

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatChangeTitle) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatChangeTitle) GetType() string {
	return TypeMessageChatChangeTitle
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatChangeTitle) MessageContentType() string {
	return TypeMessageChatChangeTitle
}

// MessageChatChangePhoto an updated chat photo
type MessageChatChangePhoto struct {
	meta
	// New chat photo
	Photo *Photo `json:"photo"`
}

// MarshalJSON returns MessageChatChangePhoto object as the JSON encoding of MessageChatChangePhoto.
func (entity *MessageChatChangePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatChangePhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatChangePhoto) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatChangePhoto) GetType() string {
	return TypeMessageChatChangePhoto
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatChangePhoto) MessageContentType() string {
	return TypeMessageChatChangePhoto
}

// MessageChatDeletePhoto a deleted chat photo
type MessageChatDeletePhoto struct {
	meta
}

// MarshalJSON returns MessageChatDeletePhoto object as the JSON encoding of MessageChatDeletePhoto.
func (entity *MessageChatDeletePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatDeletePhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatDeletePhoto) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatDeletePhoto) GetType() string {
	return TypeMessageChatDeletePhoto
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatDeletePhoto) MessageContentType() string {
	return TypeMessageChatDeletePhoto
}

// MessageChatAddMembers new chat members were added
type MessageChatAddMembers struct {
	meta
	// User identifiers of the new members
	MemberUserIDs []int32 `json:"member_user_ids"`
}

// MarshalJSON returns MessageChatAddMembers object as the JSON encoding of MessageChatAddMembers.
func (entity *MessageChatAddMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatAddMembers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatAddMembers) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatAddMembers) GetType() string {
	return TypeMessageChatAddMembers
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatAddMembers) MessageContentType() string {
	return TypeMessageChatAddMembers
}

// MessageChatJoinByLink a new member joined the chat by invite link
type MessageChatJoinByLink struct {
	meta
}

// MarshalJSON returns MessageChatJoinByLink object as the JSON encoding of MessageChatJoinByLink.
func (entity *MessageChatJoinByLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatJoinByLink

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatJoinByLink) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatJoinByLink) GetType() string {
	return TypeMessageChatJoinByLink
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatJoinByLink) MessageContentType() string {
	return TypeMessageChatJoinByLink
}

// MessageChatDeleteMember a chat member was deleted
type MessageChatDeleteMember struct {
	meta
	// User identifier of the deleted chat member
	UserID int32 `json:"user_id"`
}

// MarshalJSON returns MessageChatDeleteMember object as the JSON encoding of MessageChatDeleteMember.
func (entity *MessageChatDeleteMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatDeleteMember

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatDeleteMember) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatDeleteMember) GetType() string {
	return TypeMessageChatDeleteMember
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatDeleteMember) MessageContentType() string {
	return TypeMessageChatDeleteMember
}

// MessageChatUpgradeTo a basic group was upgraded to a supergroup and was deactivated as the result
type MessageChatUpgradeTo struct {
	meta
	// Identifier of the supergroup to which the basic group was upgraded
	SupergroupID int32 `json:"supergroup_id"`
}

// MarshalJSON returns MessageChatUpgradeTo object as the JSON encoding of MessageChatUpgradeTo.
func (entity *MessageChatUpgradeTo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatUpgradeTo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatUpgradeTo) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatUpgradeTo) GetType() string {
	return TypeMessageChatUpgradeTo
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatUpgradeTo) MessageContentType() string {
	return TypeMessageChatUpgradeTo
}

// MessageChatUpgradeFrom a supergroup has been created from a basic group
type MessageChatUpgradeFrom struct {
	meta
	// Title of the newly created supergroup
	Title string `json:"title"`
	// The identifier of the original basic group
	BasicGroupID int32 `json:"basic_group_id"`
}

// MarshalJSON returns MessageChatUpgradeFrom object as the JSON encoding of MessageChatUpgradeFrom.
func (entity *MessageChatUpgradeFrom) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatUpgradeFrom

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatUpgradeFrom) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatUpgradeFrom) GetType() string {
	return TypeMessageChatUpgradeFrom
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatUpgradeFrom) MessageContentType() string {
	return TypeMessageChatUpgradeFrom
}

// MessagePinMessage a message has been pinned
type MessagePinMessage struct {
	meta
	// Identifier of the pinned message, can be an identifier of a deleted message
	MessageID int64 `json:"message_id"`
}

// MarshalJSON returns MessagePinMessage object as the JSON encoding of MessagePinMessage.
func (entity *MessagePinMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessagePinMessage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessagePinMessage) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessagePinMessage) GetType() string {
	return TypeMessagePinMessage
}

// MessageContentType returns constant class type string of the class.
func (*MessagePinMessage) MessageContentType() string {
	return TypeMessagePinMessage
}

// MessageScreenshotTaken a screenshot of a message in the chat has been taken
type MessageScreenshotTaken struct {
	meta
}

// MarshalJSON returns MessageScreenshotTaken object as the JSON encoding of MessageScreenshotTaken.
func (entity *MessageScreenshotTaken) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageScreenshotTaken

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageScreenshotTaken) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageScreenshotTaken) GetType() string {
	return TypeMessageScreenshotTaken
}

// MessageContentType returns constant class type string of the class.
func (*MessageScreenshotTaken) MessageContentType() string {
	return TypeMessageScreenshotTaken
}

// MessageChatSetTTL the TTL (Time To Live) setting messages in a secret chat has been changed
type MessageChatSetTTL struct {
	meta
	// New TTL
	TTL int32 `json:"ttl"`
}

// MarshalJSON returns MessageChatSetTTL object as the JSON encoding of MessageChatSetTTL.
func (entity *MessageChatSetTTL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageChatSetTTL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageChatSetTTL) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageChatSetTTL) GetType() string {
	return TypeMessageChatSetTTL
}

// MessageContentType returns constant class type string of the class.
func (*MessageChatSetTTL) MessageContentType() string {
	return TypeMessageChatSetTTL
}

// MessageCustomServiceAction a non-standard action has happened in the chat
type MessageCustomServiceAction struct {
	meta
	// Message text to be shown in the chat
	Text string `json:"text"`
}

// MarshalJSON returns MessageCustomServiceAction object as the JSON encoding of MessageCustomServiceAction.
func (entity *MessageCustomServiceAction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageCustomServiceAction

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageCustomServiceAction) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageCustomServiceAction) GetType() string {
	return TypeMessageCustomServiceAction
}

// MessageContentType returns constant class type string of the class.
func (*MessageCustomServiceAction) MessageContentType() string {
	return TypeMessageCustomServiceAction
}

// MessageGameScore a new high score was achieved in a game
type MessageGameScore struct {
	meta
	// Identifier of the message with the game, can be an identifier of a deleted message
	GameMessageID int64 `json:"game_message_id"`
	// Identifier of the game, may be different from the games presented in the message with the game
	GameID Int64JSON `json:"game_id"`
	// New score
	Score int32 `json:"score"`
}

// MarshalJSON returns MessageGameScore object as the JSON encoding of MessageGameScore.
func (entity *MessageGameScore) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageGameScore

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageGameScore) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageGameScore) GetType() string {
	return TypeMessageGameScore
}

// MessageContentType returns constant class type string of the class.
func (*MessageGameScore) MessageContentType() string {
	return TypeMessageGameScore
}

// MessagePaymentSuccessful a payment has been completed
type MessagePaymentSuccessful struct {
	meta
	// Identifier of the message with the corresponding invoice; can be an identifier of a deleted message
	InvoiceMessageID int64 `json:"invoice_message_id"`
	// Currency for the price of the product
	Currency string `json:"currency"`
	// Total price for the product, in the minimal quantity of the currency
	TotalAmount int64 `json:"total_amount"`
}

// MarshalJSON returns MessagePaymentSuccessful object as the JSON encoding of MessagePaymentSuccessful.
func (entity *MessagePaymentSuccessful) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessagePaymentSuccessful

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessagePaymentSuccessful) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessagePaymentSuccessful) GetType() string {
	return TypeMessagePaymentSuccessful
}

// MessageContentType returns constant class type string of the class.
func (*MessagePaymentSuccessful) MessageContentType() string {
	return TypeMessagePaymentSuccessful
}

// MessagePaymentSuccessfulBot a payment has been completed; for bots only
type MessagePaymentSuccessfulBot struct {
	meta
	// Identifier of the message with the corresponding invoice; can be an identifier of a deleted message
	InvoiceMessageID int64 `json:"invoice_message_id"`
	// Currency for price of the product
	Currency string `json:"currency"`
	// Total price for the product, in the minimal quantity of the currency
	TotalAmount int64 `json:"total_amount"`
	// Invoice payload
	InvoicePayload []byte `json:"invoice_payload"`
	// Identifier of the shipping option chosen by the user; may be empty if not applicable
	ShippingOptionID string `json:"shipping_option_id"`
	// Information about the order; may be null
	OrderInfo *OrderInfo `json:"order_info"`
	// Telegram payment identifier
	TelegramPaymentChargeID string `json:"telegram_payment_charge_id"`
	// Provider payment identifier
	ProviderPaymentChargeID string `json:"provider_payment_charge_id"`
}

// MarshalJSON returns MessagePaymentSuccessfulBot object as the JSON encoding of MessagePaymentSuccessfulBot.
func (entity *MessagePaymentSuccessfulBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessagePaymentSuccessfulBot

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessagePaymentSuccessfulBot) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessagePaymentSuccessfulBot) GetType() string {
	return TypeMessagePaymentSuccessfulBot
}

// MessageContentType returns constant class type string of the class.
func (*MessagePaymentSuccessfulBot) MessageContentType() string {
	return TypeMessagePaymentSuccessfulBot
}

// MessageContactRegistered a contact has registered with Telegram
type MessageContactRegistered struct {
	meta
}

// MarshalJSON returns MessageContactRegistered object as the JSON encoding of MessageContactRegistered.
func (entity *MessageContactRegistered) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageContactRegistered

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageContactRegistered) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageContactRegistered) GetType() string {
	return TypeMessageContactRegistered
}

// MessageContentType returns constant class type string of the class.
func (*MessageContactRegistered) MessageContentType() string {
	return TypeMessageContactRegistered
}

// MessageWebsiteConnected the current user has connected a website by logging in using Telegram Login Widget on it
type MessageWebsiteConnected struct {
	meta
	// Domain name of the connected website
	DomainName string `json:"domain_name"`
}

// MarshalJSON returns MessageWebsiteConnected object as the JSON encoding of MessageWebsiteConnected.
func (entity *MessageWebsiteConnected) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageWebsiteConnected

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageWebsiteConnected) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageWebsiteConnected) GetType() string {
	return TypeMessageWebsiteConnected
}

// MessageContentType returns constant class type string of the class.
func (*MessageWebsiteConnected) MessageContentType() string {
	return TypeMessageWebsiteConnected
}

// MessagePassportDataSent telegram Passport data has been sent
type MessagePassportDataSent struct {
	meta
	// List of Telegram Passport element types sent
	Types []PassportElementType `json:"types"`
}

// MarshalJSON returns MessagePassportDataSent object as the JSON encoding of MessagePassportDataSent.
func (entity *MessagePassportDataSent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessagePassportDataSent

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessagePassportDataSent) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessagePassportDataSent) GetType() string {
	return TypeMessagePassportDataSent
}

// MessageContentType returns constant class type string of the class.
func (*MessagePassportDataSent) MessageContentType() string {
	return TypeMessagePassportDataSent
}

// MessagePassportDataReceived telegram Passport data has been received; for bots only
type MessagePassportDataReceived struct {
	meta
	// List of received Telegram Passport elements
	Elements []*EncryptedPassportElement `json:"elements"`
	// Encrypted data credentials
	Credentials *EncryptedCredentials `json:"credentials"`
}

// MarshalJSON returns MessagePassportDataReceived object as the JSON encoding of MessagePassportDataReceived.
func (entity *MessagePassportDataReceived) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessagePassportDataReceived

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessagePassportDataReceived) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessagePassportDataReceived) GetType() string {
	return TypeMessagePassportDataReceived
}

// MessageContentType returns constant class type string of the class.
func (*MessagePassportDataReceived) MessageContentType() string {
	return TypeMessagePassportDataReceived
}

// MessageUnsupported message content that is not supported by the client
type MessageUnsupported struct {
	meta
}

// MarshalJSON returns MessageUnsupported object as the JSON encoding of MessageUnsupported.
func (entity *MessageUnsupported) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub MessageUnsupported

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*MessageUnsupported) GetClass() string {
	return ClassMessageContent
}

// GetType returns constant class type string of the class.
func (*MessageUnsupported) GetType() string {
	return TypeMessageUnsupported
}

// MessageContentType returns constant class type string of the class.
func (*MessageUnsupported) MessageContentType() string {
	return TypeMessageUnsupported
}

// TextEntityTypeMention a mention of a user by their username
type TextEntityTypeMention struct {
	meta
}

// MarshalJSON returns TextEntityTypeMention object as the JSON encoding of TextEntityTypeMention.
func (entity *TextEntityTypeMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeMention

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeMention) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeMention) GetType() string {
	return TypeTextEntityTypeMention
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeMention) TextEntityTypeType() string {
	return TypeTextEntityTypeMention
}

// TextEntityTypeHashtag a hashtag text, beginning with "#"
type TextEntityTypeHashtag struct {
	meta
}

// MarshalJSON returns TextEntityTypeHashtag object as the JSON encoding of TextEntityTypeHashtag.
func (entity *TextEntityTypeHashtag) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeHashtag

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeHashtag) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeHashtag) GetType() string {
	return TypeTextEntityTypeHashtag
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeHashtag) TextEntityTypeType() string {
	return TypeTextEntityTypeHashtag
}

// TextEntityTypeCashtag a cashtag text, beginning with "$" and consisting of capital english letters (i.e. "$USD")
type TextEntityTypeCashtag struct {
	meta
}

// MarshalJSON returns TextEntityTypeCashtag object as the JSON encoding of TextEntityTypeCashtag.
func (entity *TextEntityTypeCashtag) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeCashtag

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeCashtag) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeCashtag) GetType() string {
	return TypeTextEntityTypeCashtag
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeCashtag) TextEntityTypeType() string {
	return TypeTextEntityTypeCashtag
}

// TextEntityTypeBotCommand a bot command, beginning with "/". This shouldn't be highlighted if there are no bots in the chat
type TextEntityTypeBotCommand struct {
	meta
}

// MarshalJSON returns TextEntityTypeBotCommand object as the JSON encoding of TextEntityTypeBotCommand.
func (entity *TextEntityTypeBotCommand) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeBotCommand

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeBotCommand) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeBotCommand) GetType() string {
	return TypeTextEntityTypeBotCommand
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeBotCommand) TextEntityTypeType() string {
	return TypeTextEntityTypeBotCommand
}

// TextEntityTypeURL an HTTP URL
type TextEntityTypeURL struct {
	meta
}

// MarshalJSON returns TextEntityTypeURL object as the JSON encoding of TextEntityTypeURL.
func (entity *TextEntityTypeURL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeURL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeURL) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeURL) GetType() string {
	return TypeTextEntityTypeURL
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeURL) TextEntityTypeType() string {
	return TypeTextEntityTypeURL
}

// TextEntityTypeEmailAddress an email address
type TextEntityTypeEmailAddress struct {
	meta
}

// MarshalJSON returns TextEntityTypeEmailAddress object as the JSON encoding of TextEntityTypeEmailAddress.
func (entity *TextEntityTypeEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeEmailAddress

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeEmailAddress) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeEmailAddress) GetType() string {
	return TypeTextEntityTypeEmailAddress
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeEmailAddress) TextEntityTypeType() string {
	return TypeTextEntityTypeEmailAddress
}

// TextEntityTypeBold a bold text
type TextEntityTypeBold struct {
	meta
}

// MarshalJSON returns TextEntityTypeBold object as the JSON encoding of TextEntityTypeBold.
func (entity *TextEntityTypeBold) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeBold

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeBold) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeBold) GetType() string {
	return TypeTextEntityTypeBold
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeBold) TextEntityTypeType() string {
	return TypeTextEntityTypeBold
}

// TextEntityTypeItalic an italic text
type TextEntityTypeItalic struct {
	meta
}

// MarshalJSON returns TextEntityTypeItalic object as the JSON encoding of TextEntityTypeItalic.
func (entity *TextEntityTypeItalic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeItalic

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeItalic) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeItalic) GetType() string {
	return TypeTextEntityTypeItalic
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeItalic) TextEntityTypeType() string {
	return TypeTextEntityTypeItalic
}

// TextEntityTypeCode text that must be formatted as if inside a code HTML tag
type TextEntityTypeCode struct {
	meta
}

// MarshalJSON returns TextEntityTypeCode object as the JSON encoding of TextEntityTypeCode.
func (entity *TextEntityTypeCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeCode

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeCode) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeCode) GetType() string {
	return TypeTextEntityTypeCode
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeCode) TextEntityTypeType() string {
	return TypeTextEntityTypeCode
}

// TextEntityTypePre text that must be formatted as if inside a pre HTML tag
type TextEntityTypePre struct {
	meta
}

// MarshalJSON returns TextEntityTypePre object as the JSON encoding of TextEntityTypePre.
func (entity *TextEntityTypePre) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypePre

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypePre) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypePre) GetType() string {
	return TypeTextEntityTypePre
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypePre) TextEntityTypeType() string {
	return TypeTextEntityTypePre
}

// TextEntityTypePreCode text that must be formatted as if inside pre, and code HTML tags
type TextEntityTypePreCode struct {
	meta
	// Programming language of the code; as defined by the sender
	Language string `json:"language"`
}

// MarshalJSON returns TextEntityTypePreCode object as the JSON encoding of TextEntityTypePreCode.
func (entity *TextEntityTypePreCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypePreCode

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypePreCode) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypePreCode) GetType() string {
	return TypeTextEntityTypePreCode
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypePreCode) TextEntityTypeType() string {
	return TypeTextEntityTypePreCode
}

// TextEntityTypeTextURL a text description shown instead of a raw URL
type TextEntityTypeTextURL struct {
	meta
	// HTTP or tg:// URL to be opened when the link is clicked
	URL string `json:"url"`
}

// MarshalJSON returns TextEntityTypeTextURL object as the JSON encoding of TextEntityTypeTextURL.
func (entity *TextEntityTypeTextURL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeTextURL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeTextURL) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeTextURL) GetType() string {
	return TypeTextEntityTypeTextURL
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeTextURL) TextEntityTypeType() string {
	return TypeTextEntityTypeTextURL
}

// TextEntityTypeMentionName a text shows instead of a raw mention of the user (e.g., when the user has no username)
type TextEntityTypeMentionName struct {
	meta
	// Identifier of the mentioned user
	UserID int32 `json:"user_id"`
}

// MarshalJSON returns TextEntityTypeMentionName object as the JSON encoding of TextEntityTypeMentionName.
func (entity *TextEntityTypeMentionName) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypeMentionName

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypeMentionName) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypeMentionName) GetType() string {
	return TypeTextEntityTypeMentionName
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypeMentionName) TextEntityTypeType() string {
	return TypeTextEntityTypeMentionName
}

// TextEntityTypePhoneNumber a phone number
type TextEntityTypePhoneNumber struct {
	meta
}

// MarshalJSON returns TextEntityTypePhoneNumber object as the JSON encoding of TextEntityTypePhoneNumber.
func (entity *TextEntityTypePhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextEntityTypePhoneNumber

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextEntityTypePhoneNumber) GetClass() string {
	return ClassTextEntityType
}

// GetType returns constant class type string of the class.
func (*TextEntityTypePhoneNumber) GetType() string {
	return TypeTextEntityTypePhoneNumber
}

// TextEntityTypeType returns constant class type string of the class.
func (*TextEntityTypePhoneNumber) TextEntityTypeType() string {
	return TypeTextEntityTypePhoneNumber
}

// InputThumbnail a thumbnail to be sent along with a file; should be in JPEG or WEBP format for stickers, and less than 200 kB in size
type InputThumbnail struct {
	meta
	// Thumbnail file to send. Sending thumbnails by file_id is currently not supported
	Thumbnail InputFile `json:"thumbnail"`
	// Thumbnail width, usually shouldn't exceed 90. Use 0 if unknown
	Width int32 `json:"width"`
	// Thumbnail height, usually shouldn't exceed 90. Use 0 if unknown
	Height int32 `json:"height"`
}

// MarshalJSON returns InputThumbnail object as the JSON encoding of InputThumbnail.
func (entity *InputThumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputThumbnail

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputThumbnail) GetClass() string {
	return ClassInputThumbnail
}

// GetType returns constant class type string of the class.
func (*InputThumbnail) GetType() string {
	return TypeInputThumbnail
}

// UnmarshalJSON sets InputThumbnail object to a copy of JSON encoding of InputThumbnail.
func (entity *InputThumbnail) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Thumbnail json.RawMessage `json:"thumbnail"`
		Width     int32           `json:"width"`
		Height    int32           `json:"height"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Width = tmp.Width
	entity.Height = tmp.Height

	fieldThumbnail, _ := UnmarshalInputFile(tmp.Thumbnail)
	entity.Thumbnail = fieldThumbnail

	return nil
}

// InputMessageText a text message
type InputMessageText struct {
	meta
	// Formatted text to be sent; 1-GetOption("message_text_length_max") characters. Only Bold, Italic, Code, Pre, PreCode and TextURL entities are allowed to be specified manually
	Text *FormattedText `json:"text"`
	// True, if rich web page previews for URLs in the message text should be disabled
	DisableWebPagePreview bool `json:"disable_web_page_preview"`
	// True, if a chat message draft should be deleted
	ClearDraft bool `json:"clear_draft"`
}

// MarshalJSON returns InputMessageText object as the JSON encoding of InputMessageText.
func (entity *InputMessageText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageText

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageText) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageText) GetType() string {
	return TypeInputMessageText
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageText) InputMessageContentType() string {
	return TypeInputMessageText
}

// InputMessageAnimation an animation message (GIF-style).
type InputMessageAnimation struct {
	meta
	// Animation file to be sent
	Animation InputFile `json:"animation"`
	// Animation thumbnail, if available
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// Duration of the animation, in seconds
	Duration int32 `json:"duration"`
	// Width of the animation; may be replaced by the server
	Width int32 `json:"width"`
	// Height of the animation; may be replaced by the server
	Height int32 `json:"height"`
	// Animation caption; 0-GetOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
}

// MarshalJSON returns InputMessageAnimation object as the JSON encoding of InputMessageAnimation.
func (entity *InputMessageAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageAnimation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageAnimation) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageAnimation) GetType() string {
	return TypeInputMessageAnimation
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageAnimation) InputMessageContentType() string {
	return TypeInputMessageAnimation
}

// UnmarshalJSON sets InputMessageAnimation object to a copy of JSON encoding of InputMessageAnimation.
func (entity *InputMessageAnimation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Animation json.RawMessage `json:"animation"`
		Thumbnail *InputThumbnail `json:"thumbnail"`
		Duration  int32           `json:"duration"`
		Width     int32           `json:"width"`
		Height    int32           `json:"height"`
		Caption   *FormattedText  `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Thumbnail = tmp.Thumbnail
	entity.Duration = tmp.Duration
	entity.Width = tmp.Width
	entity.Height = tmp.Height
	entity.Caption = tmp.Caption

	fieldAnimation, _ := UnmarshalInputFile(tmp.Animation)
	entity.Animation = fieldAnimation

	return nil
}

// InputMessageAudio an audio message
type InputMessageAudio struct {
	meta
	// Audio file to be sent
	Audio InputFile `json:"audio"`
	// Thumbnail of the cover for the album, if available
	AlbumCoverThumbnail *InputThumbnail `json:"album_cover_thumbnail"`
	// Duration of the audio, in seconds; may be replaced by the server
	Duration int32 `json:"duration"`
	// Title of the audio; 0-64 characters; may be replaced by the server
	Title string `json:"title"`
	// Performer of the audio; 0-64 characters, may be replaced by the server
	Performer string `json:"performer"`
	// Audio caption; 0-GetOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
}

// MarshalJSON returns InputMessageAudio object as the JSON encoding of InputMessageAudio.
func (entity *InputMessageAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageAudio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageAudio) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageAudio) GetType() string {
	return TypeInputMessageAudio
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageAudio) InputMessageContentType() string {
	return TypeInputMessageAudio
}

// UnmarshalJSON sets InputMessageAudio object to a copy of JSON encoding of InputMessageAudio.
func (entity *InputMessageAudio) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Audio               json.RawMessage `json:"audio"`
		AlbumCoverThumbnail *InputThumbnail `json:"album_cover_thumbnail"`
		Duration            int32           `json:"duration"`
		Title               string          `json:"title"`
		Performer           string          `json:"performer"`
		Caption             *FormattedText  `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.AlbumCoverThumbnail = tmp.AlbumCoverThumbnail
	entity.Duration = tmp.Duration
	entity.Title = tmp.Title
	entity.Performer = tmp.Performer
	entity.Caption = tmp.Caption

	fieldAudio, _ := UnmarshalInputFile(tmp.Audio)
	entity.Audio = fieldAudio

	return nil
}

// InputMessageDocument a document message (general file)
type InputMessageDocument struct {
	meta
	// Document to be sent
	Document InputFile `json:"document"`
	// Document thumbnail, if available
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// Document caption; 0-GetOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
}

// MarshalJSON returns InputMessageDocument object as the JSON encoding of InputMessageDocument.
func (entity *InputMessageDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageDocument) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageDocument) GetType() string {
	return TypeInputMessageDocument
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageDocument) InputMessageContentType() string {
	return TypeInputMessageDocument
}

// UnmarshalJSON sets InputMessageDocument object to a copy of JSON encoding of InputMessageDocument.
func (entity *InputMessageDocument) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Document  json.RawMessage `json:"document"`
		Thumbnail *InputThumbnail `json:"thumbnail"`
		Caption   *FormattedText  `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Thumbnail = tmp.Thumbnail
	entity.Caption = tmp.Caption

	fieldDocument, _ := UnmarshalInputFile(tmp.Document)
	entity.Document = fieldDocument

	return nil
}

// InputMessagePhoto a photo message
type InputMessagePhoto struct {
	meta
	// Photo to send
	Photo InputFile `json:"photo"`
	// Photo thumbnail to be sent, this is sent to the other party in secret chats only
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// File identifiers of the stickers added to the photo, if applicable
	AddedStickerFileIDs []int32 `json:"added_sticker_file_ids"`
	// Photo width
	Width int32 `json:"width"`
	// Photo height
	Height int32 `json:"height"`
	// Photo caption; 0-GetOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats
	TTL int32 `json:"ttl"`
}

// MarshalJSON returns InputMessagePhoto object as the JSON encoding of InputMessagePhoto.
func (entity *InputMessagePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessagePhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessagePhoto) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessagePhoto) GetType() string {
	return TypeInputMessagePhoto
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessagePhoto) InputMessageContentType() string {
	return TypeInputMessagePhoto
}

// UnmarshalJSON sets InputMessagePhoto object to a copy of JSON encoding of InputMessagePhoto.
func (entity *InputMessagePhoto) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Photo               json.RawMessage `json:"photo"`
		Thumbnail           *InputThumbnail `json:"thumbnail"`
		AddedStickerFileIDs []int32         `json:"added_sticker_file_ids"`
		Width               int32           `json:"width"`
		Height              int32           `json:"height"`
		Caption             *FormattedText  `json:"caption"`
		TTL                 int32           `json:"ttl"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Thumbnail = tmp.Thumbnail
	entity.AddedStickerFileIDs = tmp.AddedStickerFileIDs
	entity.Width = tmp.Width
	entity.Height = tmp.Height
	entity.Caption = tmp.Caption
	entity.TTL = tmp.TTL

	fieldPhoto, _ := UnmarshalInputFile(tmp.Photo)
	entity.Photo = fieldPhoto

	return nil
}

// InputMessageSticker a sticker message
type InputMessageSticker struct {
	meta
	// Sticker to be sent
	Sticker InputFile `json:"sticker"`
	// Sticker thumbnail, if available
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// Sticker width
	Width int32 `json:"width"`
	// Sticker height
	Height int32 `json:"height"`
}

// MarshalJSON returns InputMessageSticker object as the JSON encoding of InputMessageSticker.
func (entity *InputMessageSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageSticker

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageSticker) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageSticker) GetType() string {
	return TypeInputMessageSticker
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageSticker) InputMessageContentType() string {
	return TypeInputMessageSticker
}

// UnmarshalJSON sets InputMessageSticker object to a copy of JSON encoding of InputMessageSticker.
func (entity *InputMessageSticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Sticker   json.RawMessage `json:"sticker"`
		Thumbnail *InputThumbnail `json:"thumbnail"`
		Width     int32           `json:"width"`
		Height    int32           `json:"height"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Thumbnail = tmp.Thumbnail
	entity.Width = tmp.Width
	entity.Height = tmp.Height

	fieldSticker, _ := UnmarshalInputFile(tmp.Sticker)
	entity.Sticker = fieldSticker

	return nil
}

// InputMessageVideo a video message
type InputMessageVideo struct {
	meta
	// Video to be sent
	Video InputFile `json:"video"`
	// Video thumbnail, if available
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// File identifiers of the stickers added to the video, if applicable
	AddedStickerFileIDs []int32 `json:"added_sticker_file_ids"`
	// Duration of the video, in seconds
	Duration int32 `json:"duration"`
	// Video width
	Width int32 `json:"width"`
	// Video height
	Height int32 `json:"height"`
	// True, if the video should be tried to be streamed
	SupportsStreaming bool `json:"supports_streaming"`
	// Video caption; 0-GetOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// Video TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats
	TTL int32 `json:"ttl"`
}

// MarshalJSON returns InputMessageVideo object as the JSON encoding of InputMessageVideo.
func (entity *InputMessageVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageVideo) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageVideo) GetType() string {
	return TypeInputMessageVideo
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageVideo) InputMessageContentType() string {
	return TypeInputMessageVideo
}

// UnmarshalJSON sets InputMessageVideo object to a copy of JSON encoding of InputMessageVideo.
func (entity *InputMessageVideo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Video               json.RawMessage `json:"video"`
		Thumbnail           *InputThumbnail `json:"thumbnail"`
		AddedStickerFileIDs []int32         `json:"added_sticker_file_ids"`
		Duration            int32           `json:"duration"`
		Width               int32           `json:"width"`
		Height              int32           `json:"height"`
		SupportsStreaming   bool            `json:"supports_streaming"`
		Caption             *FormattedText  `json:"caption"`
		TTL                 int32           `json:"ttl"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Thumbnail = tmp.Thumbnail
	entity.AddedStickerFileIDs = tmp.AddedStickerFileIDs
	entity.Duration = tmp.Duration
	entity.Width = tmp.Width
	entity.Height = tmp.Height
	entity.SupportsStreaming = tmp.SupportsStreaming
	entity.Caption = tmp.Caption
	entity.TTL = tmp.TTL

	fieldVideo, _ := UnmarshalInputFile(tmp.Video)
	entity.Video = fieldVideo

	return nil
}

// InputMessageVideoNote a video note message
type InputMessageVideoNote struct {
	meta
	// Video note to be sent
	VideoNote InputFile `json:"video_note"`
	// Video thumbnail, if available
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// Duration of the video, in seconds
	Duration int32 `json:"duration"`
	// Video width and height; must be positive and not greater than 640
	Length int32 `json:"length"`
}

// MarshalJSON returns InputMessageVideoNote object as the JSON encoding of InputMessageVideoNote.
func (entity *InputMessageVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageVideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageVideoNote) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageVideoNote) GetType() string {
	return TypeInputMessageVideoNote
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageVideoNote) InputMessageContentType() string {
	return TypeInputMessageVideoNote
}

// UnmarshalJSON sets InputMessageVideoNote object to a copy of JSON encoding of InputMessageVideoNote.
func (entity *InputMessageVideoNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		VideoNote json.RawMessage `json:"video_note"`
		Thumbnail *InputThumbnail `json:"thumbnail"`
		Duration  int32           `json:"duration"`
		Length    int32           `json:"length"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Thumbnail = tmp.Thumbnail
	entity.Duration = tmp.Duration
	entity.Length = tmp.Length

	fieldVideoNote, _ := UnmarshalInputFile(tmp.VideoNote)
	entity.VideoNote = fieldVideoNote

	return nil
}

// InputMessageVoiceNote a voice note message
type InputMessageVoiceNote struct {
	meta
	// Voice note to be sent
	VoiceNote InputFile `json:"voice_note"`
	// Duration of the voice note, in seconds
	Duration int32 `json:"duration"`
	// Waveform representation of the voice note, in 5-bit format
	Waveform []byte `json:"waveform"`
	// Voice note caption; 0-GetOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
}

// MarshalJSON returns InputMessageVoiceNote object as the JSON encoding of InputMessageVoiceNote.
func (entity *InputMessageVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageVoiceNote) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageVoiceNote) GetType() string {
	return TypeInputMessageVoiceNote
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageVoiceNote) InputMessageContentType() string {
	return TypeInputMessageVoiceNote
}

// UnmarshalJSON sets InputMessageVoiceNote object to a copy of JSON encoding of InputMessageVoiceNote.
func (entity *InputMessageVoiceNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		VoiceNote json.RawMessage `json:"voice_note"`
		Duration  int32           `json:"duration"`
		Waveform  []byte          `json:"waveform"`
		Caption   *FormattedText  `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Duration = tmp.Duration
	entity.Waveform = tmp.Waveform
	entity.Caption = tmp.Caption

	fieldVoiceNote, _ := UnmarshalInputFile(tmp.VoiceNote)
	entity.VoiceNote = fieldVoiceNote

	return nil
}

// InputMessageLocation a message with a location
type InputMessageLocation struct {
	meta
	// Location to be sent
	Location *Location `json:"location"`
	// Period for which the location can be updated, in seconds; should bebetween 60 and 86400 for a live location and 0 otherwise
	LivePeriod int32 `json:"live_period"`
}

// MarshalJSON returns InputMessageLocation object as the JSON encoding of InputMessageLocation.
func (entity *InputMessageLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageLocation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageLocation) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageLocation) GetType() string {
	return TypeInputMessageLocation
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageLocation) InputMessageContentType() string {
	return TypeInputMessageLocation
}

// InputMessageVenue a message with information about a venue
type InputMessageVenue struct {
	meta
	// Venue to send
	Venue *Venue `json:"venue"`
}

// MarshalJSON returns InputMessageVenue object as the JSON encoding of InputMessageVenue.
func (entity *InputMessageVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageVenue

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageVenue) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageVenue) GetType() string {
	return TypeInputMessageVenue
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageVenue) InputMessageContentType() string {
	return TypeInputMessageVenue
}

// InputMessageContact a message containing a user contact
type InputMessageContact struct {
	meta
	// Contact to send
	Contact *Contact `json:"contact"`
}

// MarshalJSON returns InputMessageContact object as the JSON encoding of InputMessageContact.
func (entity *InputMessageContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageContact

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageContact) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageContact) GetType() string {
	return TypeInputMessageContact
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageContact) InputMessageContentType() string {
	return TypeInputMessageContact
}

// InputMessageGame a message with a game; not supported for channels or secret chats
type InputMessageGame struct {
	meta
	// User identifier of the bot that owns the game
	BotUserID int32 `json:"bot_user_id"`
	// Short name of the game
	GameShortName string `json:"game_short_name"`
}

// MarshalJSON returns InputMessageGame object as the JSON encoding of InputMessageGame.
func (entity *InputMessageGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageGame

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageGame) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageGame) GetType() string {
	return TypeInputMessageGame
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageGame) InputMessageContentType() string {
	return TypeInputMessageGame
}

// InputMessageInvoice a message with an invoice; can be used only by bots and only in private chats
type InputMessageInvoice struct {
	meta
	// Invoice
	Invoice *Invoice `json:"invoice"`
	// Product title; 1-32 characters
	Title string `json:"title"`
	// Product description; 0-255 characters
	Description string `json:"description"`
	// Product photo URL; optional
	PhotoURL string `json:"photo_url"`
	// Product photo size
	PhotoSize int32 `json:"photo_size"`
	// Product photo width
	PhotoWidth int32 `json:"photo_width"`
	// Product photo height
	PhotoHeight int32 `json:"photo_height"`
	// The invoice payload
	Payload []byte `json:"payload"`
	// Payment provider token
	ProviderToken string `json:"provider_token"`
	// JSON-encoded data about the invoice, which will be shared with the payment provider
	ProviderData string `json:"provider_data"`
	// Unique invoice bot start_parameter for the generation of this invoice
	StartParameter string `json:"start_parameter"`
}

// MarshalJSON returns InputMessageInvoice object as the JSON encoding of InputMessageInvoice.
func (entity *InputMessageInvoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageInvoice

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageInvoice) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageInvoice) GetType() string {
	return TypeInputMessageInvoice
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageInvoice) InputMessageContentType() string {
	return TypeInputMessageInvoice
}

// InputMessageForwarded a forwarded message
type InputMessageForwarded struct {
	meta
	// Identifier for the chat this forwarded message came from
	FromChatID int64 `json:"from_chat_id"`
	// Identifier of the message to forward
	MessageID int64 `json:"message_id"`
	// True, if a game message should be shared within a launched game; applies only to game messages
	InGameShare bool `json:"in_game_share"`
}

// MarshalJSON returns InputMessageForwarded object as the JSON encoding of InputMessageForwarded.
func (entity *InputMessageForwarded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputMessageForwarded

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputMessageForwarded) GetClass() string {
	return ClassInputMessageContent
}

// GetType returns constant class type string of the class.
func (*InputMessageForwarded) GetType() string {
	return TypeInputMessageForwarded
}

// InputMessageContentType returns constant class type string of the class.
func (*InputMessageForwarded) InputMessageContentType() string {
	return TypeInputMessageForwarded
}

// SearchMessagesFilterEmpty returns all found messages, no filter is applied
type SearchMessagesFilterEmpty struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterEmpty object as the JSON encoding of SearchMessagesFilterEmpty.
func (entity *SearchMessagesFilterEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterEmpty

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterEmpty) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterEmpty) GetType() string {
	return TypeSearchMessagesFilterEmpty
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterEmpty) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterEmpty
}

// SearchMessagesFilterAnimation returns only animation messages
type SearchMessagesFilterAnimation struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterAnimation object as the JSON encoding of SearchMessagesFilterAnimation.
func (entity *SearchMessagesFilterAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterAnimation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterAnimation) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterAnimation) GetType() string {
	return TypeSearchMessagesFilterAnimation
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterAnimation) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterAnimation
}

// SearchMessagesFilterAudio returns only audio messages
type SearchMessagesFilterAudio struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterAudio object as the JSON encoding of SearchMessagesFilterAudio.
func (entity *SearchMessagesFilterAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterAudio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterAudio) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterAudio) GetType() string {
	return TypeSearchMessagesFilterAudio
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterAudio) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterAudio
}

// SearchMessagesFilterDocument returns only document messages
type SearchMessagesFilterDocument struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterDocument object as the JSON encoding of SearchMessagesFilterDocument.
func (entity *SearchMessagesFilterDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterDocument) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterDocument) GetType() string {
	return TypeSearchMessagesFilterDocument
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterDocument) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterDocument
}

// SearchMessagesFilterPhoto returns only photo messages
type SearchMessagesFilterPhoto struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterPhoto object as the JSON encoding of SearchMessagesFilterPhoto.
func (entity *SearchMessagesFilterPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterPhoto) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterPhoto) GetType() string {
	return TypeSearchMessagesFilterPhoto
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterPhoto) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterPhoto
}

// SearchMessagesFilterVideo returns only video messages
type SearchMessagesFilterVideo struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterVideo object as the JSON encoding of SearchMessagesFilterVideo.
func (entity *SearchMessagesFilterVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterVideo) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterVideo) GetType() string {
	return TypeSearchMessagesFilterVideo
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterVideo) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterVideo
}

// SearchMessagesFilterVoiceNote returns only voice note messages
type SearchMessagesFilterVoiceNote struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterVoiceNote object as the JSON encoding of SearchMessagesFilterVoiceNote.
func (entity *SearchMessagesFilterVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterVoiceNote) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterVoiceNote) GetType() string {
	return TypeSearchMessagesFilterVoiceNote
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterVoiceNote) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterVoiceNote
}

// SearchMessagesFilterPhotoAndVideo returns only photo and video messages
type SearchMessagesFilterPhotoAndVideo struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterPhotoAndVideo object as the JSON encoding of SearchMessagesFilterPhotoAndVideo.
func (entity *SearchMessagesFilterPhotoAndVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterPhotoAndVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterPhotoAndVideo) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterPhotoAndVideo) GetType() string {
	return TypeSearchMessagesFilterPhotoAndVideo
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterPhotoAndVideo) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterPhotoAndVideo
}

// SearchMessagesFilterURL returns only messages containing URLs
type SearchMessagesFilterURL struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterURL object as the JSON encoding of SearchMessagesFilterURL.
func (entity *SearchMessagesFilterURL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterURL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterURL) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterURL) GetType() string {
	return TypeSearchMessagesFilterURL
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterURL) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterURL
}

// SearchMessagesFilterChatPhoto returns only messages containing chat photos
type SearchMessagesFilterChatPhoto struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterChatPhoto object as the JSON encoding of SearchMessagesFilterChatPhoto.
func (entity *SearchMessagesFilterChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterChatPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterChatPhoto) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterChatPhoto) GetType() string {
	return TypeSearchMessagesFilterChatPhoto
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterChatPhoto) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterChatPhoto
}

// SearchMessagesFilterCall returns only call messages
type SearchMessagesFilterCall struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterCall object as the JSON encoding of SearchMessagesFilterCall.
func (entity *SearchMessagesFilterCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterCall

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterCall) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterCall) GetType() string {
	return TypeSearchMessagesFilterCall
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterCall) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterCall
}

// SearchMessagesFilterMissedCall returns only incoming call messages with missed/declined discard reasons
type SearchMessagesFilterMissedCall struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterMissedCall object as the JSON encoding of SearchMessagesFilterMissedCall.
func (entity *SearchMessagesFilterMissedCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterMissedCall

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterMissedCall) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterMissedCall) GetType() string {
	return TypeSearchMessagesFilterMissedCall
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterMissedCall) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterMissedCall
}

// SearchMessagesFilterVideoNote returns only video note messages
type SearchMessagesFilterVideoNote struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterVideoNote object as the JSON encoding of SearchMessagesFilterVideoNote.
func (entity *SearchMessagesFilterVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterVideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterVideoNote) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterVideoNote) GetType() string {
	return TypeSearchMessagesFilterVideoNote
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterVideoNote) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterVideoNote
}

// SearchMessagesFilterVoiceAndVideoNote returns only voice and video note messages
type SearchMessagesFilterVoiceAndVideoNote struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterVoiceAndVideoNote object as the JSON encoding of SearchMessagesFilterVoiceAndVideoNote.
func (entity *SearchMessagesFilterVoiceAndVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterVoiceAndVideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterVoiceAndVideoNote) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterVoiceAndVideoNote) GetType() string {
	return TypeSearchMessagesFilterVoiceAndVideoNote
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterVoiceAndVideoNote) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterVoiceAndVideoNote
}

// SearchMessagesFilterMention returns only messages with mentions of the current user, or messages that are replies to their messages
type SearchMessagesFilterMention struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterMention object as the JSON encoding of SearchMessagesFilterMention.
func (entity *SearchMessagesFilterMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterMention

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterMention) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterMention) GetType() string {
	return TypeSearchMessagesFilterMention
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterMention) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterMention
}

// SearchMessagesFilterUnreadMention returns only messages with unread mentions of the current user or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query or by the sending user
type SearchMessagesFilterUnreadMention struct {
	meta
}

// MarshalJSON returns SearchMessagesFilterUnreadMention object as the JSON encoding of SearchMessagesFilterUnreadMention.
func (entity *SearchMessagesFilterUnreadMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub SearchMessagesFilterUnreadMention

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*SearchMessagesFilterUnreadMention) GetClass() string {
	return ClassSearchMessagesFilter
}

// GetType returns constant class type string of the class.
func (*SearchMessagesFilterUnreadMention) GetType() string {
	return TypeSearchMessagesFilterUnreadMention
}

// SearchMessagesFilterType returns constant class type string of the class.
func (*SearchMessagesFilterUnreadMention) SearchMessagesFilterType() string {
	return TypeSearchMessagesFilterUnreadMention
}

// ChatActionTyping the user is typing a message
type ChatActionTyping struct {
	meta
}

// MarshalJSON returns ChatActionTyping object as the JSON encoding of ChatActionTyping.
func (entity *ChatActionTyping) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionTyping

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionTyping) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionTyping) GetType() string {
	return TypeChatActionTyping
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionTyping) ChatActionType() string {
	return TypeChatActionTyping
}

// ChatActionRecordingVideo the user is recording a video
type ChatActionRecordingVideo struct {
	meta
}

// MarshalJSON returns ChatActionRecordingVideo object as the JSON encoding of ChatActionRecordingVideo.
func (entity *ChatActionRecordingVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionRecordingVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionRecordingVideo) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionRecordingVideo) GetType() string {
	return TypeChatActionRecordingVideo
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionRecordingVideo) ChatActionType() string {
	return TypeChatActionRecordingVideo
}

// ChatActionUploadingVideo the user is uploading a video
type ChatActionUploadingVideo struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

// MarshalJSON returns ChatActionUploadingVideo object as the JSON encoding of ChatActionUploadingVideo.
func (entity *ChatActionUploadingVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionUploadingVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionUploadingVideo) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionUploadingVideo) GetType() string {
	return TypeChatActionUploadingVideo
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionUploadingVideo) ChatActionType() string {
	return TypeChatActionUploadingVideo
}

// ChatActionRecordingVoiceNote the user is recording a voice note
type ChatActionRecordingVoiceNote struct {
	meta
}

// MarshalJSON returns ChatActionRecordingVoiceNote object as the JSON encoding of ChatActionRecordingVoiceNote.
func (entity *ChatActionRecordingVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionRecordingVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionRecordingVoiceNote) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionRecordingVoiceNote) GetType() string {
	return TypeChatActionRecordingVoiceNote
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionRecordingVoiceNote) ChatActionType() string {
	return TypeChatActionRecordingVoiceNote
}

// ChatActionUploadingVoiceNote the user is uploading a voice note
type ChatActionUploadingVoiceNote struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

// MarshalJSON returns ChatActionUploadingVoiceNote object as the JSON encoding of ChatActionUploadingVoiceNote.
func (entity *ChatActionUploadingVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionUploadingVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionUploadingVoiceNote) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionUploadingVoiceNote) GetType() string {
	return TypeChatActionUploadingVoiceNote
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionUploadingVoiceNote) ChatActionType() string {
	return TypeChatActionUploadingVoiceNote
}

// ChatActionUploadingPhoto the user is uploading a photo
type ChatActionUploadingPhoto struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

// MarshalJSON returns ChatActionUploadingPhoto object as the JSON encoding of ChatActionUploadingPhoto.
func (entity *ChatActionUploadingPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionUploadingPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionUploadingPhoto) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionUploadingPhoto) GetType() string {
	return TypeChatActionUploadingPhoto
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionUploadingPhoto) ChatActionType() string {
	return TypeChatActionUploadingPhoto
}

// ChatActionUploadingDocument the user is uploading a document
type ChatActionUploadingDocument struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

// MarshalJSON returns ChatActionUploadingDocument object as the JSON encoding of ChatActionUploadingDocument.
func (entity *ChatActionUploadingDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionUploadingDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionUploadingDocument) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionUploadingDocument) GetType() string {
	return TypeChatActionUploadingDocument
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionUploadingDocument) ChatActionType() string {
	return TypeChatActionUploadingDocument
}

// ChatActionChoosingLocation the user is picking a location or venue to send
type ChatActionChoosingLocation struct {
	meta
}

// MarshalJSON returns ChatActionChoosingLocation object as the JSON encoding of ChatActionChoosingLocation.
func (entity *ChatActionChoosingLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionChoosingLocation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionChoosingLocation) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionChoosingLocation) GetType() string {
	return TypeChatActionChoosingLocation
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionChoosingLocation) ChatActionType() string {
	return TypeChatActionChoosingLocation
}

// ChatActionChoosingContact the user is picking a contact to send
type ChatActionChoosingContact struct {
	meta
}

// MarshalJSON returns ChatActionChoosingContact object as the JSON encoding of ChatActionChoosingContact.
func (entity *ChatActionChoosingContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionChoosingContact

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionChoosingContact) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionChoosingContact) GetType() string {
	return TypeChatActionChoosingContact
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionChoosingContact) ChatActionType() string {
	return TypeChatActionChoosingContact
}

// ChatActionStartPlayingGame the user has started to play a game
type ChatActionStartPlayingGame struct {
	meta
}

// MarshalJSON returns ChatActionStartPlayingGame object as the JSON encoding of ChatActionStartPlayingGame.
func (entity *ChatActionStartPlayingGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionStartPlayingGame

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionStartPlayingGame) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionStartPlayingGame) GetType() string {
	return TypeChatActionStartPlayingGame
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionStartPlayingGame) ChatActionType() string {
	return TypeChatActionStartPlayingGame
}

// ChatActionRecordingVideoNote the user is recording a video note
type ChatActionRecordingVideoNote struct {
	meta
}

// MarshalJSON returns ChatActionRecordingVideoNote object as the JSON encoding of ChatActionRecordingVideoNote.
func (entity *ChatActionRecordingVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionRecordingVideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionRecordingVideoNote) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionRecordingVideoNote) GetType() string {
	return TypeChatActionRecordingVideoNote
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionRecordingVideoNote) ChatActionType() string {
	return TypeChatActionRecordingVideoNote
}

// ChatActionUploadingVideoNote the user is uploading a video note
type ChatActionUploadingVideoNote struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

// MarshalJSON returns ChatActionUploadingVideoNote object as the JSON encoding of ChatActionUploadingVideoNote.
func (entity *ChatActionUploadingVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionUploadingVideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionUploadingVideoNote) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionUploadingVideoNote) GetType() string {
	return TypeChatActionUploadingVideoNote
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionUploadingVideoNote) ChatActionType() string {
	return TypeChatActionUploadingVideoNote
}

// ChatActionCancel the user has cancelled the previous action
type ChatActionCancel struct {
	meta
}

// MarshalJSON returns ChatActionCancel object as the JSON encoding of ChatActionCancel.
func (entity *ChatActionCancel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatActionCancel

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatActionCancel) GetClass() string {
	return ClassChatAction
}

// GetType returns constant class type string of the class.
func (*ChatActionCancel) GetType() string {
	return TypeChatActionCancel
}

// ChatActionType returns constant class type string of the class.
func (*ChatActionCancel) ChatActionType() string {
	return TypeChatActionCancel
}

// UserStatusEmpty the user status was never changed
type UserStatusEmpty struct {
	meta
}

// MarshalJSON returns UserStatusEmpty object as the JSON encoding of UserStatusEmpty.
func (entity *UserStatusEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserStatusEmpty

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserStatusEmpty) GetClass() string {
	return ClassUserStatus
}

// GetType returns constant class type string of the class.
func (*UserStatusEmpty) GetType() string {
	return TypeUserStatusEmpty
}

// UserStatusType returns constant class type string of the class.
func (*UserStatusEmpty) UserStatusType() string {
	return TypeUserStatusEmpty
}

// UserStatusOnline the user is online
type UserStatusOnline struct {
	meta
	// Point in time (Unix timestamp) when the user's online status will expire
	Expires int32 `json:"expires"`
}

// MarshalJSON returns UserStatusOnline object as the JSON encoding of UserStatusOnline.
func (entity *UserStatusOnline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserStatusOnline

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserStatusOnline) GetClass() string {
	return ClassUserStatus
}

// GetType returns constant class type string of the class.
func (*UserStatusOnline) GetType() string {
	return TypeUserStatusOnline
}

// UserStatusType returns constant class type string of the class.
func (*UserStatusOnline) UserStatusType() string {
	return TypeUserStatusOnline
}

// UserStatusOffline the user is offline
type UserStatusOffline struct {
	meta
	// Point in time (Unix timestamp) when the user was last online
	WasOnline int32 `json:"was_online"`
}

// MarshalJSON returns UserStatusOffline object as the JSON encoding of UserStatusOffline.
func (entity *UserStatusOffline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserStatusOffline

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserStatusOffline) GetClass() string {
	return ClassUserStatus
}

// GetType returns constant class type string of the class.
func (*UserStatusOffline) GetType() string {
	return TypeUserStatusOffline
}

// UserStatusType returns constant class type string of the class.
func (*UserStatusOffline) UserStatusType() string {
	return TypeUserStatusOffline
}

// UserStatusRecently the user was online recently
type UserStatusRecently struct {
	meta
}

// MarshalJSON returns UserStatusRecently object as the JSON encoding of UserStatusRecently.
func (entity *UserStatusRecently) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserStatusRecently

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserStatusRecently) GetClass() string {
	return ClassUserStatus
}

// GetType returns constant class type string of the class.
func (*UserStatusRecently) GetType() string {
	return TypeUserStatusRecently
}

// UserStatusType returns constant class type string of the class.
func (*UserStatusRecently) UserStatusType() string {
	return TypeUserStatusRecently
}

// UserStatusLastWeek the user is offline, but was online last week
type UserStatusLastWeek struct {
	meta
}

// MarshalJSON returns UserStatusLastWeek object as the JSON encoding of UserStatusLastWeek.
func (entity *UserStatusLastWeek) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserStatusLastWeek

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserStatusLastWeek) GetClass() string {
	return ClassUserStatus
}

// GetType returns constant class type string of the class.
func (*UserStatusLastWeek) GetType() string {
	return TypeUserStatusLastWeek
}

// UserStatusType returns constant class type string of the class.
func (*UserStatusLastWeek) UserStatusType() string {
	return TypeUserStatusLastWeek
}

// UserStatusLastMonth the user is offline, but was online last month
type UserStatusLastMonth struct {
	meta
}

// MarshalJSON returns UserStatusLastMonth object as the JSON encoding of UserStatusLastMonth.
func (entity *UserStatusLastMonth) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserStatusLastMonth

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserStatusLastMonth) GetClass() string {
	return ClassUserStatus
}

// GetType returns constant class type string of the class.
func (*UserStatusLastMonth) GetType() string {
	return TypeUserStatusLastMonth
}

// UserStatusType returns constant class type string of the class.
func (*UserStatusLastMonth) UserStatusType() string {
	return TypeUserStatusLastMonth
}

// Stickers represents a list of stickers
type Stickers struct {
	meta
	// List of stickers
	Stickers []*Sticker `json:"stickers"`
}

// MarshalJSON returns Stickers object as the JSON encoding of Stickers.
func (entity *Stickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Stickers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Stickers) GetClass() string {
	return ClassStickers
}

// GetType returns constant class type string of the class.
func (*Stickers) GetType() string {
	return TypeStickers
}

// StickerEmojis represents a list of all emoji corresponding to a sticker in a sticker set. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object
type StickerEmojis struct {
	meta
	// List of emojis
	Emojis []string `json:"emojis"`
}

// MarshalJSON returns StickerEmojis object as the JSON encoding of StickerEmojis.
func (entity *StickerEmojis) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StickerEmojis

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StickerEmojis) GetClass() string {
	return ClassStickerEmojis
}

// GetType returns constant class type string of the class.
func (*StickerEmojis) GetType() string {
	return TypeStickerEmojis
}

// StickerSet represents a sticker set
type StickerSet struct {
	meta
	// Identifier of the sticker set
	ID Int64JSON `json:"id"`
	// Title of the sticker set
	Title string `json:"title"`
	// Name of the sticker set
	Name string `json:"name"`
	// True, if the sticker set has been installed by the current user
	IsInstalled bool `json:"is_installed"`
	// True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously
	IsArchived bool `json:"is_archived"`
	// True, if the sticker set is official
	IsOfficial bool `json:"is_official"`
	// True, if the stickers in the set are masks
	IsMasks bool `json:"is_masks"`
	// True for already viewed trending sticker sets
	IsViewed bool `json:"is_viewed"`
	// List of stickers in this set
	Stickers []*Sticker `json:"stickers"`
	// A list of emoji corresponding to the stickers in the same order
	Emojis []*StickerEmojis `json:"emojis"`
}

// MarshalJSON returns StickerSet object as the JSON encoding of StickerSet.
func (entity *StickerSet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StickerSet

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StickerSet) GetClass() string {
	return ClassStickerSet
}

// GetType returns constant class type string of the class.
func (*StickerSet) GetType() string {
	return TypeStickerSet
}

// StickerSetInfo represents short information about a sticker set
type StickerSetInfo struct {
	meta
	// Identifier of the sticker set
	ID Int64JSON `json:"id"`
	// Title of the sticker set
	Title string `json:"title"`
	// Name of the sticker set
	Name string `json:"name"`
	// True, if the sticker set has been installed by current user
	IsInstalled bool `json:"is_installed"`
	// True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously
	IsArchived bool `json:"is_archived"`
	// True, if the sticker set is official
	IsOfficial bool `json:"is_official"`
	// True, if the stickers in the set are masks
	IsMasks bool `json:"is_masks"`
	// True for already viewed trending sticker sets
	IsViewed bool `json:"is_viewed"`
	// Total number of stickers in the set
	Size int32 `json:"size"`
	// Contains up to the first 5 stickers from the set, depending on the context. If the client needs more stickers the full set should be requested
	Covers []*Sticker `json:"covers"`
}

// MarshalJSON returns StickerSetInfo object as the JSON encoding of StickerSetInfo.
func (entity *StickerSetInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StickerSetInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StickerSetInfo) GetClass() string {
	return ClassStickerSetInfo
}

// GetType returns constant class type string of the class.
func (*StickerSetInfo) GetType() string {
	return TypeStickerSetInfo
}

// StickerSets represents a list of sticker sets
type StickerSets struct {
	meta
	// Approximate total number of sticker sets found
	TotalCount int32 `json:"total_count"`
	// List of sticker sets
	Sets []*StickerSetInfo `json:"sets"`
}

// MarshalJSON returns StickerSets object as the JSON encoding of StickerSets.
func (entity *StickerSets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StickerSets

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StickerSets) GetClass() string {
	return ClassStickerSets
}

// GetType returns constant class type string of the class.
func (*StickerSets) GetType() string {
	return TypeStickerSets
}

// CallDiscardReasonEmpty the call wasn't discarded, or the reason is unknown
type CallDiscardReasonEmpty struct {
	meta
}

// MarshalJSON returns CallDiscardReasonEmpty object as the JSON encoding of CallDiscardReasonEmpty.
func (entity *CallDiscardReasonEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallDiscardReasonEmpty

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallDiscardReasonEmpty) GetClass() string {
	return ClassCallDiscardReason
}

// GetType returns constant class type string of the class.
func (*CallDiscardReasonEmpty) GetType() string {
	return TypeCallDiscardReasonEmpty
}

// CallDiscardReasonType returns constant class type string of the class.
func (*CallDiscardReasonEmpty) CallDiscardReasonType() string {
	return TypeCallDiscardReasonEmpty
}

// CallDiscardReasonMissed the call was ended before the conversation started. It was cancelled by the caller or missed by the other party
type CallDiscardReasonMissed struct {
	meta
}

// MarshalJSON returns CallDiscardReasonMissed object as the JSON encoding of CallDiscardReasonMissed.
func (entity *CallDiscardReasonMissed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallDiscardReasonMissed

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallDiscardReasonMissed) GetClass() string {
	return ClassCallDiscardReason
}

// GetType returns constant class type string of the class.
func (*CallDiscardReasonMissed) GetType() string {
	return TypeCallDiscardReasonMissed
}

// CallDiscardReasonType returns constant class type string of the class.
func (*CallDiscardReasonMissed) CallDiscardReasonType() string {
	return TypeCallDiscardReasonMissed
}

// CallDiscardReasonDeclined the call was ended before the conversation started. It was declined by the other party
type CallDiscardReasonDeclined struct {
	meta
}

// MarshalJSON returns CallDiscardReasonDeclined object as the JSON encoding of CallDiscardReasonDeclined.
func (entity *CallDiscardReasonDeclined) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallDiscardReasonDeclined

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallDiscardReasonDeclined) GetClass() string {
	return ClassCallDiscardReason
}

// GetType returns constant class type string of the class.
func (*CallDiscardReasonDeclined) GetType() string {
	return TypeCallDiscardReasonDeclined
}

// CallDiscardReasonType returns constant class type string of the class.
func (*CallDiscardReasonDeclined) CallDiscardReasonType() string {
	return TypeCallDiscardReasonDeclined
}

// CallDiscardReasonDisconnected the call was ended during the conversation because the users were disconnected
type CallDiscardReasonDisconnected struct {
	meta
}

// MarshalJSON returns CallDiscardReasonDisconnected object as the JSON encoding of CallDiscardReasonDisconnected.
func (entity *CallDiscardReasonDisconnected) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallDiscardReasonDisconnected

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallDiscardReasonDisconnected) GetClass() string {
	return ClassCallDiscardReason
}

// GetType returns constant class type string of the class.
func (*CallDiscardReasonDisconnected) GetType() string {
	return TypeCallDiscardReasonDisconnected
}

// CallDiscardReasonType returns constant class type string of the class.
func (*CallDiscardReasonDisconnected) CallDiscardReasonType() string {
	return TypeCallDiscardReasonDisconnected
}

// CallDiscardReasonHungUp the call was ended because one of the parties hung up
type CallDiscardReasonHungUp struct {
	meta
}

// MarshalJSON returns CallDiscardReasonHungUp object as the JSON encoding of CallDiscardReasonHungUp.
func (entity *CallDiscardReasonHungUp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallDiscardReasonHungUp

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallDiscardReasonHungUp) GetClass() string {
	return ClassCallDiscardReason
}

// GetType returns constant class type string of the class.
func (*CallDiscardReasonHungUp) GetType() string {
	return TypeCallDiscardReasonHungUp
}

// CallDiscardReasonType returns constant class type string of the class.
func (*CallDiscardReasonHungUp) CallDiscardReasonType() string {
	return TypeCallDiscardReasonHungUp
}

// CallProtocol specifies the supported call protocols
type CallProtocol struct {
	meta
	// True, if UDP peer-to-peer connections are supported
	UDPP2p bool `json:"udp_p2p"`
	// True, if connection through UDP reflectors is supported
	UDPReflector bool `json:"udp_reflector"`
	// Minimum supported API layer; use 65
	MinLayer int32 `json:"min_layer"`
	// Maximum supported API layer; use 65
	MaxLayer int32 `json:"max_layer"`
}

// MarshalJSON returns CallProtocol object as the JSON encoding of CallProtocol.
func (entity *CallProtocol) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallProtocol

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallProtocol) GetClass() string {
	return ClassCallProtocol
}

// GetType returns constant class type string of the class.
func (*CallProtocol) GetType() string {
	return TypeCallProtocol
}

// CallConnection describes the address of UDP reflectors
type CallConnection struct {
	meta
	// Reflector identifier
	ID Int64JSON `json:"id"`
	// IPv4 reflector address
	IP string `json:"ip"`
	// IPv6 reflector address
	IPv6 string `json:"ipv6"`
	// Reflector port number
	Port int32 `json:"port"`
	// Connection peer tag
	PeerTag []byte `json:"peer_tag"`
}

// MarshalJSON returns CallConnection object as the JSON encoding of CallConnection.
func (entity *CallConnection) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallConnection

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallConnection) GetClass() string {
	return ClassCallConnection
}

// GetType returns constant class type string of the class.
func (*CallConnection) GetType() string {
	return TypeCallConnection
}

// CallID contains the call identifier
type CallID struct {
	meta
	// Call identifier
	ID int32 `json:"id"`
}

// MarshalJSON returns CallID object as the JSON encoding of CallID.
func (entity *CallID) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallID

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallID) GetClass() string {
	return ClassCallID
}

// GetType returns constant class type string of the class.
func (*CallID) GetType() string {
	return TypeCallID
}

// CallStatePending the call is pending, waiting to be accepted by a user
type CallStatePending struct {
	meta
	// True, if the call has already been created by the server
	IsCreated bool `json:"is_created"`
	// True, if the call has already been received by the other party
	IsReceived bool `json:"is_received"`
}

// MarshalJSON returns CallStatePending object as the JSON encoding of CallStatePending.
func (entity *CallStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallStatePending

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallStatePending) GetClass() string {
	return ClassCallState
}

// GetType returns constant class type string of the class.
func (*CallStatePending) GetType() string {
	return TypeCallStatePending
}

// CallStateType returns constant class type string of the class.
func (*CallStatePending) CallStateType() string {
	return TypeCallStatePending
}

// CallStateExchangingKeys the call has been answered and encryption keys are being exchanged
type CallStateExchangingKeys struct {
	meta
}

// MarshalJSON returns CallStateExchangingKeys object as the JSON encoding of CallStateExchangingKeys.
func (entity *CallStateExchangingKeys) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallStateExchangingKeys

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallStateExchangingKeys) GetClass() string {
	return ClassCallState
}

// GetType returns constant class type string of the class.
func (*CallStateExchangingKeys) GetType() string {
	return TypeCallStateExchangingKeys
}

// CallStateType returns constant class type string of the class.
func (*CallStateExchangingKeys) CallStateType() string {
	return TypeCallStateExchangingKeys
}

// CallStateReady the call is ready to use
type CallStateReady struct {
	meta
	// Call protocols supported by the peer
	Protocol *CallProtocol `json:"protocol"`
	// Available UDP reflectors
	Connections []*CallConnection `json:"connections"`
	// A JSON-encoded call config
	Config string `json:"config"`
	// Call encryption key
	EncryptionKey []byte `json:"encryption_key"`
	// Encryption key emojis fingerprint
	Emojis []string `json:"emojis"`
}

// MarshalJSON returns CallStateReady object as the JSON encoding of CallStateReady.
func (entity *CallStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallStateReady

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallStateReady) GetClass() string {
	return ClassCallState
}

// GetType returns constant class type string of the class.
func (*CallStateReady) GetType() string {
	return TypeCallStateReady
}

// CallStateType returns constant class type string of the class.
func (*CallStateReady) CallStateType() string {
	return TypeCallStateReady
}

// CallStateHangingUp the call is hanging up after discardCall has been called
type CallStateHangingUp struct {
	meta
}

// MarshalJSON returns CallStateHangingUp object as the JSON encoding of CallStateHangingUp.
func (entity *CallStateHangingUp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallStateHangingUp

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallStateHangingUp) GetClass() string {
	return ClassCallState
}

// GetType returns constant class type string of the class.
func (*CallStateHangingUp) GetType() string {
	return TypeCallStateHangingUp
}

// CallStateType returns constant class type string of the class.
func (*CallStateHangingUp) CallStateType() string {
	return TypeCallStateHangingUp
}

// CallStateDiscarded the call has ended successfully
type CallStateDiscarded struct {
	meta
	// The reason, why the call has ended
	Reason CallDiscardReason `json:"reason"`
	// True, if the call rating should be sent to the server
	NeedRating bool `json:"need_rating"`
	// True, if the call debug information should be sent to the server
	NeedDebugInformation bool `json:"need_debug_information"`
}

// MarshalJSON returns CallStateDiscarded object as the JSON encoding of CallStateDiscarded.
func (entity *CallStateDiscarded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallStateDiscarded

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallStateDiscarded) GetClass() string {
	return ClassCallState
}

// GetType returns constant class type string of the class.
func (*CallStateDiscarded) GetType() string {
	return TypeCallStateDiscarded
}

// CallStateType returns constant class type string of the class.
func (*CallStateDiscarded) CallStateType() string {
	return TypeCallStateDiscarded
}

// UnmarshalJSON sets CallStateDiscarded object to a copy of JSON encoding of CallStateDiscarded.
func (entity *CallStateDiscarded) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Reason               json.RawMessage `json:"reason"`
		NeedRating           bool            `json:"need_rating"`
		NeedDebugInformation bool            `json:"need_debug_information"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.NeedRating = tmp.NeedRating
	entity.NeedDebugInformation = tmp.NeedDebugInformation

	fieldReason, _ := UnmarshalCallDiscardReason(tmp.Reason)
	entity.Reason = fieldReason

	return nil
}

// CallStateError the call has ended with an error
type CallStateError struct {
	meta
	// Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout
	Error *Error `json:"error"`
}

// MarshalJSON returns CallStateError object as the JSON encoding of CallStateError.
func (entity *CallStateError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallStateError

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallStateError) GetClass() string {
	return ClassCallState
}

// GetType returns constant class type string of the class.
func (*CallStateError) GetType() string {
	return TypeCallStateError
}

// CallStateType returns constant class type string of the class.
func (*CallStateError) CallStateType() string {
	return TypeCallStateError
}

// Call describes a call
type Call struct {
	meta
	// Call identifier, not persistent
	ID int32 `json:"id"`
	// Peer user identifier
	UserID int32 `json:"user_id"`
	// True, if the call is outgoing
	IsOutgoing bool `json:"is_outgoing"`
	// Call state
	State CallState `json:"state"`
}

// MarshalJSON returns Call object as the JSON encoding of Call.
func (entity *Call) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Call

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Call) GetClass() string {
	return ClassCall
}

// GetType returns constant class type string of the class.
func (*Call) GetType() string {
	return TypeCall
}

// UnmarshalJSON sets Call object to a copy of JSON encoding of Call.
func (entity *Call) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID         int32           `json:"id"`
		UserID     int32           `json:"user_id"`
		IsOutgoing bool            `json:"is_outgoing"`
		State      json.RawMessage `json:"state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.UserID = tmp.UserID
	entity.IsOutgoing = tmp.IsOutgoing

	fieldState, _ := UnmarshalCallState(tmp.State)
	entity.State = fieldState

	return nil
}

// Animations represents a list of animations
type Animations struct {
	meta
	// List of animations
	Animations []*Animation `json:"animations"`
}

// MarshalJSON returns Animations object as the JSON encoding of Animations.
func (entity *Animations) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Animations

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Animations) GetClass() string {
	return ClassAnimations
}

// GetType returns constant class type string of the class.
func (*Animations) GetType() string {
	return TypeAnimations
}

// ImportedContacts represents the result of an ImportContacts request
type ImportedContacts struct {
	meta
	// User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user
	UserIDs []int32 `json:"user_ids"`
	// The number of users that imported the corresponding contact; 0 for already registered users or if unavailable
	ImporterCount []int32 `json:"importer_count"`
}

// MarshalJSON returns ImportedContacts object as the JSON encoding of ImportedContacts.
func (entity *ImportedContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ImportedContacts

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ImportedContacts) GetClass() string {
	return ClassImportedContacts
}

// GetType returns constant class type string of the class.
func (*ImportedContacts) GetType() string {
	return TypeImportedContacts
}

// InputInlineQueryResultAnimatedGif represents a link to an animated GIF
type InputInlineQueryResultAnimatedGif struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Title of the query result
	Title string `json:"title"`
	// URL of the static result thumbnail (JPEG or GIF), if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// The URL of the GIF-file (file size must not exceed 1MB)
	GifURL string `json:"gif_url"`
	// Duration of the GIF, in seconds
	GifDuration int32 `json:"gif_duration"`
	// Width of the GIF
	GifWidth int32 `json:"gif_width"`
	// Height of the GIF
	GifHeight int32 `json:"gif_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultAnimatedGif object as the JSON encoding of InputInlineQueryResultAnimatedGif.
func (entity *InputInlineQueryResultAnimatedGif) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultAnimatedGif

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultAnimatedGif) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultAnimatedGif) GetType() string {
	return TypeInputInlineQueryResultAnimatedGif
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultAnimatedGif) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultAnimatedGif
}

// UnmarshalJSON sets InputInlineQueryResultAnimatedGif object to a copy of JSON encoding of InputInlineQueryResultAnimatedGif.
func (entity *InputInlineQueryResultAnimatedGif) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Title               string          `json:"title"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		GifURL              string          `json:"gif_url"`
		GifDuration         int32           `json:"gif_duration"`
		GifWidth            int32           `json:"gif_width"`
		GifHeight           int32           `json:"gif_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.GifURL = tmp.GifURL
	entity.GifDuration = tmp.GifDuration
	entity.GifWidth = tmp.GifWidth
	entity.GifHeight = tmp.GifHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultAnimatedMpeg4 represents a link to an animated (i.e. without sound) H.264/MPEG-4 AVC video
type InputInlineQueryResultAnimatedMpeg4 struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Title of the result
	Title string `json:"title"`
	// URL of the static result thumbnail (JPEG or GIF), if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// The URL of the MPEG4-file (file size must not exceed 1MB)
	Mpeg4URL string `json:"mpeg4_url"`
	// Duration of the video, in seconds
	Mpeg4Duration int32 `json:"mpeg4_duration"`
	// Width of the video
	Mpeg4Width int32 `json:"mpeg4_width"`
	// Height of the video
	Mpeg4Height int32 `json:"mpeg4_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultAnimatedMpeg4 object as the JSON encoding of InputInlineQueryResultAnimatedMpeg4.
func (entity *InputInlineQueryResultAnimatedMpeg4) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultAnimatedMpeg4

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultAnimatedMpeg4) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultAnimatedMpeg4) GetType() string {
	return TypeInputInlineQueryResultAnimatedMpeg4
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultAnimatedMpeg4) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultAnimatedMpeg4
}

// UnmarshalJSON sets InputInlineQueryResultAnimatedMpeg4 object to a copy of JSON encoding of InputInlineQueryResultAnimatedMpeg4.
func (entity *InputInlineQueryResultAnimatedMpeg4) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Title               string          `json:"title"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		Mpeg4URL            string          `json:"mpeg4_url"`
		Mpeg4Duration       int32           `json:"mpeg4_duration"`
		Mpeg4Width          int32           `json:"mpeg4_width"`
		Mpeg4Height         int32           `json:"mpeg4_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.Mpeg4URL = tmp.Mpeg4URL
	entity.Mpeg4Duration = tmp.Mpeg4Duration
	entity.Mpeg4Width = tmp.Mpeg4Width
	entity.Mpeg4Height = tmp.Mpeg4Height

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultArticle represents a link to an article or web page
type InputInlineQueryResultArticle struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// URL of the result, if it exists
	URL string `json:"url"`
	// True, if the URL must be not shown
	HideURL bool `json:"hide_url"`
	// Title of the result
	Title string `json:"title"`
	// A short description of the result
	Description string `json:"description"`
	// URL of the result thumbnail, if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultArticle object as the JSON encoding of InputInlineQueryResultArticle.
func (entity *InputInlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultArticle

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultArticle) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultArticle) GetType() string {
	return TypeInputInlineQueryResultArticle
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultArticle) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultArticle
}

// UnmarshalJSON sets InputInlineQueryResultArticle object to a copy of JSON encoding of InputInlineQueryResultArticle.
func (entity *InputInlineQueryResultArticle) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		URL                 string          `json:"url"`
		HideURL             bool            `json:"hide_url"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.URL = tmp.URL
	entity.HideURL = tmp.HideURL
	entity.Title = tmp.Title
	entity.Description = tmp.Description
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.ThumbnailWidth = tmp.ThumbnailWidth
	entity.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultAudio represents a link to an MP3 audio file
type InputInlineQueryResultAudio struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Title of the audio file
	Title string `json:"title"`
	// Performer of the audio file
	Performer string `json:"performer"`
	// The URL of the audio file
	AudioURL string `json:"audio_url"`
	// Audio file duration, in seconds
	AudioDuration int32 `json:"audio_duration"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAudio, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultAudio object as the JSON encoding of InputInlineQueryResultAudio.
func (entity *InputInlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultAudio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultAudio) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultAudio) GetType() string {
	return TypeInputInlineQueryResultAudio
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultAudio) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultAudio
}

// UnmarshalJSON sets InputInlineQueryResultAudio object to a copy of JSON encoding of InputInlineQueryResultAudio.
func (entity *InputInlineQueryResultAudio) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Title               string          `json:"title"`
		Performer           string          `json:"performer"`
		AudioURL            string          `json:"audio_url"`
		AudioDuration       int32           `json:"audio_duration"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.Performer = tmp.Performer
	entity.AudioURL = tmp.AudioURL
	entity.AudioDuration = tmp.AudioDuration

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultContact represents a user contact
type InputInlineQueryResultContact struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// User contact
	Contact *Contact `json:"contact"`
	// URL of the result thumbnail, if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultContact object as the JSON encoding of InputInlineQueryResultContact.
func (entity *InputInlineQueryResultContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultContact

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultContact) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultContact) GetType() string {
	return TypeInputInlineQueryResultContact
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultContact) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultContact
}

// UnmarshalJSON sets InputInlineQueryResultContact object to a copy of JSON encoding of InputInlineQueryResultContact.
func (entity *InputInlineQueryResultContact) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Contact             *Contact        `json:"contact"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Contact = tmp.Contact
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.ThumbnailWidth = tmp.ThumbnailWidth
	entity.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultDocument represents a link to a file
type InputInlineQueryResultDocument struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Title of the resulting file
	Title string `json:"title"`
	// Short description of the result, if known
	Description string `json:"description"`
	// URL of the file
	DocumentURL string `json:"document_url"`
	// MIME type of the file content; only "application/pdf" and "application/zip" are currently allowed
	MimeType string `json:"mime_type"`
	// The URL of the file thumbnail, if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// Width of the thumbnail
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Height of the thumbnail
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageDocument, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultDocument object as the JSON encoding of InputInlineQueryResultDocument.
func (entity *InputInlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultDocument) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultDocument) GetType() string {
	return TypeInputInlineQueryResultDocument
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultDocument) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultDocument
}

// UnmarshalJSON sets InputInlineQueryResultDocument object to a copy of JSON encoding of InputInlineQueryResultDocument.
func (entity *InputInlineQueryResultDocument) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		DocumentURL         string          `json:"document_url"`
		MimeType            string          `json:"mime_type"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.Description = tmp.Description
	entity.DocumentURL = tmp.DocumentURL
	entity.MimeType = tmp.MimeType
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.ThumbnailWidth = tmp.ThumbnailWidth
	entity.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultGame represents a game
type InputInlineQueryResultGame struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Short name of the game
	GameShortName string `json:"game_short_name"`
	// Message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

// MarshalJSON returns InputInlineQueryResultGame object as the JSON encoding of InputInlineQueryResultGame.
func (entity *InputInlineQueryResultGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultGame

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultGame) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultGame) GetType() string {
	return TypeInputInlineQueryResultGame
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultGame) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultGame
}

// UnmarshalJSON sets InputInlineQueryResultGame object to a copy of JSON encoding of InputInlineQueryResultGame.
func (entity *InputInlineQueryResultGame) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID            string          `json:"id"`
		GameShortName string          `json:"game_short_name"`
		ReplyMarkup   json.RawMessage `json:"reply_markup"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.GameShortName = tmp.GameShortName

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	return nil
}

// InputInlineQueryResultLocation represents a point on the map
type InputInlineQueryResultLocation struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Location result
	Location *Location `json:"location"`
	// Amount of time relative to the message sent time until the location can be updated, in seconds
	LivePeriod int32 `json:"live_period"`
	// Title of the result
	Title string `json:"title"`
	// URL of the result thumbnail, if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultLocation object as the JSON encoding of InputInlineQueryResultLocation.
func (entity *InputInlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultLocation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultLocation) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultLocation) GetType() string {
	return TypeInputInlineQueryResultLocation
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultLocation) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultLocation
}

// UnmarshalJSON sets InputInlineQueryResultLocation object to a copy of JSON encoding of InputInlineQueryResultLocation.
func (entity *InputInlineQueryResultLocation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Location            *Location       `json:"location"`
		LivePeriod          int32           `json:"live_period"`
		Title               string          `json:"title"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Location = tmp.Location
	entity.LivePeriod = tmp.LivePeriod
	entity.Title = tmp.Title
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.ThumbnailWidth = tmp.ThumbnailWidth
	entity.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultPhoto represents link to a JPEG image
type InputInlineQueryResultPhoto struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Title of the result, if known
	Title string `json:"title"`
	// A short description of the result, if known
	Description string `json:"description"`
	// URL of the photo thumbnail, if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// The URL of the JPEG photo (photo size must not exceed 5MB)
	PhotoURL string `json:"photo_url"`
	// Width of the photo
	PhotoWidth int32 `json:"photo_width"`
	// Height of the photo
	PhotoHeight int32 `json:"photo_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessagePhoto, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultPhoto object as the JSON encoding of InputInlineQueryResultPhoto.
func (entity *InputInlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultPhoto) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultPhoto) GetType() string {
	return TypeInputInlineQueryResultPhoto
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultPhoto) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultPhoto
}

// UnmarshalJSON sets InputInlineQueryResultPhoto object to a copy of JSON encoding of InputInlineQueryResultPhoto.
func (entity *InputInlineQueryResultPhoto) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		PhotoURL            string          `json:"photo_url"`
		PhotoWidth          int32           `json:"photo_width"`
		PhotoHeight         int32           `json:"photo_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.Description = tmp.Description
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.PhotoURL = tmp.PhotoURL
	entity.PhotoWidth = tmp.PhotoWidth
	entity.PhotoHeight = tmp.PhotoHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultSticker represents a link to a WEBP sticker
type InputInlineQueryResultSticker struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// URL of the sticker thumbnail, if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// The URL of the WEBP sticker (sticker file size must not exceed 5MB)
	StickerURL string `json:"sticker_url"`
	// Width of the sticker
	StickerWidth int32 `json:"sticker_width"`
	// Height of the sticker
	StickerHeight int32 `json:"sticker_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, inputMessageSticker, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultSticker object as the JSON encoding of InputInlineQueryResultSticker.
func (entity *InputInlineQueryResultSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultSticker

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultSticker) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultSticker) GetType() string {
	return TypeInputInlineQueryResultSticker
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultSticker) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultSticker
}

// UnmarshalJSON sets InputInlineQueryResultSticker object to a copy of JSON encoding of InputInlineQueryResultSticker.
func (entity *InputInlineQueryResultSticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		StickerURL          string          `json:"sticker_url"`
		StickerWidth        int32           `json:"sticker_width"`
		StickerHeight       int32           `json:"sticker_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.StickerURL = tmp.StickerURL
	entity.StickerWidth = tmp.StickerWidth
	entity.StickerHeight = tmp.StickerHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultVenue represents information about a venue
type InputInlineQueryResultVenue struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Venue result
	Venue *Venue `json:"venue"`
	// URL of the result thumbnail, if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultVenue object as the JSON encoding of InputInlineQueryResultVenue.
func (entity *InputInlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultVenue

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultVenue) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultVenue) GetType() string {
	return TypeInputInlineQueryResultVenue
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultVenue) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultVenue
}

// UnmarshalJSON sets InputInlineQueryResultVenue object to a copy of JSON encoding of InputInlineQueryResultVenue.
func (entity *InputInlineQueryResultVenue) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Venue               *Venue          `json:"venue"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Venue = tmp.Venue
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.ThumbnailWidth = tmp.ThumbnailWidth
	entity.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultVideo represents a link to a page containing an embedded video player or a video file
type InputInlineQueryResultVideo struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Title of the result
	Title string `json:"title"`
	// A short description of the result, if known
	Description string `json:"description"`
	// The URL of the video thumbnail (JPEG), if it exists
	ThumbnailURL string `json:"thumbnail_url"`
	// URL of the embedded video player or video file
	VideoURL string `json:"video_url"`
	// MIME type of the content of the video URL, only "text/html" or "video/mp4" are currently supported
	MimeType string `json:"mime_type"`
	// Width of the video
	VideoWidth int32 `json:"video_width"`
	// Height of the video
	VideoHeight int32 `json:"video_height"`
	// Video duration, in seconds
	VideoDuration int32 `json:"video_duration"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVideo, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultVideo object as the JSON encoding of InputInlineQueryResultVideo.
func (entity *InputInlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultVideo) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultVideo) GetType() string {
	return TypeInputInlineQueryResultVideo
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultVideo) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultVideo
}

// UnmarshalJSON sets InputInlineQueryResultVideo object to a copy of JSON encoding of InputInlineQueryResultVideo.
func (entity *InputInlineQueryResultVideo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		ThumbnailURL        string          `json:"thumbnail_url"`
		VideoURL            string          `json:"video_url"`
		MimeType            string          `json:"mime_type"`
		VideoWidth          int32           `json:"video_width"`
		VideoHeight         int32           `json:"video_height"`
		VideoDuration       int32           `json:"video_duration"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.Description = tmp.Description
	entity.ThumbnailURL = tmp.ThumbnailURL
	entity.VideoURL = tmp.VideoURL
	entity.MimeType = tmp.MimeType
	entity.VideoWidth = tmp.VideoWidth
	entity.VideoHeight = tmp.VideoHeight
	entity.VideoDuration = tmp.VideoDuration

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InputInlineQueryResultVoiceNote represents a link to an opus-encoded audio file within an OGG container, single channel audio
type InputInlineQueryResultVoiceNote struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Title of the voice note
	Title string `json:"title"`
	// The URL of the voice note file
	VoiceNoteURL string `json:"voice_note_url"`
	// Duration of the voice note, in seconds
	VoiceNoteDuration int32 `json:"voice_note_duration"`
	// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVoiceNote, InputMessageLocation, InputMessageVenue or InputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

// MarshalJSON returns InputInlineQueryResultVoiceNote object as the JSON encoding of InputInlineQueryResultVoiceNote.
func (entity *InputInlineQueryResultVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputInlineQueryResultVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputInlineQueryResultVoiceNote) GetClass() string {
	return ClassInputInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InputInlineQueryResultVoiceNote) GetType() string {
	return TypeInputInlineQueryResultVoiceNote
}

// InputInlineQueryResultType returns constant class type string of the class.
func (*InputInlineQueryResultVoiceNote) InputInlineQueryResultType() string {
	return TypeInputInlineQueryResultVoiceNote
}

// UnmarshalJSON sets InputInlineQueryResultVoiceNote object to a copy of JSON encoding of InputInlineQueryResultVoiceNote.
func (entity *InputInlineQueryResultVoiceNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID                  string          `json:"id"`
		Title               string          `json:"title"`
		VoiceNoteURL        string          `json:"voice_note_url"`
		VoiceNoteDuration   int32           `json:"voice_note_duration"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Title = tmp.Title
	entity.VoiceNoteURL = tmp.VoiceNoteURL
	entity.VoiceNoteDuration = tmp.VoiceNoteDuration

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	entity.InputMessageContent = fieldInputMessageContent

	return nil
}

// InlineQueryResultArticle represents a link to an article or web page
type InlineQueryResultArticle struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// URL of the result, if it exists
	URL string `json:"url"`
	// True, if the URL must be not shown
	HideURL bool `json:"hide_url"`
	// Title of the result
	Title string `json:"title"`
	// A short description of the result
	Description string `json:"description"`
	// Result thumbnail; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
}

// MarshalJSON returns InlineQueryResultArticle object as the JSON encoding of InlineQueryResultArticle.
func (entity *InlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultArticle

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultArticle) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultArticle) GetType() string {
	return TypeInlineQueryResultArticle
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultArticle) InlineQueryResultType() string {
	return TypeInlineQueryResultArticle
}

// InlineQueryResultContact represents a user contact
type InlineQueryResultContact struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// A user contact
	Contact *Contact `json:"contact"`
	// Result thumbnail; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
}

// MarshalJSON returns InlineQueryResultContact object as the JSON encoding of InlineQueryResultContact.
func (entity *InlineQueryResultContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultContact

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultContact) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultContact) GetType() string {
	return TypeInlineQueryResultContact
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultContact) InlineQueryResultType() string {
	return TypeInlineQueryResultContact
}

// InlineQueryResultLocation represents a point on the map
type InlineQueryResultLocation struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Location result
	Location *Location `json:"location"`
	// Title of the result
	Title string `json:"title"`
	// Result thumbnail; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
}

// MarshalJSON returns InlineQueryResultLocation object as the JSON encoding of InlineQueryResultLocation.
func (entity *InlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultLocation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultLocation) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultLocation) GetType() string {
	return TypeInlineQueryResultLocation
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultLocation) InlineQueryResultType() string {
	return TypeInlineQueryResultLocation
}

// InlineQueryResultVenue represents information about a venue
type InlineQueryResultVenue struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Venue result
	Venue *Venue `json:"venue"`
	// Result thumbnail; may be null
	Thumbnail *PhotoSize `json:"thumbnail"`
}

// MarshalJSON returns InlineQueryResultVenue object as the JSON encoding of InlineQueryResultVenue.
func (entity *InlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultVenue

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultVenue) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultVenue) GetType() string {
	return TypeInlineQueryResultVenue
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultVenue) InlineQueryResultType() string {
	return TypeInlineQueryResultVenue
}

// InlineQueryResultGame represents information about a game
type InlineQueryResultGame struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Game result
	Game *Game `json:"game"`
}

// MarshalJSON returns InlineQueryResultGame object as the JSON encoding of InlineQueryResultGame.
func (entity *InlineQueryResultGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultGame

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultGame) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultGame) GetType() string {
	return TypeInlineQueryResultGame
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultGame) InlineQueryResultType() string {
	return TypeInlineQueryResultGame
}

// InlineQueryResultAnimation represents an animation file
type InlineQueryResultAnimation struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Animation file
	Animation *Animation `json:"animation"`
	// Animation title
	Title string `json:"title"`
}

// MarshalJSON returns InlineQueryResultAnimation object as the JSON encoding of InlineQueryResultAnimation.
func (entity *InlineQueryResultAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultAnimation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultAnimation) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultAnimation) GetType() string {
	return TypeInlineQueryResultAnimation
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultAnimation) InlineQueryResultType() string {
	return TypeInlineQueryResultAnimation
}

// InlineQueryResultAudio represents an audio file
type InlineQueryResultAudio struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Audio file
	Audio *Audio `json:"audio"`
}

// MarshalJSON returns InlineQueryResultAudio object as the JSON encoding of InlineQueryResultAudio.
func (entity *InlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultAudio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultAudio) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultAudio) GetType() string {
	return TypeInlineQueryResultAudio
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultAudio) InlineQueryResultType() string {
	return TypeInlineQueryResultAudio
}

// InlineQueryResultDocument represents a document
type InlineQueryResultDocument struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Document
	Document *Document `json:"document"`
	// Document title
	Title string `json:"title"`
	// Document description
	Description string `json:"description"`
}

// MarshalJSON returns InlineQueryResultDocument object as the JSON encoding of InlineQueryResultDocument.
func (entity *InlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultDocument) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultDocument) GetType() string {
	return TypeInlineQueryResultDocument
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultDocument) InlineQueryResultType() string {
	return TypeInlineQueryResultDocument
}

// InlineQueryResultPhoto represents a photo
type InlineQueryResultPhoto struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Photo
	Photo *Photo `json:"photo"`
	// Title of the result, if known
	Title string `json:"title"`
	// A short description of the result, if known
	Description string `json:"description"`
}

// MarshalJSON returns InlineQueryResultPhoto object as the JSON encoding of InlineQueryResultPhoto.
func (entity *InlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultPhoto) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultPhoto) GetType() string {
	return TypeInlineQueryResultPhoto
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultPhoto) InlineQueryResultType() string {
	return TypeInlineQueryResultPhoto
}

// InlineQueryResultSticker represents a sticker
type InlineQueryResultSticker struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Sticker
	Sticker *Sticker `json:"sticker"`
}

// MarshalJSON returns InlineQueryResultSticker object as the JSON encoding of InlineQueryResultSticker.
func (entity *InlineQueryResultSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultSticker

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultSticker) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultSticker) GetType() string {
	return TypeInlineQueryResultSticker
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultSticker) InlineQueryResultType() string {
	return TypeInlineQueryResultSticker
}

// InlineQueryResultVideo represents a video
type InlineQueryResultVideo struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Video
	Video *Video `json:"video"`
	// Title of the video
	Title string `json:"title"`
	// Description of the video
	Description string `json:"description"`
}

// MarshalJSON returns InlineQueryResultVideo object as the JSON encoding of InlineQueryResultVideo.
func (entity *InlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultVideo) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultVideo) GetType() string {
	return TypeInlineQueryResultVideo
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultVideo) InlineQueryResultType() string {
	return TypeInlineQueryResultVideo
}

// InlineQueryResultVoiceNote represents a voice note
type InlineQueryResultVoiceNote struct {
	meta
	// Unique identifier of the query result
	ID string `json:"id"`
	// Voice note
	VoiceNote *VoiceNote `json:"voice_note"`
	// Title of the voice note
	Title string `json:"title"`
}

// MarshalJSON returns InlineQueryResultVoiceNote object as the JSON encoding of InlineQueryResultVoiceNote.
func (entity *InlineQueryResultVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResultVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResultVoiceNote) GetClass() string {
	return ClassInlineQueryResult
}

// GetType returns constant class type string of the class.
func (*InlineQueryResultVoiceNote) GetType() string {
	return TypeInlineQueryResultVoiceNote
}

// InlineQueryResultType returns constant class type string of the class.
func (*InlineQueryResultVoiceNote) InlineQueryResultType() string {
	return TypeInlineQueryResultVoiceNote
}

// InlineQueryResults represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query
type InlineQueryResults struct {
	meta
	// Unique identifier of the inline query
	InlineQueryID Int64JSON `json:"inline_query_id"`
	// The offset for the next request. If empty, there are no more results
	NextOffset string `json:"next_offset"`
	// Results of the query
	Results []InlineQueryResult `json:"results"`
	// If non-empty, this text should be shown on the button, which opens a private chat with the bot and sends the bot a start message with the switch_pm_parameter
	SwitchPmText string `json:"switch_pm_text"`
	// Parameter for the bot start message
	SwitchPmParameter string `json:"switch_pm_parameter"`
}

// MarshalJSON returns InlineQueryResults object as the JSON encoding of InlineQueryResults.
func (entity *InlineQueryResults) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InlineQueryResults

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InlineQueryResults) GetClass() string {
	return ClassInlineQueryResults
}

// GetType returns constant class type string of the class.
func (*InlineQueryResults) GetType() string {
	return TypeInlineQueryResults
}

// CallbackQueryPayloadData the payload from a general callback button
type CallbackQueryPayloadData struct {
	meta
	// Data that was attached to the callback button
	Data []byte `json:"data"`
}

// MarshalJSON returns CallbackQueryPayloadData object as the JSON encoding of CallbackQueryPayloadData.
func (entity *CallbackQueryPayloadData) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallbackQueryPayloadData

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallbackQueryPayloadData) GetClass() string {
	return ClassCallbackQueryPayload
}

// GetType returns constant class type string of the class.
func (*CallbackQueryPayloadData) GetType() string {
	return TypeCallbackQueryPayloadData
}

// CallbackQueryPayloadType returns constant class type string of the class.
func (*CallbackQueryPayloadData) CallbackQueryPayloadType() string {
	return TypeCallbackQueryPayloadData
}

// CallbackQueryPayloadGame the payload from a game callback button
type CallbackQueryPayloadGame struct {
	meta
	// A short name of the game that was attached to the callback button
	GameShortName string `json:"game_short_name"`
}

// MarshalJSON returns CallbackQueryPayloadGame object as the JSON encoding of CallbackQueryPayloadGame.
func (entity *CallbackQueryPayloadGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallbackQueryPayloadGame

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallbackQueryPayloadGame) GetClass() string {
	return ClassCallbackQueryPayload
}

// GetType returns constant class type string of the class.
func (*CallbackQueryPayloadGame) GetType() string {
	return TypeCallbackQueryPayloadGame
}

// CallbackQueryPayloadType returns constant class type string of the class.
func (*CallbackQueryPayloadGame) CallbackQueryPayloadType() string {
	return TypeCallbackQueryPayloadGame
}

// CallbackQueryAnswer contains a bot's answer to a callback query
type CallbackQueryAnswer struct {
	meta
	// Text of the answer
	Text string `json:"text"`
	// True, if an alert should be shown to the user instead of a toast notification
	ShowAlert bool `json:"show_alert"`
	// URL to be opened
	URL string `json:"url"`
}

// MarshalJSON returns CallbackQueryAnswer object as the JSON encoding of CallbackQueryAnswer.
func (entity *CallbackQueryAnswer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CallbackQueryAnswer

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CallbackQueryAnswer) GetClass() string {
	return ClassCallbackQueryAnswer
}

// GetType returns constant class type string of the class.
func (*CallbackQueryAnswer) GetType() string {
	return TypeCallbackQueryAnswer
}

// CustomRequestResult contains the result of a custom request
type CustomRequestResult struct {
	meta
	// A JSON-serialized result
	Result string `json:"result"`
}

// MarshalJSON returns CustomRequestResult object as the JSON encoding of CustomRequestResult.
func (entity *CustomRequestResult) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CustomRequestResult

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CustomRequestResult) GetClass() string {
	return ClassCustomRequestResult
}

// GetType returns constant class type string of the class.
func (*CustomRequestResult) GetType() string {
	return TypeCustomRequestResult
}

// GameHighScore contains one row of the game high score table
type GameHighScore struct {
	meta
	// Position in the high score table
	Position int32 `json:"position"`
	// User identifier
	UserID int32 `json:"user_id"`
	// User score
	Score int32 `json:"score"`
}

// MarshalJSON returns GameHighScore object as the JSON encoding of GameHighScore.
func (entity *GameHighScore) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub GameHighScore

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*GameHighScore) GetClass() string {
	return ClassGameHighScore
}

// GetType returns constant class type string of the class.
func (*GameHighScore) GetType() string {
	return TypeGameHighScore
}

// GameHighScores contains a list of game high scores
type GameHighScores struct {
	meta
	// A list of game high scores
	Scores []*GameHighScore `json:"scores"`
}

// MarshalJSON returns GameHighScores object as the JSON encoding of GameHighScores.
func (entity *GameHighScores) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub GameHighScores

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*GameHighScores) GetClass() string {
	return ClassGameHighScores
}

// GetType returns constant class type string of the class.
func (*GameHighScores) GetType() string {
	return TypeGameHighScores
}

// ChatEventMessageEdited a message was edited
type ChatEventMessageEdited struct {
	meta
	// The original message before the edit
	OldMessage *Message `json:"old_message"`
	// The message after it was edited
	NewMessage *Message `json:"new_message"`
}

// MarshalJSON returns ChatEventMessageEdited object as the JSON encoding of ChatEventMessageEdited.
func (entity *ChatEventMessageEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMessageEdited

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMessageEdited) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMessageEdited) GetType() string {
	return TypeChatEventMessageEdited
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMessageEdited) ChatEventActionType() string {
	return TypeChatEventMessageEdited
}

// ChatEventMessageDeleted a message was deleted
type ChatEventMessageDeleted struct {
	meta
	// Deleted message
	Message *Message `json:"message"`
}

// MarshalJSON returns ChatEventMessageDeleted object as the JSON encoding of ChatEventMessageDeleted.
func (entity *ChatEventMessageDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMessageDeleted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMessageDeleted) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMessageDeleted) GetType() string {
	return TypeChatEventMessageDeleted
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMessageDeleted) ChatEventActionType() string {
	return TypeChatEventMessageDeleted
}

// ChatEventMessagePinned a message was pinned
type ChatEventMessagePinned struct {
	meta
	// Pinned message
	Message *Message `json:"message"`
}

// MarshalJSON returns ChatEventMessagePinned object as the JSON encoding of ChatEventMessagePinned.
func (entity *ChatEventMessagePinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMessagePinned

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMessagePinned) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMessagePinned) GetType() string {
	return TypeChatEventMessagePinned
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMessagePinned) ChatEventActionType() string {
	return TypeChatEventMessagePinned
}

// ChatEventMessageUnpinned a message was unpinned
type ChatEventMessageUnpinned struct {
	meta
}

// MarshalJSON returns ChatEventMessageUnpinned object as the JSON encoding of ChatEventMessageUnpinned.
func (entity *ChatEventMessageUnpinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMessageUnpinned

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMessageUnpinned) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMessageUnpinned) GetType() string {
	return TypeChatEventMessageUnpinned
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMessageUnpinned) ChatEventActionType() string {
	return TypeChatEventMessageUnpinned
}

// ChatEventMemberJoined a new member joined the chat
type ChatEventMemberJoined struct {
	meta
}

// MarshalJSON returns ChatEventMemberJoined object as the JSON encoding of ChatEventMemberJoined.
func (entity *ChatEventMemberJoined) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMemberJoined

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMemberJoined) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMemberJoined) GetType() string {
	return TypeChatEventMemberJoined
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMemberJoined) ChatEventActionType() string {
	return TypeChatEventMemberJoined
}

// ChatEventMemberLeft a member left the chat
type ChatEventMemberLeft struct {
	meta
}

// MarshalJSON returns ChatEventMemberLeft object as the JSON encoding of ChatEventMemberLeft.
func (entity *ChatEventMemberLeft) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMemberLeft

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMemberLeft) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMemberLeft) GetType() string {
	return TypeChatEventMemberLeft
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMemberLeft) ChatEventActionType() string {
	return TypeChatEventMemberLeft
}

// ChatEventMemberInvited a new chat member was invited
type ChatEventMemberInvited struct {
	meta
	// New member user identifier
	UserID int32 `json:"user_id"`
	// New member status
	Status ChatMemberStatus `json:"status"`
}

// MarshalJSON returns ChatEventMemberInvited object as the JSON encoding of ChatEventMemberInvited.
func (entity *ChatEventMemberInvited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMemberInvited

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMemberInvited) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMemberInvited) GetType() string {
	return TypeChatEventMemberInvited
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMemberInvited) ChatEventActionType() string {
	return TypeChatEventMemberInvited
}

// UnmarshalJSON sets ChatEventMemberInvited object to a copy of JSON encoding of ChatEventMemberInvited.
func (entity *ChatEventMemberInvited) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserID int32           `json:"user_id"`
		Status json.RawMessage `json:"status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.UserID = tmp.UserID

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	entity.Status = fieldStatus

	return nil
}

// ChatEventMemberPromoted a chat member has gained/lost administrator status, or the list of their administrator privileges has changed
type ChatEventMemberPromoted struct {
	meta
	// Chat member user identifier
	UserID int32 `json:"user_id"`
	// Previous status of the chat member
	OldStatus ChatMemberStatus `json:"old_status"`
	// New status of the chat member
	NewStatus ChatMemberStatus `json:"new_status"`
}

// MarshalJSON returns ChatEventMemberPromoted object as the JSON encoding of ChatEventMemberPromoted.
func (entity *ChatEventMemberPromoted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMemberPromoted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMemberPromoted) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMemberPromoted) GetType() string {
	return TypeChatEventMemberPromoted
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMemberPromoted) ChatEventActionType() string {
	return TypeChatEventMemberPromoted
}

// UnmarshalJSON sets ChatEventMemberPromoted object to a copy of JSON encoding of ChatEventMemberPromoted.
func (entity *ChatEventMemberPromoted) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserID    int32           `json:"user_id"`
		OldStatus json.RawMessage `json:"old_status"`
		NewStatus json.RawMessage `json:"new_status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.UserID = tmp.UserID

	fieldOldStatus, _ := UnmarshalChatMemberStatus(tmp.OldStatus)
	entity.OldStatus = fieldOldStatus

	fieldNewStatus, _ := UnmarshalChatMemberStatus(tmp.NewStatus)
	entity.NewStatus = fieldNewStatus

	return nil
}

// ChatEventMemberRestricted a chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed
type ChatEventMemberRestricted struct {
	meta
	// Chat member user identifier
	UserID int32 `json:"user_id"`
	// Previous status of the chat member
	OldStatus ChatMemberStatus `json:"old_status"`
	// New status of the chat member
	NewStatus ChatMemberStatus `json:"new_status"`
}

// MarshalJSON returns ChatEventMemberRestricted object as the JSON encoding of ChatEventMemberRestricted.
func (entity *ChatEventMemberRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventMemberRestricted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventMemberRestricted) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventMemberRestricted) GetType() string {
	return TypeChatEventMemberRestricted
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventMemberRestricted) ChatEventActionType() string {
	return TypeChatEventMemberRestricted
}

// UnmarshalJSON sets ChatEventMemberRestricted object to a copy of JSON encoding of ChatEventMemberRestricted.
func (entity *ChatEventMemberRestricted) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserID    int32           `json:"user_id"`
		OldStatus json.RawMessage `json:"old_status"`
		NewStatus json.RawMessage `json:"new_status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.UserID = tmp.UserID

	fieldOldStatus, _ := UnmarshalChatMemberStatus(tmp.OldStatus)
	entity.OldStatus = fieldOldStatus

	fieldNewStatus, _ := UnmarshalChatMemberStatus(tmp.NewStatus)
	entity.NewStatus = fieldNewStatus

	return nil
}

// ChatEventTitleChanged the chat title was changed
type ChatEventTitleChanged struct {
	meta
	// Previous chat title
	OldTitle string `json:"old_title"`
	// New chat title
	NewTitle string `json:"new_title"`
}

// MarshalJSON returns ChatEventTitleChanged object as the JSON encoding of ChatEventTitleChanged.
func (entity *ChatEventTitleChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventTitleChanged

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventTitleChanged) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventTitleChanged) GetType() string {
	return TypeChatEventTitleChanged
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventTitleChanged) ChatEventActionType() string {
	return TypeChatEventTitleChanged
}

// ChatEventDescriptionChanged the chat description was changed
type ChatEventDescriptionChanged struct {
	meta
	// Previous chat description
	OldDescription string `json:"old_description"`
	// New chat description
	NewDescription string `json:"new_description"`
}

// MarshalJSON returns ChatEventDescriptionChanged object as the JSON encoding of ChatEventDescriptionChanged.
func (entity *ChatEventDescriptionChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventDescriptionChanged

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventDescriptionChanged) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventDescriptionChanged) GetType() string {
	return TypeChatEventDescriptionChanged
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventDescriptionChanged) ChatEventActionType() string {
	return TypeChatEventDescriptionChanged
}

// ChatEventUsernameChanged the chat username was changed
type ChatEventUsernameChanged struct {
	meta
	// Previous chat username
	OldUsername string `json:"old_username"`
	// New chat username
	NewUsername string `json:"new_username"`
}

// MarshalJSON returns ChatEventUsernameChanged object as the JSON encoding of ChatEventUsernameChanged.
func (entity *ChatEventUsernameChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventUsernameChanged

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventUsernameChanged) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventUsernameChanged) GetType() string {
	return TypeChatEventUsernameChanged
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventUsernameChanged) ChatEventActionType() string {
	return TypeChatEventUsernameChanged
}

// ChatEventPhotoChanged the chat photo was changed
type ChatEventPhotoChanged struct {
	meta
	// Previous chat photo value; may be null
	OldPhoto *ChatPhoto `json:"old_photo"`
	// New chat photo value; may be null
	NewPhoto *ChatPhoto `json:"new_photo"`
}

// MarshalJSON returns ChatEventPhotoChanged object as the JSON encoding of ChatEventPhotoChanged.
func (entity *ChatEventPhotoChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventPhotoChanged

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventPhotoChanged) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventPhotoChanged) GetType() string {
	return TypeChatEventPhotoChanged
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventPhotoChanged) ChatEventActionType() string {
	return TypeChatEventPhotoChanged
}

// ChatEventInvitesToggled the anyone_can_invite setting of a supergroup chat was toggled
type ChatEventInvitesToggled struct {
	meta
	// New value of anyone_can_invite
	AnyoneCanInvite bool `json:"anyone_can_invite"`
}

// MarshalJSON returns ChatEventInvitesToggled object as the JSON encoding of ChatEventInvitesToggled.
func (entity *ChatEventInvitesToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventInvitesToggled

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventInvitesToggled) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventInvitesToggled) GetType() string {
	return TypeChatEventInvitesToggled
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventInvitesToggled) ChatEventActionType() string {
	return TypeChatEventInvitesToggled
}

// ChatEventSignMessagesToggled the sign_messages setting of a channel was toggled
type ChatEventSignMessagesToggled struct {
	meta
	// New value of sign_messages
	SignMessages bool `json:"sign_messages"`
}

// MarshalJSON returns ChatEventSignMessagesToggled object as the JSON encoding of ChatEventSignMessagesToggled.
func (entity *ChatEventSignMessagesToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventSignMessagesToggled

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventSignMessagesToggled) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventSignMessagesToggled) GetType() string {
	return TypeChatEventSignMessagesToggled
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventSignMessagesToggled) ChatEventActionType() string {
	return TypeChatEventSignMessagesToggled
}

// ChatEventStickerSetChanged the supergroup sticker set was changed
type ChatEventStickerSetChanged struct {
	meta
	// Previous identifier of the chat sticker set; 0 if none
	OldStickerSetID Int64JSON `json:"old_sticker_set_id"`
	// New identifier of the chat sticker set; 0 if none
	NewStickerSetID Int64JSON `json:"new_sticker_set_id"`
}

// MarshalJSON returns ChatEventStickerSetChanged object as the JSON encoding of ChatEventStickerSetChanged.
func (entity *ChatEventStickerSetChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventStickerSetChanged

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventStickerSetChanged) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventStickerSetChanged) GetType() string {
	return TypeChatEventStickerSetChanged
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventStickerSetChanged) ChatEventActionType() string {
	return TypeChatEventStickerSetChanged
}

// ChatEventIsAllHistoryAvailableToggled the is_all_history_available setting of a supergroup was toggled
type ChatEventIsAllHistoryAvailableToggled struct {
	meta
	// New value of is_all_history_available
	IsAllHistoryAvailable bool `json:"is_all_history_available"`
}

// MarshalJSON returns ChatEventIsAllHistoryAvailableToggled object as the JSON encoding of ChatEventIsAllHistoryAvailableToggled.
func (entity *ChatEventIsAllHistoryAvailableToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventIsAllHistoryAvailableToggled

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventIsAllHistoryAvailableToggled) GetClass() string {
	return ClassChatEventAction
}

// GetType returns constant class type string of the class.
func (*ChatEventIsAllHistoryAvailableToggled) GetType() string {
	return TypeChatEventIsAllHistoryAvailableToggled
}

// ChatEventActionType returns constant class type string of the class.
func (*ChatEventIsAllHistoryAvailableToggled) ChatEventActionType() string {
	return TypeChatEventIsAllHistoryAvailableToggled
}

// ChatEvent represents a chat event
type ChatEvent struct {
	meta
	// Chat event identifier
	ID Int64JSON `json:"id"`
	// Point in time (Unix timestamp) when the event happened
	Date int32 `json:"date"`
	// Identifier of the user who performed the action that triggered the event
	UserID int32 `json:"user_id"`
	// Action performed by the user
	Action ChatEventAction `json:"action"`
}

// MarshalJSON returns ChatEvent object as the JSON encoding of ChatEvent.
func (entity *ChatEvent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEvent

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEvent) GetClass() string {
	return ClassChatEvent
}

// GetType returns constant class type string of the class.
func (*ChatEvent) GetType() string {
	return TypeChatEvent
}

// UnmarshalJSON sets ChatEvent object to a copy of JSON encoding of ChatEvent.
func (entity *ChatEvent) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID     Int64JSON       `json:"id"`
		Date   int32           `json:"date"`
		UserID int32           `json:"user_id"`
		Action json.RawMessage `json:"action"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Date = tmp.Date
	entity.UserID = tmp.UserID

	fieldAction, _ := UnmarshalChatEventAction(tmp.Action)
	entity.Action = fieldAction

	return nil
}

// ChatEvents contains a list of chat events
type ChatEvents struct {
	meta
	// List of events
	Events []*ChatEvent `json:"events"`
}

// MarshalJSON returns ChatEvents object as the JSON encoding of ChatEvents.
func (entity *ChatEvents) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEvents

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEvents) GetClass() string {
	return ClassChatEvents
}

// GetType returns constant class type string of the class.
func (*ChatEvents) GetType() string {
	return TypeChatEvents
}

// ChatEventLogFilters represents a set of filters used to obtain a chat event log
type ChatEventLogFilters struct {
	meta
	// True, if message edits should be returned
	MessageEdits bool `json:"message_edits"`
	// True, if message deletions should be returned
	MessageDeletions bool `json:"message_deletions"`
	// True, if pin/unpin events should be returned
	MessagePins bool `json:"message_pins"`
	// True, if members joining events should be returned
	MemberJoins bool `json:"member_joins"`
	// True, if members leaving events should be returned
	MemberLeaves bool `json:"member_leaves"`
	// True, if invited member events should be returned
	MemberInvites bool `json:"member_invites"`
	// True, if member promotion/demotion events should be returned
	MemberPromotions bool `json:"member_promotions"`
	// True, if member restricted/unrestricted/banned/unbanned events should be returned
	MemberRestrictions bool `json:"member_restrictions"`
	// True, if changes in chat information should be returned
	InfoChanges bool `json:"info_changes"`
	// True, if changes in chat settings should be returned
	SettingChanges bool `json:"setting_changes"`
}

// MarshalJSON returns ChatEventLogFilters object as the JSON encoding of ChatEventLogFilters.
func (entity *ChatEventLogFilters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatEventLogFilters

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatEventLogFilters) GetClass() string {
	return ClassChatEventLogFilters
}

// GetType returns constant class type string of the class.
func (*ChatEventLogFilters) GetType() string {
	return TypeChatEventLogFilters
}

// LanguagePackStringValueOrdinary an ordinary language pack string
type LanguagePackStringValueOrdinary struct {
	meta
	// String value
	Value string `json:"value"`
}

// MarshalJSON returns LanguagePackStringValueOrdinary object as the JSON encoding of LanguagePackStringValueOrdinary.
func (entity *LanguagePackStringValueOrdinary) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LanguagePackStringValueOrdinary

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LanguagePackStringValueOrdinary) GetClass() string {
	return ClassLanguagePackStringValue
}

// GetType returns constant class type string of the class.
func (*LanguagePackStringValueOrdinary) GetType() string {
	return TypeLanguagePackStringValueOrdinary
}

// LanguagePackStringValueType returns constant class type string of the class.
func (*LanguagePackStringValueOrdinary) LanguagePackStringValueType() string {
	return TypeLanguagePackStringValueOrdinary
}

// LanguagePackStringValuePluralized a language pack string which has different forms based on the number of some object it mentions
type LanguagePackStringValuePluralized struct {
	meta
	// Value for zero objects
	ZeroValue string `json:"zero_value"`
	// Value for one object
	OneValue string `json:"one_value"`
	// Value for two objects
	TwoValue string `json:"two_value"`
	// Value for few objects
	FewValue string `json:"few_value"`
	// Value for many objects
	ManyValue string `json:"many_value"`
	// Default value
	OtherValue string `json:"other_value"`
}

// MarshalJSON returns LanguagePackStringValuePluralized object as the JSON encoding of LanguagePackStringValuePluralized.
func (entity *LanguagePackStringValuePluralized) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LanguagePackStringValuePluralized

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LanguagePackStringValuePluralized) GetClass() string {
	return ClassLanguagePackStringValue
}

// GetType returns constant class type string of the class.
func (*LanguagePackStringValuePluralized) GetType() string {
	return TypeLanguagePackStringValuePluralized
}

// LanguagePackStringValueType returns constant class type string of the class.
func (*LanguagePackStringValuePluralized) LanguagePackStringValueType() string {
	return TypeLanguagePackStringValuePluralized
}

// LanguagePackStringValueDeleted a deleted language pack string, the value should be taken from the built-in english language pack
type LanguagePackStringValueDeleted struct {
	meta
}

// MarshalJSON returns LanguagePackStringValueDeleted object as the JSON encoding of LanguagePackStringValueDeleted.
func (entity *LanguagePackStringValueDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LanguagePackStringValueDeleted

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LanguagePackStringValueDeleted) GetClass() string {
	return ClassLanguagePackStringValue
}

// GetType returns constant class type string of the class.
func (*LanguagePackStringValueDeleted) GetType() string {
	return TypeLanguagePackStringValueDeleted
}

// LanguagePackStringValueType returns constant class type string of the class.
func (*LanguagePackStringValueDeleted) LanguagePackStringValueType() string {
	return TypeLanguagePackStringValueDeleted
}

// LanguagePackString represents one language pack string
type LanguagePackString struct {
	meta
	// String key
	Key string `json:"key"`
	// String value
	Value LanguagePackStringValue `json:"value"`
}

// MarshalJSON returns LanguagePackString object as the JSON encoding of LanguagePackString.
func (entity *LanguagePackString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LanguagePackString

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LanguagePackString) GetClass() string {
	return ClassLanguagePackString
}

// GetType returns constant class type string of the class.
func (*LanguagePackString) GetType() string {
	return TypeLanguagePackString
}

// UnmarshalJSON sets LanguagePackString object to a copy of JSON encoding of LanguagePackString.
func (entity *LanguagePackString) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Key   string          `json:"key"`
		Value json.RawMessage `json:"value"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Key = tmp.Key

	fieldValue, _ := UnmarshalLanguagePackStringValue(tmp.Value)
	entity.Value = fieldValue

	return nil
}

// LanguagePackStrings contains a list of language pack strings
type LanguagePackStrings struct {
	meta
	// A list of language pack strings
	Strings []*LanguagePackString `json:"strings"`
}

// MarshalJSON returns LanguagePackStrings object as the JSON encoding of LanguagePackStrings.
func (entity *LanguagePackStrings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LanguagePackStrings

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LanguagePackStrings) GetClass() string {
	return ClassLanguagePackStrings
}

// GetType returns constant class type string of the class.
func (*LanguagePackStrings) GetType() string {
	return TypeLanguagePackStrings
}

// LanguagePackInfo contains information about a language pack
type LanguagePackInfo struct {
	meta
	// Unique language pack identifier
	ID string `json:"id"`
	// Language name
	Name string `json:"name"`
	// Name of the language in that language
	NativeName string `json:"native_name"`
	// Total number of non-deleted strings from the language pack available locally
	LocalStringCount int32 `json:"local_string_count"`
}

// MarshalJSON returns LanguagePackInfo object as the JSON encoding of LanguagePackInfo.
func (entity *LanguagePackInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LanguagePackInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LanguagePackInfo) GetClass() string {
	return ClassLanguagePackInfo
}

// GetType returns constant class type string of the class.
func (*LanguagePackInfo) GetType() string {
	return TypeLanguagePackInfo
}

// LocalizationTargetInfo contains information about the current localization target
type LocalizationTargetInfo struct {
	meta
	// List of available language packs for this application
	LanguagePacks []*LanguagePackInfo `json:"language_packs"`
}

// MarshalJSON returns LocalizationTargetInfo object as the JSON encoding of LocalizationTargetInfo.
func (entity *LocalizationTargetInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub LocalizationTargetInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*LocalizationTargetInfo) GetClass() string {
	return ClassLocalizationTargetInfo
}

// GetType returns constant class type string of the class.
func (*LocalizationTargetInfo) GetType() string {
	return TypeLocalizationTargetInfo
}

// DeviceTokenGoogleCloudMessaging a token for Google Cloud Messaging
type DeviceTokenGoogleCloudMessaging struct {
	meta
	// Device registration token; may be empty to de-register a device
	Token string `json:"token"`
}

// MarshalJSON returns DeviceTokenGoogleCloudMessaging object as the JSON encoding of DeviceTokenGoogleCloudMessaging.
func (entity *DeviceTokenGoogleCloudMessaging) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenGoogleCloudMessaging

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenGoogleCloudMessaging) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenGoogleCloudMessaging) GetType() string {
	return TypeDeviceTokenGoogleCloudMessaging
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenGoogleCloudMessaging) DeviceTokenType() string {
	return TypeDeviceTokenGoogleCloudMessaging
}

// DeviceTokenApplePush a token for Apple Push Notification service
type DeviceTokenApplePush struct {
	meta
	// Device token; may be empty to de-register a device
	DeviceToken string `json:"device_token"`
	// True, if App Sandbox is enabled
	IsAppSandbox bool `json:"is_app_sandbox"`
}

// MarshalJSON returns DeviceTokenApplePush object as the JSON encoding of DeviceTokenApplePush.
func (entity *DeviceTokenApplePush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenApplePush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenApplePush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenApplePush) GetType() string {
	return TypeDeviceTokenApplePush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenApplePush) DeviceTokenType() string {
	return TypeDeviceTokenApplePush
}

// DeviceTokenApplePushVoIP a token for Apple Push Notification service VoIP notifications
type DeviceTokenApplePushVoIP struct {
	meta
	// Device token; may be empty to de-register a device
	DeviceToken string `json:"device_token"`
	// True, if App Sandbox is enabled
	IsAppSandbox bool `json:"is_app_sandbox"`
}

// MarshalJSON returns DeviceTokenApplePushVoIP object as the JSON encoding of DeviceTokenApplePushVoIP.
func (entity *DeviceTokenApplePushVoIP) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenApplePushVoIP

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenApplePushVoIP) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenApplePushVoIP) GetType() string {
	return TypeDeviceTokenApplePushVoIP
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenApplePushVoIP) DeviceTokenType() string {
	return TypeDeviceTokenApplePushVoIP
}

// DeviceTokenWindowsPush a token for Windows Push Notification Services
type DeviceTokenWindowsPush struct {
	meta
	// The access token that will be used to send notifications; may be empty to de-register a device
	AccessToken string `json:"access_token"`
}

// MarshalJSON returns DeviceTokenWindowsPush object as the JSON encoding of DeviceTokenWindowsPush.
func (entity *DeviceTokenWindowsPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenWindowsPush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenWindowsPush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenWindowsPush) GetType() string {
	return TypeDeviceTokenWindowsPush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenWindowsPush) DeviceTokenType() string {
	return TypeDeviceTokenWindowsPush
}

// DeviceTokenMicrosoftPush a token for Microsoft Push Notification Service
type DeviceTokenMicrosoftPush struct {
	meta
	// Push notification channel URI; may be empty to de-register a device
	ChannelURI string `json:"channel_uri"`
}

// MarshalJSON returns DeviceTokenMicrosoftPush object as the JSON encoding of DeviceTokenMicrosoftPush.
func (entity *DeviceTokenMicrosoftPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenMicrosoftPush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenMicrosoftPush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenMicrosoftPush) GetType() string {
	return TypeDeviceTokenMicrosoftPush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenMicrosoftPush) DeviceTokenType() string {
	return TypeDeviceTokenMicrosoftPush
}

// DeviceTokenMicrosoftPushVoIP a token for Microsoft Push Notification Service VoIP channel
type DeviceTokenMicrosoftPushVoIP struct {
	meta
	// Push notification channel URI; may be empty to de-register a device
	ChannelURI string `json:"channel_uri"`
}

// MarshalJSON returns DeviceTokenMicrosoftPushVoIP object as the JSON encoding of DeviceTokenMicrosoftPushVoIP.
func (entity *DeviceTokenMicrosoftPushVoIP) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenMicrosoftPushVoIP

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenMicrosoftPushVoIP) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenMicrosoftPushVoIP) GetType() string {
	return TypeDeviceTokenMicrosoftPushVoIP
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenMicrosoftPushVoIP) DeviceTokenType() string {
	return TypeDeviceTokenMicrosoftPushVoIP
}

// DeviceTokenWebPush a token for web Push API
type DeviceTokenWebPush struct {
	meta
	// Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device
	Endpoint string `json:"endpoint"`
	// Base64url-encoded P-256 elliptic curve Diffie-Hellman public key
	P256dhBase64url string `json:"p256dh_base64url"`
	// Base64url-encoded authentication secret
	AuthBase64url string `json:"auth_base64url"`
}

// MarshalJSON returns DeviceTokenWebPush object as the JSON encoding of DeviceTokenWebPush.
func (entity *DeviceTokenWebPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenWebPush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenWebPush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenWebPush) GetType() string {
	return TypeDeviceTokenWebPush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenWebPush) DeviceTokenType() string {
	return TypeDeviceTokenWebPush
}

// DeviceTokenSimplePush a token for Simple Push API for Firefox OS
type DeviceTokenSimplePush struct {
	meta
	// Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device
	Endpoint string `json:"endpoint"`
}

// MarshalJSON returns DeviceTokenSimplePush object as the JSON encoding of DeviceTokenSimplePush.
func (entity *DeviceTokenSimplePush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenSimplePush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenSimplePush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenSimplePush) GetType() string {
	return TypeDeviceTokenSimplePush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenSimplePush) DeviceTokenType() string {
	return TypeDeviceTokenSimplePush
}

// DeviceTokenUbuntuPush a token for Ubuntu Push Client service
type DeviceTokenUbuntuPush struct {
	meta
	// Token; may be empty to de-register a device
	Token string `json:"token"`
}

// MarshalJSON returns DeviceTokenUbuntuPush object as the JSON encoding of DeviceTokenUbuntuPush.
func (entity *DeviceTokenUbuntuPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenUbuntuPush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenUbuntuPush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenUbuntuPush) GetType() string {
	return TypeDeviceTokenUbuntuPush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenUbuntuPush) DeviceTokenType() string {
	return TypeDeviceTokenUbuntuPush
}

// DeviceTokenBlackBerryPush a token for BlackBerry Push Service
type DeviceTokenBlackBerryPush struct {
	meta
	// Token; may be empty to de-register a device
	Token string `json:"token"`
}

// MarshalJSON returns DeviceTokenBlackBerryPush object as the JSON encoding of DeviceTokenBlackBerryPush.
func (entity *DeviceTokenBlackBerryPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenBlackBerryPush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenBlackBerryPush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenBlackBerryPush) GetType() string {
	return TypeDeviceTokenBlackBerryPush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenBlackBerryPush) DeviceTokenType() string {
	return TypeDeviceTokenBlackBerryPush
}

// DeviceTokenTizenPush a token for Tizen Push Service
type DeviceTokenTizenPush struct {
	meta
	// Push service registration identifier; may be empty to de-register a device
	RegID string `json:"reg_id"`
}

// MarshalJSON returns DeviceTokenTizenPush object as the JSON encoding of DeviceTokenTizenPush.
func (entity *DeviceTokenTizenPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeviceTokenTizenPush

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeviceTokenTizenPush) GetClass() string {
	return ClassDeviceToken
}

// GetType returns constant class type string of the class.
func (*DeviceTokenTizenPush) GetType() string {
	return TypeDeviceTokenTizenPush
}

// DeviceTokenType returns constant class type string of the class.
func (*DeviceTokenTizenPush) DeviceTokenType() string {
	return TypeDeviceTokenTizenPush
}

// Wallpaper contains information about a wallpaper
type Wallpaper struct {
	meta
	// Unique persistent wallpaper identifier
	ID int32 `json:"id"`
	// Available variants of the wallpaper in different sizes. These photos can only be downloaded; they can't be sent in a message
	Sizes []*PhotoSize `json:"sizes"`
	// Main color of the wallpaper in RGB24 format; should be treated as background color if no photos are specified
	Color int32 `json:"color"`
}

// MarshalJSON returns Wallpaper object as the JSON encoding of Wallpaper.
func (entity *Wallpaper) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Wallpaper

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Wallpaper) GetClass() string {
	return ClassWallpaper
}

// GetType returns constant class type string of the class.
func (*Wallpaper) GetType() string {
	return TypeWallpaper
}

// Wallpapers contains a list of wallpapers
type Wallpapers struct {
	meta
	// A list of wallpapers
	Wallpapers []*Wallpaper `json:"wallpapers"`
}

// MarshalJSON returns Wallpapers object as the JSON encoding of Wallpapers.
func (entity *Wallpapers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Wallpapers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Wallpapers) GetClass() string {
	return ClassWallpapers
}

// GetType returns constant class type string of the class.
func (*Wallpapers) GetType() string {
	return TypeWallpapers
}

// Hashtags contains a list of hashtags
type Hashtags struct {
	meta
	// A list of hashtags
	Hashtags []string `json:"hashtags"`
}

// MarshalJSON returns Hashtags object as the JSON encoding of Hashtags.
func (entity *Hashtags) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Hashtags

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Hashtags) GetClass() string {
	return ClassHashtags
}

// GetType returns constant class type string of the class.
func (*Hashtags) GetType() string {
	return TypeHashtags
}

// CheckChatUsernameResultOk the username can be set
type CheckChatUsernameResultOk struct {
	meta
}

// MarshalJSON returns CheckChatUsernameResultOk object as the JSON encoding of CheckChatUsernameResultOk.
func (entity *CheckChatUsernameResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CheckChatUsernameResultOk

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CheckChatUsernameResultOk) GetClass() string {
	return ClassCheckChatUsernameResult
}

// GetType returns constant class type string of the class.
func (*CheckChatUsernameResultOk) GetType() string {
	return TypeCheckChatUsernameResultOk
}

// CheckChatUsernameResultType returns constant class type string of the class.
func (*CheckChatUsernameResultOk) CheckChatUsernameResultType() string {
	return TypeCheckChatUsernameResultOk
}

// CheckChatUsernameResultUsernameInvalid the username is invalid
type CheckChatUsernameResultUsernameInvalid struct {
	meta
}

// MarshalJSON returns CheckChatUsernameResultUsernameInvalid object as the JSON encoding of CheckChatUsernameResultUsernameInvalid.
func (entity *CheckChatUsernameResultUsernameInvalid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CheckChatUsernameResultUsernameInvalid

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CheckChatUsernameResultUsernameInvalid) GetClass() string {
	return ClassCheckChatUsernameResult
}

// GetType returns constant class type string of the class.
func (*CheckChatUsernameResultUsernameInvalid) GetType() string {
	return TypeCheckChatUsernameResultUsernameInvalid
}

// CheckChatUsernameResultType returns constant class type string of the class.
func (*CheckChatUsernameResultUsernameInvalid) CheckChatUsernameResultType() string {
	return TypeCheckChatUsernameResultUsernameInvalid
}

// CheckChatUsernameResultUsernameOccupied the username is occupied
type CheckChatUsernameResultUsernameOccupied struct {
	meta
}

// MarshalJSON returns CheckChatUsernameResultUsernameOccupied object as the JSON encoding of CheckChatUsernameResultUsernameOccupied.
func (entity *CheckChatUsernameResultUsernameOccupied) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CheckChatUsernameResultUsernameOccupied

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CheckChatUsernameResultUsernameOccupied) GetClass() string {
	return ClassCheckChatUsernameResult
}

// GetType returns constant class type string of the class.
func (*CheckChatUsernameResultUsernameOccupied) GetType() string {
	return TypeCheckChatUsernameResultUsernameOccupied
}

// CheckChatUsernameResultType returns constant class type string of the class.
func (*CheckChatUsernameResultUsernameOccupied) CheckChatUsernameResultType() string {
	return TypeCheckChatUsernameResultUsernameOccupied
}

// CheckChatUsernameResultPublicChatsTooMuch the user has too much public chats, one of them should be made private first
type CheckChatUsernameResultPublicChatsTooMuch struct {
	meta
}

// MarshalJSON returns CheckChatUsernameResultPublicChatsTooMuch object as the JSON encoding of CheckChatUsernameResultPublicChatsTooMuch.
func (entity *CheckChatUsernameResultPublicChatsTooMuch) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CheckChatUsernameResultPublicChatsTooMuch

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CheckChatUsernameResultPublicChatsTooMuch) GetClass() string {
	return ClassCheckChatUsernameResult
}

// GetType returns constant class type string of the class.
func (*CheckChatUsernameResultPublicChatsTooMuch) GetType() string {
	return TypeCheckChatUsernameResultPublicChatsTooMuch
}

// CheckChatUsernameResultType returns constant class type string of the class.
func (*CheckChatUsernameResultPublicChatsTooMuch) CheckChatUsernameResultType() string {
	return TypeCheckChatUsernameResultPublicChatsTooMuch
}

// CheckChatUsernameResultPublicGroupsUnavailable the user can't be a member of a public supergroup
type CheckChatUsernameResultPublicGroupsUnavailable struct {
	meta
}

// MarshalJSON returns CheckChatUsernameResultPublicGroupsUnavailable object as the JSON encoding of CheckChatUsernameResultPublicGroupsUnavailable.
func (entity *CheckChatUsernameResultPublicGroupsUnavailable) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub CheckChatUsernameResultPublicGroupsUnavailable

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*CheckChatUsernameResultPublicGroupsUnavailable) GetClass() string {
	return ClassCheckChatUsernameResult
}

// GetType returns constant class type string of the class.
func (*CheckChatUsernameResultPublicGroupsUnavailable) GetType() string {
	return TypeCheckChatUsernameResultPublicGroupsUnavailable
}

// CheckChatUsernameResultType returns constant class type string of the class.
func (*CheckChatUsernameResultPublicGroupsUnavailable) CheckChatUsernameResultType() string {
	return TypeCheckChatUsernameResultPublicGroupsUnavailable
}

// OptionValueBoolean boolean option
type OptionValueBoolean struct {
	meta
	// The value of the option
	Value bool `json:"value"`
}

// MarshalJSON returns OptionValueBoolean object as the JSON encoding of OptionValueBoolean.
func (entity *OptionValueBoolean) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub OptionValueBoolean

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*OptionValueBoolean) GetClass() string {
	return ClassOptionValue
}

// GetType returns constant class type string of the class.
func (*OptionValueBoolean) GetType() string {
	return TypeOptionValueBoolean
}

// OptionValueType returns constant class type string of the class.
func (*OptionValueBoolean) OptionValueType() string {
	return TypeOptionValueBoolean
}

// OptionValueEmpty an unknown option or an option which has a default value
type OptionValueEmpty struct {
	meta
}

// MarshalJSON returns OptionValueEmpty object as the JSON encoding of OptionValueEmpty.
func (entity *OptionValueEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub OptionValueEmpty

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*OptionValueEmpty) GetClass() string {
	return ClassOptionValue
}

// GetType returns constant class type string of the class.
func (*OptionValueEmpty) GetType() string {
	return TypeOptionValueEmpty
}

// OptionValueType returns constant class type string of the class.
func (*OptionValueEmpty) OptionValueType() string {
	return TypeOptionValueEmpty
}

// OptionValueInteger an integer option
type OptionValueInteger struct {
	meta
	// The value of the option
	Value int32 `json:"value"`
}

// MarshalJSON returns OptionValueInteger object as the JSON encoding of OptionValueInteger.
func (entity *OptionValueInteger) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub OptionValueInteger

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*OptionValueInteger) GetClass() string {
	return ClassOptionValue
}

// GetType returns constant class type string of the class.
func (*OptionValueInteger) GetType() string {
	return TypeOptionValueInteger
}

// OptionValueType returns constant class type string of the class.
func (*OptionValueInteger) OptionValueType() string {
	return TypeOptionValueInteger
}

// OptionValueString a string option
type OptionValueString struct {
	meta
	// The value of the option
	Value string `json:"value"`
}

// MarshalJSON returns OptionValueString object as the JSON encoding of OptionValueString.
func (entity *OptionValueString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub OptionValueString

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*OptionValueString) GetClass() string {
	return ClassOptionValue
}

// GetType returns constant class type string of the class.
func (*OptionValueString) GetType() string {
	return TypeOptionValueString
}

// OptionValueType returns constant class type string of the class.
func (*OptionValueString) OptionValueType() string {
	return TypeOptionValueString
}

// UserPrivacySettingRuleAllowAll a rule to allow all users to do something
type UserPrivacySettingRuleAllowAll struct {
	meta
}

// MarshalJSON returns UserPrivacySettingRuleAllowAll object as the JSON encoding of UserPrivacySettingRuleAllowAll.
func (entity *UserPrivacySettingRuleAllowAll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingRuleAllowAll

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingRuleAllowAll) GetClass() string {
	return ClassUserPrivacySettingRule
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingRuleAllowAll) GetType() string {
	return TypeUserPrivacySettingRuleAllowAll
}

// UserPrivacySettingRuleType returns constant class type string of the class.
func (*UserPrivacySettingRuleAllowAll) UserPrivacySettingRuleType() string {
	return TypeUserPrivacySettingRuleAllowAll
}

// UserPrivacySettingRuleAllowContacts a rule to allow all of a user's contacts to do something
type UserPrivacySettingRuleAllowContacts struct {
	meta
}

// MarshalJSON returns UserPrivacySettingRuleAllowContacts object as the JSON encoding of UserPrivacySettingRuleAllowContacts.
func (entity *UserPrivacySettingRuleAllowContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingRuleAllowContacts

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingRuleAllowContacts) GetClass() string {
	return ClassUserPrivacySettingRule
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingRuleAllowContacts) GetType() string {
	return TypeUserPrivacySettingRuleAllowContacts
}

// UserPrivacySettingRuleType returns constant class type string of the class.
func (*UserPrivacySettingRuleAllowContacts) UserPrivacySettingRuleType() string {
	return TypeUserPrivacySettingRuleAllowContacts
}

// UserPrivacySettingRuleAllowUsers a rule to allow certain specified users to do something
type UserPrivacySettingRuleAllowUsers struct {
	meta
	// The user identifiers
	UserIDs []int32 `json:"user_ids"`
}

// MarshalJSON returns UserPrivacySettingRuleAllowUsers object as the JSON encoding of UserPrivacySettingRuleAllowUsers.
func (entity *UserPrivacySettingRuleAllowUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingRuleAllowUsers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingRuleAllowUsers) GetClass() string {
	return ClassUserPrivacySettingRule
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingRuleAllowUsers) GetType() string {
	return TypeUserPrivacySettingRuleAllowUsers
}

// UserPrivacySettingRuleType returns constant class type string of the class.
func (*UserPrivacySettingRuleAllowUsers) UserPrivacySettingRuleType() string {
	return TypeUserPrivacySettingRuleAllowUsers
}

// UserPrivacySettingRuleRestrictAll a rule to restrict all users from doing something
type UserPrivacySettingRuleRestrictAll struct {
	meta
}

// MarshalJSON returns UserPrivacySettingRuleRestrictAll object as the JSON encoding of UserPrivacySettingRuleRestrictAll.
func (entity *UserPrivacySettingRuleRestrictAll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingRuleRestrictAll

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingRuleRestrictAll) GetClass() string {
	return ClassUserPrivacySettingRule
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingRuleRestrictAll) GetType() string {
	return TypeUserPrivacySettingRuleRestrictAll
}

// UserPrivacySettingRuleType returns constant class type string of the class.
func (*UserPrivacySettingRuleRestrictAll) UserPrivacySettingRuleType() string {
	return TypeUserPrivacySettingRuleRestrictAll
}

// UserPrivacySettingRuleRestrictContacts a rule to restrict all contacts of a user from doing something
type UserPrivacySettingRuleRestrictContacts struct {
	meta
}

// MarshalJSON returns UserPrivacySettingRuleRestrictContacts object as the JSON encoding of UserPrivacySettingRuleRestrictContacts.
func (entity *UserPrivacySettingRuleRestrictContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingRuleRestrictContacts

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingRuleRestrictContacts) GetClass() string {
	return ClassUserPrivacySettingRule
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingRuleRestrictContacts) GetType() string {
	return TypeUserPrivacySettingRuleRestrictContacts
}

// UserPrivacySettingRuleType returns constant class type string of the class.
func (*UserPrivacySettingRuleRestrictContacts) UserPrivacySettingRuleType() string {
	return TypeUserPrivacySettingRuleRestrictContacts
}

// UserPrivacySettingRuleRestrictUsers a rule to restrict all specified users from doing something
type UserPrivacySettingRuleRestrictUsers struct {
	meta
	// The user identifiers
	UserIDs []int32 `json:"user_ids"`
}

// MarshalJSON returns UserPrivacySettingRuleRestrictUsers object as the JSON encoding of UserPrivacySettingRuleRestrictUsers.
func (entity *UserPrivacySettingRuleRestrictUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingRuleRestrictUsers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingRuleRestrictUsers) GetClass() string {
	return ClassUserPrivacySettingRule
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingRuleRestrictUsers) GetType() string {
	return TypeUserPrivacySettingRuleRestrictUsers
}

// UserPrivacySettingRuleType returns constant class type string of the class.
func (*UserPrivacySettingRuleRestrictUsers) UserPrivacySettingRuleType() string {
	return TypeUserPrivacySettingRuleRestrictUsers
}

// UserPrivacySettingRules a list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed
type UserPrivacySettingRules struct {
	meta
	// A list of rules
	Rules []UserPrivacySettingRule `json:"rules"`
}

// MarshalJSON returns UserPrivacySettingRules object as the JSON encoding of UserPrivacySettingRules.
func (entity *UserPrivacySettingRules) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingRules

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingRules) GetClass() string {
	return ClassUserPrivacySettingRules
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingRules) GetType() string {
	return TypeUserPrivacySettingRules
}

// UserPrivacySettingShowStatus a privacy setting for managing whether the user's online status is visible
type UserPrivacySettingShowStatus struct {
	meta
}

// MarshalJSON returns UserPrivacySettingShowStatus object as the JSON encoding of UserPrivacySettingShowStatus.
func (entity *UserPrivacySettingShowStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingShowStatus

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingShowStatus) GetClass() string {
	return ClassUserPrivacySetting
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingShowStatus) GetType() string {
	return TypeUserPrivacySettingShowStatus
}

// UserPrivacySettingType returns constant class type string of the class.
func (*UserPrivacySettingShowStatus) UserPrivacySettingType() string {
	return TypeUserPrivacySettingShowStatus
}

// UserPrivacySettingAllowChatInvites a privacy setting for managing whether the user can be invited to chats
type UserPrivacySettingAllowChatInvites struct {
	meta
}

// MarshalJSON returns UserPrivacySettingAllowChatInvites object as the JSON encoding of UserPrivacySettingAllowChatInvites.
func (entity *UserPrivacySettingAllowChatInvites) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingAllowChatInvites

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingAllowChatInvites) GetClass() string {
	return ClassUserPrivacySetting
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingAllowChatInvites) GetType() string {
	return TypeUserPrivacySettingAllowChatInvites
}

// UserPrivacySettingType returns constant class type string of the class.
func (*UserPrivacySettingAllowChatInvites) UserPrivacySettingType() string {
	return TypeUserPrivacySettingAllowChatInvites
}

// UserPrivacySettingAllowCalls a privacy setting for managing whether the user can be called
type UserPrivacySettingAllowCalls struct {
	meta
}

// MarshalJSON returns UserPrivacySettingAllowCalls object as the JSON encoding of UserPrivacySettingAllowCalls.
func (entity *UserPrivacySettingAllowCalls) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UserPrivacySettingAllowCalls

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UserPrivacySettingAllowCalls) GetClass() string {
	return ClassUserPrivacySetting
}

// GetType returns constant class type string of the class.
func (*UserPrivacySettingAllowCalls) GetType() string {
	return TypeUserPrivacySettingAllowCalls
}

// UserPrivacySettingType returns constant class type string of the class.
func (*UserPrivacySettingAllowCalls) UserPrivacySettingType() string {
	return TypeUserPrivacySettingAllowCalls
}

// AccountTTL contains information about the period of inactivity after which the current user's account will automatically be deleted
type AccountTTL struct {
	meta
	// Number of days of inactivity before the account will be flagged for deletion; should range from 30-366 days
	Days int32 `json:"days"`
}

// MarshalJSON returns AccountTTL object as the JSON encoding of AccountTTL.
func (entity *AccountTTL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub AccountTTL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*AccountTTL) GetClass() string {
	return ClassAccountTTL
}

// GetType returns constant class type string of the class.
func (*AccountTTL) GetType() string {
	return TypeAccountTTL
}

// Session contains information about one session in a Telegram application used by the current user
type Session struct {
	meta
	// Session identifier
	ID Int64JSON `json:"id"`
	// True, if this session is the current session
	IsCurrent bool `json:"is_current"`
	// Telegram API identifier, as provided by the application
	APIID int32 `json:"api_id"`
	// Name of the application, as provided by the application
	ApplicationName string `json:"application_name"`
	// The version of the application, as provided by the application
	ApplicationVersion string `json:"application_version"`
	// True, if the application is an official application or uses the api_id of an official application
	IsOfficialApplication bool `json:"is_official_application"`
	// Model of the device the application has been run or is running on, as provided by the application
	DeviceModel string `json:"device_model"`
	// Operating system the application has been run or is running on, as provided by the application
	Platform string `json:"platform"`
	// Version of the operating system the application has been run or is running on, as provided by the application
	SystemVersion string `json:"system_version"`
	// Point in time (Unix timestamp) when the user has logged in
	LogInDate int32 `json:"log_in_date"`
	// Point in time (Unix timestamp) when the session was last used
	LastActiveDate int32 `json:"last_active_date"`
	// IP address from which the session was created, in human-readable format
	IP string `json:"ip"`
	// A two-letter country code for the country from which the session was created, based on the IP address
	Country string `json:"country"`
	// Region code from which the session was created, based on the IP address
	Region string `json:"region"`
}

// MarshalJSON returns Session object as the JSON encoding of Session.
func (entity *Session) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Session

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Session) GetClass() string {
	return ClassSession
}

// GetType returns constant class type string of the class.
func (*Session) GetType() string {
	return TypeSession
}

// Sessions contains a list of sessions
type Sessions struct {
	meta
	// List of sessions
	Sessions []*Session `json:"sessions"`
}

// MarshalJSON returns Sessions object as the JSON encoding of Sessions.
func (entity *Sessions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Sessions

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Sessions) GetClass() string {
	return ClassSessions
}

// GetType returns constant class type string of the class.
func (*Sessions) GetType() string {
	return TypeSessions
}

// ConnectedWebsite contains information about one website the current user is logged in with Telegram
type ConnectedWebsite struct {
	meta
	// Website identifier
	ID Int64JSON `json:"id"`
	// The domain name of the website
	DomainName string `json:"domain_name"`
	// User identifier of a bot linked with the website
	BotUserID int32 `json:"bot_user_id"`
	// The version of a browser used to log in
	Browser string `json:"browser"`
	// Operating system the browser is running on
	Platform string `json:"platform"`
	// Point in time (Unix timestamp) when the user was logged in
	LogInDate int32 `json:"log_in_date"`
	// Point in time (Unix timestamp) when obtained authorization was last used
	LastActiveDate int32 `json:"last_active_date"`
	// IP address from which the user was logged in, in human-readable format
	IP string `json:"ip"`
	// Human-readable description of a country and a region, from which the user was logged in, based on the IP address
	Location string `json:"location"`
}

// MarshalJSON returns ConnectedWebsite object as the JSON encoding of ConnectedWebsite.
func (entity *ConnectedWebsite) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ConnectedWebsite

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ConnectedWebsite) GetClass() string {
	return ClassConnectedWebsite
}

// GetType returns constant class type string of the class.
func (*ConnectedWebsite) GetType() string {
	return TypeConnectedWebsite
}

// ConnectedWebsites contains a list of websites the current user is logged in with Telegram
type ConnectedWebsites struct {
	meta
	// List of connected websites
	Websites []*ConnectedWebsite `json:"websites"`
}

// MarshalJSON returns ConnectedWebsites object as the JSON encoding of ConnectedWebsites.
func (entity *ConnectedWebsites) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ConnectedWebsites

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ConnectedWebsites) GetClass() string {
	return ClassConnectedWebsites
}

// GetType returns constant class type string of the class.
func (*ConnectedWebsites) GetType() string {
	return TypeConnectedWebsites
}

// ChatReportSpamState contains information about the availability of the "Report spam" action for a chat
type ChatReportSpamState struct {
	meta
	// True, if a prompt with the "Report spam" action should be shown to the user
	CanReportSpam bool `json:"can_report_spam"`
}

// MarshalJSON returns ChatReportSpamState object as the JSON encoding of ChatReportSpamState.
func (entity *ChatReportSpamState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatReportSpamState

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatReportSpamState) GetClass() string {
	return ClassChatReportSpamState
}

// GetType returns constant class type string of the class.
func (*ChatReportSpamState) GetType() string {
	return TypeChatReportSpamState
}

// ChatReportReasonSpam the chat contains spam messages
type ChatReportReasonSpam struct {
	meta
}

// MarshalJSON returns ChatReportReasonSpam object as the JSON encoding of ChatReportReasonSpam.
func (entity *ChatReportReasonSpam) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatReportReasonSpam

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatReportReasonSpam) GetClass() string {
	return ClassChatReportReason
}

// GetType returns constant class type string of the class.
func (*ChatReportReasonSpam) GetType() string {
	return TypeChatReportReasonSpam
}

// ChatReportReasonType returns constant class type string of the class.
func (*ChatReportReasonSpam) ChatReportReasonType() string {
	return TypeChatReportReasonSpam
}

// ChatReportReasonViolence the chat promotes violence
type ChatReportReasonViolence struct {
	meta
}

// MarshalJSON returns ChatReportReasonViolence object as the JSON encoding of ChatReportReasonViolence.
func (entity *ChatReportReasonViolence) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatReportReasonViolence

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatReportReasonViolence) GetClass() string {
	return ClassChatReportReason
}

// GetType returns constant class type string of the class.
func (*ChatReportReasonViolence) GetType() string {
	return TypeChatReportReasonViolence
}

// ChatReportReasonType returns constant class type string of the class.
func (*ChatReportReasonViolence) ChatReportReasonType() string {
	return TypeChatReportReasonViolence
}

// ChatReportReasonPornography the chat contains pornographic messages
type ChatReportReasonPornography struct {
	meta
}

// MarshalJSON returns ChatReportReasonPornography object as the JSON encoding of ChatReportReasonPornography.
func (entity *ChatReportReasonPornography) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatReportReasonPornography

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatReportReasonPornography) GetClass() string {
	return ClassChatReportReason
}

// GetType returns constant class type string of the class.
func (*ChatReportReasonPornography) GetType() string {
	return TypeChatReportReasonPornography
}

// ChatReportReasonType returns constant class type string of the class.
func (*ChatReportReasonPornography) ChatReportReasonType() string {
	return TypeChatReportReasonPornography
}

// ChatReportReasonCopyright the chat contains copyrighted content
type ChatReportReasonCopyright struct {
	meta
}

// MarshalJSON returns ChatReportReasonCopyright object as the JSON encoding of ChatReportReasonCopyright.
func (entity *ChatReportReasonCopyright) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatReportReasonCopyright

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatReportReasonCopyright) GetClass() string {
	return ClassChatReportReason
}

// GetType returns constant class type string of the class.
func (*ChatReportReasonCopyright) GetType() string {
	return TypeChatReportReasonCopyright
}

// ChatReportReasonType returns constant class type string of the class.
func (*ChatReportReasonCopyright) ChatReportReasonType() string {
	return TypeChatReportReasonCopyright
}

// ChatReportReasonCustom a custom reason provided by the user
type ChatReportReasonCustom struct {
	meta
	// Report text
	Text string `json:"text"`
}

// MarshalJSON returns ChatReportReasonCustom object as the JSON encoding of ChatReportReasonCustom.
func (entity *ChatReportReasonCustom) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ChatReportReasonCustom

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ChatReportReasonCustom) GetClass() string {
	return ClassChatReportReason
}

// GetType returns constant class type string of the class.
func (*ChatReportReasonCustom) GetType() string {
	return TypeChatReportReasonCustom
}

// ChatReportReasonType returns constant class type string of the class.
func (*ChatReportReasonCustom) ChatReportReasonType() string {
	return TypeChatReportReasonCustom
}

// PublicMessageLink contains a public HTTPS link to a message in a public supergroup or channel
type PublicMessageLink struct {
	meta
	// Message link
	Link string `json:"link"`
	// HTML-code for embedding the message
	HTML string `json:"html"`
}

// MarshalJSON returns PublicMessageLink object as the JSON encoding of PublicMessageLink.
func (entity *PublicMessageLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub PublicMessageLink

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*PublicMessageLink) GetClass() string {
	return ClassPublicMessageLink
}

// GetType returns constant class type string of the class.
func (*PublicMessageLink) GetType() string {
	return TypePublicMessageLink
}

// FileTypeNone the data is not a file
type FileTypeNone struct {
	meta
}

// MarshalJSON returns FileTypeNone object as the JSON encoding of FileTypeNone.
func (entity *FileTypeNone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeNone

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeNone) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeNone) GetType() string {
	return TypeFileTypeNone
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeNone) FileTypeType() string {
	return TypeFileTypeNone
}

// FileTypeAnimation the file is an animation
type FileTypeAnimation struct {
	meta
}

// MarshalJSON returns FileTypeAnimation object as the JSON encoding of FileTypeAnimation.
func (entity *FileTypeAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeAnimation

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeAnimation) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeAnimation) GetType() string {
	return TypeFileTypeAnimation
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeAnimation) FileTypeType() string {
	return TypeFileTypeAnimation
}

// FileTypeAudio the file is an audio file
type FileTypeAudio struct {
	meta
}

// MarshalJSON returns FileTypeAudio object as the JSON encoding of FileTypeAudio.
func (entity *FileTypeAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeAudio

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeAudio) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeAudio) GetType() string {
	return TypeFileTypeAudio
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeAudio) FileTypeType() string {
	return TypeFileTypeAudio
}

// FileTypeDocument the file is a document
type FileTypeDocument struct {
	meta
}

// MarshalJSON returns FileTypeDocument object as the JSON encoding of FileTypeDocument.
func (entity *FileTypeDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeDocument

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeDocument) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeDocument) GetType() string {
	return TypeFileTypeDocument
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeDocument) FileTypeType() string {
	return TypeFileTypeDocument
}

// FileTypePhoto the file is a photo
type FileTypePhoto struct {
	meta
}

// MarshalJSON returns FileTypePhoto object as the JSON encoding of FileTypePhoto.
func (entity *FileTypePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypePhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypePhoto) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypePhoto) GetType() string {
	return TypeFileTypePhoto
}

// FileTypeType returns constant class type string of the class.
func (*FileTypePhoto) FileTypeType() string {
	return TypeFileTypePhoto
}

// FileTypeProfilePhoto the file is a profile photo
type FileTypeProfilePhoto struct {
	meta
}

// MarshalJSON returns FileTypeProfilePhoto object as the JSON encoding of FileTypeProfilePhoto.
func (entity *FileTypeProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeProfilePhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeProfilePhoto) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeProfilePhoto) GetType() string {
	return TypeFileTypeProfilePhoto
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeProfilePhoto) FileTypeType() string {
	return TypeFileTypeProfilePhoto
}

// FileTypeSecret the file was sent to a secret chat (the file type is not known to the server)
type FileTypeSecret struct {
	meta
}

// MarshalJSON returns FileTypeSecret object as the JSON encoding of FileTypeSecret.
func (entity *FileTypeSecret) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeSecret

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeSecret) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeSecret) GetType() string {
	return TypeFileTypeSecret
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeSecret) FileTypeType() string {
	return TypeFileTypeSecret
}

// FileTypeSecretThumbnail the file is a thumbnail of a file from a secret chat
type FileTypeSecretThumbnail struct {
	meta
}

// MarshalJSON returns FileTypeSecretThumbnail object as the JSON encoding of FileTypeSecretThumbnail.
func (entity *FileTypeSecretThumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeSecretThumbnail

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeSecretThumbnail) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeSecretThumbnail) GetType() string {
	return TypeFileTypeSecretThumbnail
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeSecretThumbnail) FileTypeType() string {
	return TypeFileTypeSecretThumbnail
}

// FileTypeSecure the file is a file from Secure storage used for storing Telegram Passport files
type FileTypeSecure struct {
	meta
}

// MarshalJSON returns FileTypeSecure object as the JSON encoding of FileTypeSecure.
func (entity *FileTypeSecure) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeSecure

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeSecure) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeSecure) GetType() string {
	return TypeFileTypeSecure
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeSecure) FileTypeType() string {
	return TypeFileTypeSecure
}

// FileTypeSticker the file is a sticker
type FileTypeSticker struct {
	meta
}

// MarshalJSON returns FileTypeSticker object as the JSON encoding of FileTypeSticker.
func (entity *FileTypeSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeSticker

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeSticker) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeSticker) GetType() string {
	return TypeFileTypeSticker
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeSticker) FileTypeType() string {
	return TypeFileTypeSticker
}

// FileTypeThumbnail the file is a thumbnail of another file
type FileTypeThumbnail struct {
	meta
}

// MarshalJSON returns FileTypeThumbnail object as the JSON encoding of FileTypeThumbnail.
func (entity *FileTypeThumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeThumbnail

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeThumbnail) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeThumbnail) GetType() string {
	return TypeFileTypeThumbnail
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeThumbnail) FileTypeType() string {
	return TypeFileTypeThumbnail
}

// FileTypeUnknown the file type is not yet known
type FileTypeUnknown struct {
	meta
}

// MarshalJSON returns FileTypeUnknown object as the JSON encoding of FileTypeUnknown.
func (entity *FileTypeUnknown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeUnknown

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeUnknown) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeUnknown) GetType() string {
	return TypeFileTypeUnknown
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeUnknown) FileTypeType() string {
	return TypeFileTypeUnknown
}

// FileTypeVideo the file is a video
type FileTypeVideo struct {
	meta
}

// MarshalJSON returns FileTypeVideo object as the JSON encoding of FileTypeVideo.
func (entity *FileTypeVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeVideo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeVideo) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeVideo) GetType() string {
	return TypeFileTypeVideo
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeVideo) FileTypeType() string {
	return TypeFileTypeVideo
}

// FileTypeVideoNote the file is a video note
type FileTypeVideoNote struct {
	meta
}

// MarshalJSON returns FileTypeVideoNote object as the JSON encoding of FileTypeVideoNote.
func (entity *FileTypeVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeVideoNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeVideoNote) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeVideoNote) GetType() string {
	return TypeFileTypeVideoNote
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeVideoNote) FileTypeType() string {
	return TypeFileTypeVideoNote
}

// FileTypeVoiceNote the file is a voice note
type FileTypeVoiceNote struct {
	meta
}

// MarshalJSON returns FileTypeVoiceNote object as the JSON encoding of FileTypeVoiceNote.
func (entity *FileTypeVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeVoiceNote

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeVoiceNote) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeVoiceNote) GetType() string {
	return TypeFileTypeVoiceNote
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeVoiceNote) FileTypeType() string {
	return TypeFileTypeVoiceNote
}

// FileTypeWallpaper the file is a wallpaper
type FileTypeWallpaper struct {
	meta
}

// MarshalJSON returns FileTypeWallpaper object as the JSON encoding of FileTypeWallpaper.
func (entity *FileTypeWallpaper) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub FileTypeWallpaper

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*FileTypeWallpaper) GetClass() string {
	return ClassFileType
}

// GetType returns constant class type string of the class.
func (*FileTypeWallpaper) GetType() string {
	return TypeFileTypeWallpaper
}

// FileTypeType returns constant class type string of the class.
func (*FileTypeWallpaper) FileTypeType() string {
	return TypeFileTypeWallpaper
}

// StorageStatisticsByFileType contains the storage usage statistics for a specific file type
type StorageStatisticsByFileType struct {
	meta
	// File type
	FileType FileType `json:"file_type"`
	// Total size of the files
	Size int64 `json:"size"`
	// Total number of files
	Count int32 `json:"count"`
}

// MarshalJSON returns StorageStatisticsByFileType object as the JSON encoding of StorageStatisticsByFileType.
func (entity *StorageStatisticsByFileType) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StorageStatisticsByFileType

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StorageStatisticsByFileType) GetClass() string {
	return ClassStorageStatisticsByFileType
}

// GetType returns constant class type string of the class.
func (*StorageStatisticsByFileType) GetType() string {
	return TypeStorageStatisticsByFileType
}

// UnmarshalJSON sets StorageStatisticsByFileType object to a copy of JSON encoding of StorageStatisticsByFileType.
func (entity *StorageStatisticsByFileType) UnmarshalJSON(data []byte) error {
	var tmp struct {
		FileType json.RawMessage `json:"file_type"`
		Size     int64           `json:"size"`
		Count    int32           `json:"count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Size = tmp.Size
	entity.Count = tmp.Count

	fieldFileType, _ := UnmarshalFileType(tmp.FileType)
	entity.FileType = fieldFileType

	return nil
}

// StorageStatisticsByChat contains the storage usage statistics for a specific chat
type StorageStatisticsByChat struct {
	meta
	// Chat identifier; 0 if none
	ChatID int64 `json:"chat_id"`
	// Total size of the files in the chat
	Size int64 `json:"size"`
	// Total number of files in the chat
	Count int32 `json:"count"`
	// Statistics split by file types
	ByFileType []*StorageStatisticsByFileType `json:"by_file_type"`
}

// MarshalJSON returns StorageStatisticsByChat object as the JSON encoding of StorageStatisticsByChat.
func (entity *StorageStatisticsByChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StorageStatisticsByChat

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StorageStatisticsByChat) GetClass() string {
	return ClassStorageStatisticsByChat
}

// GetType returns constant class type string of the class.
func (*StorageStatisticsByChat) GetType() string {
	return TypeStorageStatisticsByChat
}

// StorageStatistics contains the exact storage usage statistics split by chats and file type
type StorageStatistics struct {
	meta
	// Total size of files
	Size int64 `json:"size"`
	// Total number of files
	Count int32 `json:"count"`
	// Statistics split by chats
	ByChat []*StorageStatisticsByChat `json:"by_chat"`
}

// MarshalJSON returns StorageStatistics object as the JSON encoding of StorageStatistics.
func (entity *StorageStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StorageStatistics

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StorageStatistics) GetClass() string {
	return ClassStorageStatistics
}

// GetType returns constant class type string of the class.
func (*StorageStatistics) GetType() string {
	return TypeStorageStatistics
}

// StorageStatisticsFast contains approximate storage usage statistics, excluding files of unknown file type
type StorageStatisticsFast struct {
	meta
	// Approximate total size of files
	FilesSize int64 `json:"files_size"`
	// Approximate number of files
	FileCount int32 `json:"file_count"`
	// Size of the database
	DatabaseSize int64 `json:"database_size"`
}

// MarshalJSON returns StorageStatisticsFast object as the JSON encoding of StorageStatisticsFast.
func (entity *StorageStatisticsFast) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub StorageStatisticsFast

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*StorageStatisticsFast) GetClass() string {
	return ClassStorageStatisticsFast
}

// GetType returns constant class type string of the class.
func (*StorageStatisticsFast) GetType() string {
	return TypeStorageStatisticsFast
}

// NetworkTypeNone the network is not available
type NetworkTypeNone struct {
	meta
}

// MarshalJSON returns NetworkTypeNone object as the JSON encoding of NetworkTypeNone.
func (entity *NetworkTypeNone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkTypeNone

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkTypeNone) GetClass() string {
	return ClassNetworkType
}

// GetType returns constant class type string of the class.
func (*NetworkTypeNone) GetType() string {
	return TypeNetworkTypeNone
}

// NetworkTypeType returns constant class type string of the class.
func (*NetworkTypeNone) NetworkTypeType() string {
	return TypeNetworkTypeNone
}

// NetworkTypeMobile a mobile network
type NetworkTypeMobile struct {
	meta
}

// MarshalJSON returns NetworkTypeMobile object as the JSON encoding of NetworkTypeMobile.
func (entity *NetworkTypeMobile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkTypeMobile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkTypeMobile) GetClass() string {
	return ClassNetworkType
}

// GetType returns constant class type string of the class.
func (*NetworkTypeMobile) GetType() string {
	return TypeNetworkTypeMobile
}

// NetworkTypeType returns constant class type string of the class.
func (*NetworkTypeMobile) NetworkTypeType() string {
	return TypeNetworkTypeMobile
}

// NetworkTypeMobileRoaming a mobile roaming network
type NetworkTypeMobileRoaming struct {
	meta
}

// MarshalJSON returns NetworkTypeMobileRoaming object as the JSON encoding of NetworkTypeMobileRoaming.
func (entity *NetworkTypeMobileRoaming) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkTypeMobileRoaming

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkTypeMobileRoaming) GetClass() string {
	return ClassNetworkType
}

// GetType returns constant class type string of the class.
func (*NetworkTypeMobileRoaming) GetType() string {
	return TypeNetworkTypeMobileRoaming
}

// NetworkTypeType returns constant class type string of the class.
func (*NetworkTypeMobileRoaming) NetworkTypeType() string {
	return TypeNetworkTypeMobileRoaming
}

// NetworkTypeWiFi a Wi-Fi network
type NetworkTypeWiFi struct {
	meta
}

// MarshalJSON returns NetworkTypeWiFi object as the JSON encoding of NetworkTypeWiFi.
func (entity *NetworkTypeWiFi) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkTypeWiFi

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkTypeWiFi) GetClass() string {
	return ClassNetworkType
}

// GetType returns constant class type string of the class.
func (*NetworkTypeWiFi) GetType() string {
	return TypeNetworkTypeWiFi
}

// NetworkTypeType returns constant class type string of the class.
func (*NetworkTypeWiFi) NetworkTypeType() string {
	return TypeNetworkTypeWiFi
}

// NetworkTypeOther a different network type (e.g., Ethernet network)
type NetworkTypeOther struct {
	meta
}

// MarshalJSON returns NetworkTypeOther object as the JSON encoding of NetworkTypeOther.
func (entity *NetworkTypeOther) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkTypeOther

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkTypeOther) GetClass() string {
	return ClassNetworkType
}

// GetType returns constant class type string of the class.
func (*NetworkTypeOther) GetType() string {
	return TypeNetworkTypeOther
}

// NetworkTypeType returns constant class type string of the class.
func (*NetworkTypeOther) NetworkTypeType() string {
	return TypeNetworkTypeOther
}

// NetworkStatisticsEntryFile contains information about the total amount of data that was used to send and receive files
type NetworkStatisticsEntryFile struct {
	meta
	// Type of the file the data is part of
	FileType FileType `json:"file_type"`
	// Type of the network the data was sent through. Call setNetworkType to maintain the actual network type
	NetworkType NetworkType `json:"network_type"`
	// Total number of bytes sent
	SentBytes int64 `json:"sent_bytes"`
	// Total number of bytes received
	ReceivedBytes int64 `json:"received_bytes"`
}

// MarshalJSON returns NetworkStatisticsEntryFile object as the JSON encoding of NetworkStatisticsEntryFile.
func (entity *NetworkStatisticsEntryFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkStatisticsEntryFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkStatisticsEntryFile) GetClass() string {
	return ClassNetworkStatisticsEntry
}

// GetType returns constant class type string of the class.
func (*NetworkStatisticsEntryFile) GetType() string {
	return TypeNetworkStatisticsEntryFile
}

// NetworkStatisticsEntryType returns constant class type string of the class.
func (*NetworkStatisticsEntryFile) NetworkStatisticsEntryType() string {
	return TypeNetworkStatisticsEntryFile
}

// UnmarshalJSON sets NetworkStatisticsEntryFile object to a copy of JSON encoding of NetworkStatisticsEntryFile.
func (entity *NetworkStatisticsEntryFile) UnmarshalJSON(data []byte) error {
	var tmp struct {
		FileType      json.RawMessage `json:"file_type"`
		NetworkType   json.RawMessage `json:"network_type"`
		SentBytes     int64           `json:"sent_bytes"`
		ReceivedBytes int64           `json:"received_bytes"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.SentBytes = tmp.SentBytes
	entity.ReceivedBytes = tmp.ReceivedBytes

	fieldFileType, _ := UnmarshalFileType(tmp.FileType)
	entity.FileType = fieldFileType

	fieldNetworkType, _ := UnmarshalNetworkType(tmp.NetworkType)
	entity.NetworkType = fieldNetworkType

	return nil
}

// NetworkStatisticsEntryCall contains information about the total amount of data that was used for calls
type NetworkStatisticsEntryCall struct {
	meta
	// Type of the network the data was sent through. Call setNetworkType to maintain the actual network type
	NetworkType NetworkType `json:"network_type"`
	// Total number of bytes sent
	SentBytes int64 `json:"sent_bytes"`
	// Total number of bytes received
	ReceivedBytes int64 `json:"received_bytes"`
	// Total call duration, in seconds
	Duration float64 `json:"duration"`
}

// MarshalJSON returns NetworkStatisticsEntryCall object as the JSON encoding of NetworkStatisticsEntryCall.
func (entity *NetworkStatisticsEntryCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkStatisticsEntryCall

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkStatisticsEntryCall) GetClass() string {
	return ClassNetworkStatisticsEntry
}

// GetType returns constant class type string of the class.
func (*NetworkStatisticsEntryCall) GetType() string {
	return TypeNetworkStatisticsEntryCall
}

// NetworkStatisticsEntryType returns constant class type string of the class.
func (*NetworkStatisticsEntryCall) NetworkStatisticsEntryType() string {
	return TypeNetworkStatisticsEntryCall
}

// UnmarshalJSON sets NetworkStatisticsEntryCall object to a copy of JSON encoding of NetworkStatisticsEntryCall.
func (entity *NetworkStatisticsEntryCall) UnmarshalJSON(data []byte) error {
	var tmp struct {
		NetworkType   json.RawMessage `json:"network_type"`
		SentBytes     int64           `json:"sent_bytes"`
		ReceivedBytes int64           `json:"received_bytes"`
		Duration      float64         `json:"duration"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.SentBytes = tmp.SentBytes
	entity.ReceivedBytes = tmp.ReceivedBytes
	entity.Duration = tmp.Duration

	fieldNetworkType, _ := UnmarshalNetworkType(tmp.NetworkType)
	entity.NetworkType = fieldNetworkType

	return nil
}

// NetworkStatistics a full list of available network statistic entries
type NetworkStatistics struct {
	meta
	// Point in time (Unix timestamp) when the app began collecting statistics
	SinceDate int32 `json:"since_date"`
	// Network statistics entries
	Entries []NetworkStatisticsEntry `json:"entries"`
}

// MarshalJSON returns NetworkStatistics object as the JSON encoding of NetworkStatistics.
func (entity *NetworkStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub NetworkStatistics

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*NetworkStatistics) GetClass() string {
	return ClassNetworkStatistics
}

// GetType returns constant class type string of the class.
func (*NetworkStatistics) GetType() string {
	return TypeNetworkStatistics
}

// ConnectionStateWaitingForNetwork currently waiting for the network to become available. Use SetNetworkType to change the available network type
type ConnectionStateWaitingForNetwork struct {
	meta
}

// MarshalJSON returns ConnectionStateWaitingForNetwork object as the JSON encoding of ConnectionStateWaitingForNetwork.
func (entity *ConnectionStateWaitingForNetwork) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ConnectionStateWaitingForNetwork

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ConnectionStateWaitingForNetwork) GetClass() string {
	return ClassConnectionState
}

// GetType returns constant class type string of the class.
func (*ConnectionStateWaitingForNetwork) GetType() string {
	return TypeConnectionStateWaitingForNetwork
}

// ConnectionStateType returns constant class type string of the class.
func (*ConnectionStateWaitingForNetwork) ConnectionStateType() string {
	return TypeConnectionStateWaitingForNetwork
}

// ConnectionStateConnectingToProxy currently establishing a connection with a proxy server
type ConnectionStateConnectingToProxy struct {
	meta
}

// MarshalJSON returns ConnectionStateConnectingToProxy object as the JSON encoding of ConnectionStateConnectingToProxy.
func (entity *ConnectionStateConnectingToProxy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ConnectionStateConnectingToProxy

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ConnectionStateConnectingToProxy) GetClass() string {
	return ClassConnectionState
}

// GetType returns constant class type string of the class.
func (*ConnectionStateConnectingToProxy) GetType() string {
	return TypeConnectionStateConnectingToProxy
}

// ConnectionStateType returns constant class type string of the class.
func (*ConnectionStateConnectingToProxy) ConnectionStateType() string {
	return TypeConnectionStateConnectingToProxy
}

// ConnectionStateConnecting currently establishing a connection to the Telegram servers
type ConnectionStateConnecting struct {
	meta
}

// MarshalJSON returns ConnectionStateConnecting object as the JSON encoding of ConnectionStateConnecting.
func (entity *ConnectionStateConnecting) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ConnectionStateConnecting

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ConnectionStateConnecting) GetClass() string {
	return ClassConnectionState
}

// GetType returns constant class type string of the class.
func (*ConnectionStateConnecting) GetType() string {
	return TypeConnectionStateConnecting
}

// ConnectionStateType returns constant class type string of the class.
func (*ConnectionStateConnecting) ConnectionStateType() string {
	return TypeConnectionStateConnecting
}

// ConnectionStateUpdating downloading data received while the client was offline
type ConnectionStateUpdating struct {
	meta
}

// MarshalJSON returns ConnectionStateUpdating object as the JSON encoding of ConnectionStateUpdating.
func (entity *ConnectionStateUpdating) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ConnectionStateUpdating

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ConnectionStateUpdating) GetClass() string {
	return ClassConnectionState
}

// GetType returns constant class type string of the class.
func (*ConnectionStateUpdating) GetType() string {
	return TypeConnectionStateUpdating
}

// ConnectionStateType returns constant class type string of the class.
func (*ConnectionStateUpdating) ConnectionStateType() string {
	return TypeConnectionStateUpdating
}

// ConnectionStateReady there is a working connection to the Telegram servers
type ConnectionStateReady struct {
	meta
}

// MarshalJSON returns ConnectionStateReady object as the JSON encoding of ConnectionStateReady.
func (entity *ConnectionStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ConnectionStateReady

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ConnectionStateReady) GetClass() string {
	return ClassConnectionState
}

// GetType returns constant class type string of the class.
func (*ConnectionStateReady) GetType() string {
	return TypeConnectionStateReady
}

// ConnectionStateType returns constant class type string of the class.
func (*ConnectionStateReady) ConnectionStateType() string {
	return TypeConnectionStateReady
}

// TopChatCategoryUsers a category containing frequently used private chats with non-bot users
type TopChatCategoryUsers struct {
	meta
}

// MarshalJSON returns TopChatCategoryUsers object as the JSON encoding of TopChatCategoryUsers.
func (entity *TopChatCategoryUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TopChatCategoryUsers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TopChatCategoryUsers) GetClass() string {
	return ClassTopChatCategory
}

// GetType returns constant class type string of the class.
func (*TopChatCategoryUsers) GetType() string {
	return TypeTopChatCategoryUsers
}

// TopChatCategoryType returns constant class type string of the class.
func (*TopChatCategoryUsers) TopChatCategoryType() string {
	return TypeTopChatCategoryUsers
}

// TopChatCategoryBots a category containing frequently used private chats with bot users
type TopChatCategoryBots struct {
	meta
}

// MarshalJSON returns TopChatCategoryBots object as the JSON encoding of TopChatCategoryBots.
func (entity *TopChatCategoryBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TopChatCategoryBots

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TopChatCategoryBots) GetClass() string {
	return ClassTopChatCategory
}

// GetType returns constant class type string of the class.
func (*TopChatCategoryBots) GetType() string {
	return TypeTopChatCategoryBots
}

// TopChatCategoryType returns constant class type string of the class.
func (*TopChatCategoryBots) TopChatCategoryType() string {
	return TypeTopChatCategoryBots
}

// TopChatCategoryGroups a category containing frequently used basic groups and supergroups
type TopChatCategoryGroups struct {
	meta
}

// MarshalJSON returns TopChatCategoryGroups object as the JSON encoding of TopChatCategoryGroups.
func (entity *TopChatCategoryGroups) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TopChatCategoryGroups

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TopChatCategoryGroups) GetClass() string {
	return ClassTopChatCategory
}

// GetType returns constant class type string of the class.
func (*TopChatCategoryGroups) GetType() string {
	return TypeTopChatCategoryGroups
}

// TopChatCategoryType returns constant class type string of the class.
func (*TopChatCategoryGroups) TopChatCategoryType() string {
	return TypeTopChatCategoryGroups
}

// TopChatCategoryChannels a category containing frequently used channels
type TopChatCategoryChannels struct {
	meta
}

// MarshalJSON returns TopChatCategoryChannels object as the JSON encoding of TopChatCategoryChannels.
func (entity *TopChatCategoryChannels) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TopChatCategoryChannels

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TopChatCategoryChannels) GetClass() string {
	return ClassTopChatCategory
}

// GetType returns constant class type string of the class.
func (*TopChatCategoryChannels) GetType() string {
	return TypeTopChatCategoryChannels
}

// TopChatCategoryType returns constant class type string of the class.
func (*TopChatCategoryChannels) TopChatCategoryType() string {
	return TypeTopChatCategoryChannels
}

// TopChatCategoryInlineBots a category containing frequently used chats with inline bots sorted by their usage in inline mode
type TopChatCategoryInlineBots struct {
	meta
}

// MarshalJSON returns TopChatCategoryInlineBots object as the JSON encoding of TopChatCategoryInlineBots.
func (entity *TopChatCategoryInlineBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TopChatCategoryInlineBots

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TopChatCategoryInlineBots) GetClass() string {
	return ClassTopChatCategory
}

// GetType returns constant class type string of the class.
func (*TopChatCategoryInlineBots) GetType() string {
	return TypeTopChatCategoryInlineBots
}

// TopChatCategoryType returns constant class type string of the class.
func (*TopChatCategoryInlineBots) TopChatCategoryType() string {
	return TypeTopChatCategoryInlineBots
}

// TopChatCategoryCalls a category containing frequently used chats used for calls
type TopChatCategoryCalls struct {
	meta
}

// MarshalJSON returns TopChatCategoryCalls object as the JSON encoding of TopChatCategoryCalls.
func (entity *TopChatCategoryCalls) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TopChatCategoryCalls

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TopChatCategoryCalls) GetClass() string {
	return ClassTopChatCategory
}

// GetType returns constant class type string of the class.
func (*TopChatCategoryCalls) GetType() string {
	return TypeTopChatCategoryCalls
}

// TopChatCategoryType returns constant class type string of the class.
func (*TopChatCategoryCalls) TopChatCategoryType() string {
	return TypeTopChatCategoryCalls
}

// TMeURLTypeUser a URL linking to a user
type TMeURLTypeUser struct {
	meta
	// Identifier of the user
	UserID int32 `json:"user_id"`
}

// MarshalJSON returns TMeURLTypeUser object as the JSON encoding of TMeURLTypeUser.
func (entity *TMeURLTypeUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TMeURLTypeUser

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TMeURLTypeUser) GetClass() string {
	return ClassTMeURLType
}

// GetType returns constant class type string of the class.
func (*TMeURLTypeUser) GetType() string {
	return TypeTMeURLTypeUser
}

// TMeURLTypeType returns constant class type string of the class.
func (*TMeURLTypeUser) TMeURLTypeType() string {
	return TypeTMeURLTypeUser
}

// TMeURLTypeSupergroup a URL linking to a public supergroup or channel
type TMeURLTypeSupergroup struct {
	meta
	// Identifier of the supergroup or channel
	SupergroupID int64 `json:"supergroup_id"`
}

// MarshalJSON returns TMeURLTypeSupergroup object as the JSON encoding of TMeURLTypeSupergroup.
func (entity *TMeURLTypeSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TMeURLTypeSupergroup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TMeURLTypeSupergroup) GetClass() string {
	return ClassTMeURLType
}

// GetType returns constant class type string of the class.
func (*TMeURLTypeSupergroup) GetType() string {
	return TypeTMeURLTypeSupergroup
}

// TMeURLTypeType returns constant class type string of the class.
func (*TMeURLTypeSupergroup) TMeURLTypeType() string {
	return TypeTMeURLTypeSupergroup
}

// TMeURLTypeChatInvite a chat invite link
type TMeURLTypeChatInvite struct {
	meta
	// Chat invite link info
	Info *ChatInviteLinkInfo `json:"info"`
}

// MarshalJSON returns TMeURLTypeChatInvite object as the JSON encoding of TMeURLTypeChatInvite.
func (entity *TMeURLTypeChatInvite) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TMeURLTypeChatInvite

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TMeURLTypeChatInvite) GetClass() string {
	return ClassTMeURLType
}

// GetType returns constant class type string of the class.
func (*TMeURLTypeChatInvite) GetType() string {
	return TypeTMeURLTypeChatInvite
}

// TMeURLTypeType returns constant class type string of the class.
func (*TMeURLTypeChatInvite) TMeURLTypeType() string {
	return TypeTMeURLTypeChatInvite
}

// TMeURLTypeStickerSet a URL linking to a sticker set
type TMeURLTypeStickerSet struct {
	meta
	// Identifier of the sticker set
	StickerSetID Int64JSON `json:"sticker_set_id"`
}

// MarshalJSON returns TMeURLTypeStickerSet object as the JSON encoding of TMeURLTypeStickerSet.
func (entity *TMeURLTypeStickerSet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TMeURLTypeStickerSet

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TMeURLTypeStickerSet) GetClass() string {
	return ClassTMeURLType
}

// GetType returns constant class type string of the class.
func (*TMeURLTypeStickerSet) GetType() string {
	return TypeTMeURLTypeStickerSet
}

// TMeURLTypeType returns constant class type string of the class.
func (*TMeURLTypeStickerSet) TMeURLTypeType() string {
	return TypeTMeURLTypeStickerSet
}

// TMeURL represents a URL linking to an internal Telegram entity
type TMeURL struct {
	meta
	// URL
	URL string `json:"url"`
	// Type of the URL
	Type TMeURLType `json:"type"`
}

// MarshalJSON returns TMeURL object as the JSON encoding of TMeURL.
func (entity *TMeURL) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TMeURL

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TMeURL) GetClass() string {
	return ClassTMeURL
}

// GetType returns constant class type string of the class.
func (*TMeURL) GetType() string {
	return TypeTMeURL
}

// UnmarshalJSON sets TMeURL object to a copy of JSON encoding of TMeURL.
func (entity *TMeURL) UnmarshalJSON(data []byte) error {
	var tmp struct {
		URL  string          `json:"url"`
		Type json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.URL = tmp.URL

	fieldType, _ := UnmarshalTMeURLType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// TMeURLs contains a list of t.me URLs
type TMeURLs struct {
	meta
	// List of URLs
	URLs []*TMeURL `json:"urls"`
}

// MarshalJSON returns TMeURLs object as the JSON encoding of TMeURLs.
func (entity *TMeURLs) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TMeURLs

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TMeURLs) GetClass() string {
	return ClassTMeURLs
}

// GetType returns constant class type string of the class.
func (*TMeURLs) GetType() string {
	return TypeTMeURLs
}

// Count contains a counter
type Count struct {
	meta
	// Count
	Count int32 `json:"count"`
}

// MarshalJSON returns Count object as the JSON encoding of Count.
func (entity *Count) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Count

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Count) GetClass() string {
	return ClassCount
}

// GetType returns constant class type string of the class.
func (*Count) GetType() string {
	return TypeCount
}

// Text contains some text
type Text struct {
	meta
	// Text
	Text string `json:"text"`
}

// MarshalJSON returns Text object as the JSON encoding of Text.
func (entity *Text) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Text

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Text) GetClass() string {
	return ClassText
}

// GetType returns constant class type string of the class.
func (*Text) GetType() string {
	return TypeText
}

// Seconds contains a value representing a number of seconds
type Seconds struct {
	meta
	// Number of seconds
	Seconds float64 `json:"seconds"`
}

// MarshalJSON returns Seconds object as the JSON encoding of Seconds.
func (entity *Seconds) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Seconds

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Seconds) GetClass() string {
	return ClassSeconds
}

// GetType returns constant class type string of the class.
func (*Seconds) GetType() string {
	return TypeSeconds
}

// DeepLinkInfo contains information about a tg:// deep link
type DeepLinkInfo struct {
	meta
	// Text to be shown to the user
	Text *FormattedText `json:"text"`
	// True, if user should be asked to update the application
	NeedUpdateApplication bool `json:"need_update_application"`
}

// MarshalJSON returns DeepLinkInfo object as the JSON encoding of DeepLinkInfo.
func (entity *DeepLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub DeepLinkInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*DeepLinkInfo) GetClass() string {
	return ClassDeepLinkInfo
}

// GetType returns constant class type string of the class.
func (*DeepLinkInfo) GetType() string {
	return TypeDeepLinkInfo
}

// TextParseModeMarkdown the text should be parsed in markdown-style
type TextParseModeMarkdown struct {
	meta
}

// MarshalJSON returns TextParseModeMarkdown object as the JSON encoding of TextParseModeMarkdown.
func (entity *TextParseModeMarkdown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextParseModeMarkdown

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextParseModeMarkdown) GetClass() string {
	return ClassTextParseMode
}

// GetType returns constant class type string of the class.
func (*TextParseModeMarkdown) GetType() string {
	return TypeTextParseModeMarkdown
}

// TextParseModeType returns constant class type string of the class.
func (*TextParseModeMarkdown) TextParseModeType() string {
	return TypeTextParseModeMarkdown
}

// TextParseModeHTML the text should be parsed in HTML-style
type TextParseModeHTML struct {
	meta
}

// MarshalJSON returns TextParseModeHTML object as the JSON encoding of TextParseModeHTML.
func (entity *TextParseModeHTML) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TextParseModeHTML

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TextParseModeHTML) GetClass() string {
	return ClassTextParseMode
}

// GetType returns constant class type string of the class.
func (*TextParseModeHTML) GetType() string {
	return TypeTextParseModeHTML
}

// TextParseModeType returns constant class type string of the class.
func (*TextParseModeHTML) TextParseModeType() string {
	return TypeTextParseModeHTML
}

// ProxyTypeSocks5 a SOCKS5 proxy server
type ProxyTypeSocks5 struct {
	meta
	// Username for logging in; may be empty
	Username string `json:"username"`
	// Password for logging in; may be empty
	Password string `json:"password"`
}

// MarshalJSON returns ProxyTypeSocks5 object as the JSON encoding of ProxyTypeSocks5.
func (entity *ProxyTypeSocks5) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ProxyTypeSocks5

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ProxyTypeSocks5) GetClass() string {
	return ClassProxyType
}

// GetType returns constant class type string of the class.
func (*ProxyTypeSocks5) GetType() string {
	return TypeProxyTypeSocks5
}

// ProxyTypeType returns constant class type string of the class.
func (*ProxyTypeSocks5) ProxyTypeType() string {
	return TypeProxyTypeSocks5
}

// ProxyTypeHTTP a HTTP transparent proxy server
type ProxyTypeHTTP struct {
	meta
	// Username for logging in; may be empty
	Username string `json:"username"`
	// Password for logging in; may be empty
	Password string `json:"password"`
	// Pass true, if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method
	HTTPOnly bool `json:"http_only"`
}

// MarshalJSON returns ProxyTypeHTTP object as the JSON encoding of ProxyTypeHTTP.
func (entity *ProxyTypeHTTP) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ProxyTypeHTTP

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ProxyTypeHTTP) GetClass() string {
	return ClassProxyType
}

// GetType returns constant class type string of the class.
func (*ProxyTypeHTTP) GetType() string {
	return TypeProxyTypeHTTP
}

// ProxyTypeType returns constant class type string of the class.
func (*ProxyTypeHTTP) ProxyTypeType() string {
	return TypeProxyTypeHTTP
}

// ProxyTypeMtproto an MTProto proxy server
type ProxyTypeMtproto struct {
	meta
	// The proxy's secret in hexadecimal encoding
	Secret string `json:"secret"`
}

// MarshalJSON returns ProxyTypeMtproto object as the JSON encoding of ProxyTypeMtproto.
func (entity *ProxyTypeMtproto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub ProxyTypeMtproto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*ProxyTypeMtproto) GetClass() string {
	return ClassProxyType
}

// GetType returns constant class type string of the class.
func (*ProxyTypeMtproto) GetType() string {
	return TypeProxyTypeMtproto
}

// ProxyTypeType returns constant class type string of the class.
func (*ProxyTypeMtproto) ProxyTypeType() string {
	return TypeProxyTypeMtproto
}

// Proxy contains information about a proxy server
type Proxy struct {
	meta
	// Unique identifier of the proxy
	ID int32 `json:"id"`
	// Proxy server IP address
	Server string `json:"server"`
	// Proxy server port
	Port int32 `json:"port"`
	// Point in time (Unix timestamp) when the proxy was last used; 0 if never
	LastUsedDate int32 `json:"last_used_date"`
	// True, if the proxy is enabled now
	IsEnabled bool `json:"is_enabled"`
	// Type of the proxy
	Type ProxyType `json:"type"`
}

// MarshalJSON returns Proxy object as the JSON encoding of Proxy.
func (entity *Proxy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Proxy

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Proxy) GetClass() string {
	return ClassProxy
}

// GetType returns constant class type string of the class.
func (*Proxy) GetType() string {
	return TypeProxy
}

// UnmarshalJSON sets Proxy object to a copy of JSON encoding of Proxy.
func (entity *Proxy) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID           int32           `json:"id"`
		Server       string          `json:"server"`
		Port         int32           `json:"port"`
		LastUsedDate int32           `json:"last_used_date"`
		IsEnabled    bool            `json:"is_enabled"`
		Type         json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.Server = tmp.Server
	entity.Port = tmp.Port
	entity.LastUsedDate = tmp.LastUsedDate
	entity.IsEnabled = tmp.IsEnabled

	fieldType, _ := UnmarshalProxyType(tmp.Type)
	entity.Type = fieldType

	return nil
}

// Proxies represents a list of proxy servers
type Proxies struct {
	meta
	// List of proxy servers
	Proxies []*Proxy `json:"proxies"`
}

// MarshalJSON returns Proxies object as the JSON encoding of Proxies.
func (entity *Proxies) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub Proxies

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*Proxies) GetClass() string {
	return ClassProxies
}

// GetType returns constant class type string of the class.
func (*Proxies) GetType() string {
	return TypeProxies
}

// InputSticker describes a sticker that should be added to a sticker set
type InputSticker struct {
	meta
	// PNG image with the sticker; must be up to 512 kB in size and fit in a 512x512 square
	PngSticker InputFile `json:"png_sticker"`
	// Emoji corresponding to the sticker
	Emojis string `json:"emojis"`
	// For masks, position where the mask should be placed; may be null
	MaskPosition *MaskPosition `json:"mask_position"`
}

// MarshalJSON returns InputSticker object as the JSON encoding of InputSticker.
func (entity *InputSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub InputSticker

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*InputSticker) GetClass() string {
	return ClassInputSticker
}

// GetType returns constant class type string of the class.
func (*InputSticker) GetType() string {
	return TypeInputSticker
}

// UnmarshalJSON sets InputSticker object to a copy of JSON encoding of InputSticker.
func (entity *InputSticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PngSticker   json.RawMessage `json:"png_sticker"`
		Emojis       string          `json:"emojis"`
		MaskPosition *MaskPosition   `json:"mask_position"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Emojis = tmp.Emojis
	entity.MaskPosition = tmp.MaskPosition

	fieldPngSticker, _ := UnmarshalInputFile(tmp.PngSticker)
	entity.PngSticker = fieldPngSticker

	return nil
}

// UpdateAuthorizationState the user authorization state has changed
type UpdateAuthorizationState struct {
	meta
	// New authorization state
	AuthorizationState AuthorizationState `json:"authorization_state"`
}

// MarshalJSON returns UpdateAuthorizationState object as the JSON encoding of UpdateAuthorizationState.
func (entity *UpdateAuthorizationState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateAuthorizationState

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateAuthorizationState) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateAuthorizationState) GetType() string {
	return TypeUpdateAuthorizationState
}

// UpdateType returns constant class type string of the class.
func (*UpdateAuthorizationState) UpdateType() string {
	return TypeUpdateAuthorizationState
}

// UnmarshalJSON sets UpdateAuthorizationState object to a copy of JSON encoding of UpdateAuthorizationState.
func (entity *UpdateAuthorizationState) UnmarshalJSON(data []byte) error {
	var tmp struct {
		AuthorizationState json.RawMessage `json:"authorization_state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldAuthorizationState, _ := UnmarshalAuthorizationState(tmp.AuthorizationState)
	entity.AuthorizationState = fieldAuthorizationState

	return nil
}

// UpdateNewMessage a new message was received; can also be an outgoing message
type UpdateNewMessage struct {
	meta
	// The new message
	Message *Message `json:"message"`
	// True, if this message must not generate a notification
	DisableNotification bool `json:"disable_notification"`
	// True, if the message contains a mention of the current user
	ContainsMention bool `json:"contains_mention"`
}

// MarshalJSON returns UpdateNewMessage object as the JSON encoding of UpdateNewMessage.
func (entity *UpdateNewMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewMessage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewMessage) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewMessage) GetType() string {
	return TypeUpdateNewMessage
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewMessage) UpdateType() string {
	return TypeUpdateNewMessage
}

// UpdateMessageSendAcknowledged a request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully or even that the send message request will be processed. This update will be sent only if the option "use_quick_ack" is set to true. This update may be sent multiple times for the same message
type UpdateMessageSendAcknowledged struct {
	meta
	// The chat identifier of the sent message
	ChatID int64 `json:"chat_id"`
	// A temporary message identifier
	MessageID int64 `json:"message_id"`
}

// MarshalJSON returns UpdateMessageSendAcknowledged object as the JSON encoding of UpdateMessageSendAcknowledged.
func (entity *UpdateMessageSendAcknowledged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageSendAcknowledged

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageSendAcknowledged) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageSendAcknowledged) GetType() string {
	return TypeUpdateMessageSendAcknowledged
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageSendAcknowledged) UpdateType() string {
	return TypeUpdateMessageSendAcknowledged
}

// UpdateMessageSendSucceeded a message has been successfully sent
type UpdateMessageSendSucceeded struct {
	meta
	// Information about the sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change
	Message *Message `json:"message"`
	// The previous temporary message identifier
	OldMessageID int64 `json:"old_message_id"`
}

// MarshalJSON returns UpdateMessageSendSucceeded object as the JSON encoding of UpdateMessageSendSucceeded.
func (entity *UpdateMessageSendSucceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageSendSucceeded

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageSendSucceeded) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageSendSucceeded) GetType() string {
	return TypeUpdateMessageSendSucceeded
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageSendSucceeded) UpdateType() string {
	return TypeUpdateMessageSendSucceeded
}

// UpdateMessageSendFailed a message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update
type UpdateMessageSendFailed struct {
	meta
	// Contains information about the message that failed to send
	Message *Message `json:"message"`
	// The previous temporary message identifier
	OldMessageID int64 `json:"old_message_id"`
	// An error code
	ErrorCode int32 `json:"error_code"`
	// Error message
	ErrorMessage string `json:"error_message"`
}

// MarshalJSON returns UpdateMessageSendFailed object as the JSON encoding of UpdateMessageSendFailed.
func (entity *UpdateMessageSendFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageSendFailed

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageSendFailed) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageSendFailed) GetType() string {
	return TypeUpdateMessageSendFailed
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageSendFailed) UpdateType() string {
	return TypeUpdateMessageSendFailed
}

// UpdateMessageContent the message content has changed
type UpdateMessageContent struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Message identifier
	MessageID int64 `json:"message_id"`
	// New message content
	NewContent MessageContent `json:"new_content"`
}

// MarshalJSON returns UpdateMessageContent object as the JSON encoding of UpdateMessageContent.
func (entity *UpdateMessageContent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageContent

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageContent) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageContent) GetType() string {
	return TypeUpdateMessageContent
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageContent) UpdateType() string {
	return TypeUpdateMessageContent
}

// UnmarshalJSON sets UpdateMessageContent object to a copy of JSON encoding of UpdateMessageContent.
func (entity *UpdateMessageContent) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatID     int64           `json:"chat_id"`
		MessageID  int64           `json:"message_id"`
		NewContent json.RawMessage `json:"new_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ChatID = tmp.ChatID
	entity.MessageID = tmp.MessageID

	fieldNewContent, _ := UnmarshalMessageContent(tmp.NewContent)
	entity.NewContent = fieldNewContent

	return nil
}

// UpdateMessageEdited a message was edited. Changes in the message content will come in a separate updateMessageContent
type UpdateMessageEdited struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Message identifier
	MessageID int64 `json:"message_id"`
	// Point in time (Unix timestamp) when the message was edited
	EditDate int32 `json:"edit_date"`
	// New message reply markup; may be null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

// MarshalJSON returns UpdateMessageEdited object as the JSON encoding of UpdateMessageEdited.
func (entity *UpdateMessageEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageEdited

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageEdited) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageEdited) GetType() string {
	return TypeUpdateMessageEdited
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageEdited) UpdateType() string {
	return TypeUpdateMessageEdited
}

// UnmarshalJSON sets UpdateMessageEdited object to a copy of JSON encoding of UpdateMessageEdited.
func (entity *UpdateMessageEdited) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatID      int64           `json:"chat_id"`
		MessageID   int64           `json:"message_id"`
		EditDate    int32           `json:"edit_date"`
		ReplyMarkup json.RawMessage `json:"reply_markup"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ChatID = tmp.ChatID
	entity.MessageID = tmp.MessageID
	entity.EditDate = tmp.EditDate

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	entity.ReplyMarkup = fieldReplyMarkup

	return nil
}

// UpdateMessageViews the view count of the message has changed
type UpdateMessageViews struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Message identifier
	MessageID int64 `json:"message_id"`
	// New value of the view count
	Views int32 `json:"views"`
}

// MarshalJSON returns UpdateMessageViews object as the JSON encoding of UpdateMessageViews.
func (entity *UpdateMessageViews) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageViews

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageViews) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageViews) GetType() string {
	return TypeUpdateMessageViews
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageViews) UpdateType() string {
	return TypeUpdateMessageViews
}

// UpdateMessageContentOpened the message content was opened. Updates voice note messages to "listened", video note messages to "viewed" and starts the TTL timer for self-destructing messages
type UpdateMessageContentOpened struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Message identifier
	MessageID int64 `json:"message_id"`
}

// MarshalJSON returns UpdateMessageContentOpened object as the JSON encoding of UpdateMessageContentOpened.
func (entity *UpdateMessageContentOpened) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageContentOpened

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageContentOpened) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageContentOpened) GetType() string {
	return TypeUpdateMessageContentOpened
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageContentOpened) UpdateType() string {
	return TypeUpdateMessageContentOpened
}

// UpdateMessageMentionRead a message with an unread mention was read
type UpdateMessageMentionRead struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Message identifier
	MessageID int64 `json:"message_id"`
	// The new number of unread mention messages left in the chat
	UnreadMentionCount int32 `json:"unread_mention_count"`
}

// MarshalJSON returns UpdateMessageMentionRead object as the JSON encoding of UpdateMessageMentionRead.
func (entity *UpdateMessageMentionRead) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateMessageMentionRead

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateMessageMentionRead) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateMessageMentionRead) GetType() string {
	return TypeUpdateMessageMentionRead
}

// UpdateType returns constant class type string of the class.
func (*UpdateMessageMentionRead) UpdateType() string {
	return TypeUpdateMessageMentionRead
}

// UpdateNewChat a new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the client. The chat field changes will be reported through separate updates
type UpdateNewChat struct {
	meta
	// The chat
	Chat *Chat `json:"chat"`
}

// MarshalJSON returns UpdateNewChat object as the JSON encoding of UpdateNewChat.
func (entity *UpdateNewChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewChat

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewChat) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewChat) GetType() string {
	return TypeUpdateNewChat
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewChat) UpdateType() string {
	return TypeUpdateNewChat
}

// UpdateChatTitle the title of a chat was changed
type UpdateChatTitle struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// The new chat title
	Title string `json:"title"`
}

// MarshalJSON returns UpdateChatTitle object as the JSON encoding of UpdateChatTitle.
func (entity *UpdateChatTitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatTitle

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatTitle) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatTitle) GetType() string {
	return TypeUpdateChatTitle
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatTitle) UpdateType() string {
	return TypeUpdateChatTitle
}

// UpdateChatPhoto a chat photo was changed
type UpdateChatPhoto struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// The new chat photo; may be null
	Photo *ChatPhoto `json:"photo"`
}

// MarshalJSON returns UpdateChatPhoto object as the JSON encoding of UpdateChatPhoto.
func (entity *UpdateChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatPhoto

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatPhoto) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatPhoto) GetType() string {
	return TypeUpdateChatPhoto
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatPhoto) UpdateType() string {
	return TypeUpdateChatPhoto
}

// UpdateChatLastMessage the last message of a chat was changed. If last_message is null then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case
type UpdateChatLastMessage struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// The new last message in the chat; may be null
	LastMessage *Message `json:"last_message"`
	// New value of the chat order
	Order Int64JSON `json:"order"`
}

// MarshalJSON returns UpdateChatLastMessage object as the JSON encoding of UpdateChatLastMessage.
func (entity *UpdateChatLastMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatLastMessage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatLastMessage) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatLastMessage) GetType() string {
	return TypeUpdateChatLastMessage
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatLastMessage) UpdateType() string {
	return TypeUpdateChatLastMessage
}

// UpdateChatOrder the order of the chat in the chats list has changed. Instead of this update updateChatLastMessage, updateChatIsPinned or updateChatDraftMessage might be sent
type UpdateChatOrder struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// New value of the order
	Order Int64JSON `json:"order"`
}

// MarshalJSON returns UpdateChatOrder object as the JSON encoding of UpdateChatOrder.
func (entity *UpdateChatOrder) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatOrder

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatOrder) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatOrder) GetType() string {
	return TypeUpdateChatOrder
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatOrder) UpdateType() string {
	return TypeUpdateChatOrder
}

// UpdateChatIsPinned a chat was pinned or unpinned
type UpdateChatIsPinned struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// New value of is_pinned
	IsPinned bool `json:"is_pinned"`
	// New value of the chat order
	Order Int64JSON `json:"order"`
}

// MarshalJSON returns UpdateChatIsPinned object as the JSON encoding of UpdateChatIsPinned.
func (entity *UpdateChatIsPinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatIsPinned

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatIsPinned) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatIsPinned) GetType() string {
	return TypeUpdateChatIsPinned
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatIsPinned) UpdateType() string {
	return TypeUpdateChatIsPinned
}

// UpdateChatIsMarkedAsUnread a chat was marked as unread or was read
type UpdateChatIsMarkedAsUnread struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// New value of is_marked_as_unread
	IsMarkedAsUnread bool `json:"is_marked_as_unread"`
}

// MarshalJSON returns UpdateChatIsMarkedAsUnread object as the JSON encoding of UpdateChatIsMarkedAsUnread.
func (entity *UpdateChatIsMarkedAsUnread) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatIsMarkedAsUnread

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatIsMarkedAsUnread) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatIsMarkedAsUnread) GetType() string {
	return TypeUpdateChatIsMarkedAsUnread
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatIsMarkedAsUnread) UpdateType() string {
	return TypeUpdateChatIsMarkedAsUnread
}

// UpdateChatIsSponsored a chat's is_sponsored field has changed
type UpdateChatIsSponsored struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// New value of is_sponsored
	IsSponsored bool `json:"is_sponsored"`
	// New value of chat order
	Order Int64JSON `json:"order"`
}

// MarshalJSON returns UpdateChatIsSponsored object as the JSON encoding of UpdateChatIsSponsored.
func (entity *UpdateChatIsSponsored) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatIsSponsored

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatIsSponsored) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatIsSponsored) GetType() string {
	return TypeUpdateChatIsSponsored
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatIsSponsored) UpdateType() string {
	return TypeUpdateChatIsSponsored
}

// UpdateChatDefaultDisableNotification the value of the default disable_notification parameter, used when a message is sent to the chat, was changed
type UpdateChatDefaultDisableNotification struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// The new default_disable_notification value
	DefaultDisableNotification bool `json:"default_disable_notification"`
}

// MarshalJSON returns UpdateChatDefaultDisableNotification object as the JSON encoding of UpdateChatDefaultDisableNotification.
func (entity *UpdateChatDefaultDisableNotification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatDefaultDisableNotification

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatDefaultDisableNotification) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatDefaultDisableNotification) GetType() string {
	return TypeUpdateChatDefaultDisableNotification
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatDefaultDisableNotification) UpdateType() string {
	return TypeUpdateChatDefaultDisableNotification
}

// UpdateChatReadInbox incoming messages were read or number of unread messages has been changed
type UpdateChatReadInbox struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Identifier of the last read incoming message
	LastReadInboxMessageID int64 `json:"last_read_inbox_message_id"`
	// The number of unread messages left in the chat
	UnreadCount int32 `json:"unread_count"`
}

// MarshalJSON returns UpdateChatReadInbox object as the JSON encoding of UpdateChatReadInbox.
func (entity *UpdateChatReadInbox) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatReadInbox

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatReadInbox) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatReadInbox) GetType() string {
	return TypeUpdateChatReadInbox
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatReadInbox) UpdateType() string {
	return TypeUpdateChatReadInbox
}

// UpdateChatReadOutbox outgoing messages were read
type UpdateChatReadOutbox struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Identifier of last read outgoing message
	LastReadOutboxMessageID int64 `json:"last_read_outbox_message_id"`
}

// MarshalJSON returns UpdateChatReadOutbox object as the JSON encoding of UpdateChatReadOutbox.
func (entity *UpdateChatReadOutbox) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatReadOutbox

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatReadOutbox) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatReadOutbox) GetType() string {
	return TypeUpdateChatReadOutbox
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatReadOutbox) UpdateType() string {
	return TypeUpdateChatReadOutbox
}

// UpdateChatUnreadMentionCount the chat unread_mention_count has changed
type UpdateChatUnreadMentionCount struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// The number of unread mention messages left in the chat
	UnreadMentionCount int32 `json:"unread_mention_count"`
}

// MarshalJSON returns UpdateChatUnreadMentionCount object as the JSON encoding of UpdateChatUnreadMentionCount.
func (entity *UpdateChatUnreadMentionCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatUnreadMentionCount

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatUnreadMentionCount) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatUnreadMentionCount) GetType() string {
	return TypeUpdateChatUnreadMentionCount
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatUnreadMentionCount) UpdateType() string {
	return TypeUpdateChatUnreadMentionCount
}

// UpdateChatNotificationSettings notification settings for a chat were changed
type UpdateChatNotificationSettings struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// The new notification settings
	NotificationSettings *ChatNotificationSettings `json:"notification_settings"`
}

// MarshalJSON returns UpdateChatNotificationSettings object as the JSON encoding of UpdateChatNotificationSettings.
func (entity *UpdateChatNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatNotificationSettings

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatNotificationSettings) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatNotificationSettings) GetType() string {
	return TypeUpdateChatNotificationSettings
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatNotificationSettings) UpdateType() string {
	return TypeUpdateChatNotificationSettings
}

// UpdateScopeNotificationSettings notification settings for some type of chats were updated
type UpdateScopeNotificationSettings struct {
	meta
	// Types of chats for which notification settings were updated
	Scope NotificationSettingsScope `json:"scope"`
	// The new notification settings
	NotificationSettings *ScopeNotificationSettings `json:"notification_settings"`
}

// MarshalJSON returns UpdateScopeNotificationSettings object as the JSON encoding of UpdateScopeNotificationSettings.
func (entity *UpdateScopeNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateScopeNotificationSettings

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateScopeNotificationSettings) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateScopeNotificationSettings) GetType() string {
	return TypeUpdateScopeNotificationSettings
}

// UpdateType returns constant class type string of the class.
func (*UpdateScopeNotificationSettings) UpdateType() string {
	return TypeUpdateScopeNotificationSettings
}

// UnmarshalJSON sets UpdateScopeNotificationSettings object to a copy of JSON encoding of UpdateScopeNotificationSettings.
func (entity *UpdateScopeNotificationSettings) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Scope                json.RawMessage            `json:"scope"`
		NotificationSettings *ScopeNotificationSettings `json:"notification_settings"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.NotificationSettings = tmp.NotificationSettings

	fieldScope, _ := UnmarshalNotificationSettingsScope(tmp.Scope)
	entity.Scope = fieldScope

	return nil
}

// UpdateChatReplyMarkup the default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user
type UpdateChatReplyMarkup struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat
	ReplyMarkupMessageID int64 `json:"reply_markup_message_id"`
}

// MarshalJSON returns UpdateChatReplyMarkup object as the JSON encoding of UpdateChatReplyMarkup.
func (entity *UpdateChatReplyMarkup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatReplyMarkup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatReplyMarkup) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatReplyMarkup) GetType() string {
	return TypeUpdateChatReplyMarkup
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatReplyMarkup) UpdateType() string {
	return TypeUpdateChatReplyMarkup
}

// UpdateChatDraftMessage a chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update shouldn't be applied
type UpdateChatDraftMessage struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// The new draft message; may be null
	DraftMessage *DraftMessage `json:"draft_message"`
	// New value of the chat order
	Order Int64JSON `json:"order"`
}

// MarshalJSON returns UpdateChatDraftMessage object as the JSON encoding of UpdateChatDraftMessage.
func (entity *UpdateChatDraftMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateChatDraftMessage

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateChatDraftMessage) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateChatDraftMessage) GetType() string {
	return TypeUpdateChatDraftMessage
}

// UpdateType returns constant class type string of the class.
func (*UpdateChatDraftMessage) UpdateType() string {
	return TypeUpdateChatDraftMessage
}

// UpdateDeleteMessages some messages were deleted
type UpdateDeleteMessages struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Identifiers of the deleted messages
	MessageIDs []int64 `json:"message_ids"`
	// True, if the messages are permanently deleted by a user (as opposed to just becoming unaccessible)
	IsPermanent bool `json:"is_permanent"`
	// True, if the messages are deleted only from the cache and can possibly be retrieved again in the future
	FromCache bool `json:"from_cache"`
}

// MarshalJSON returns UpdateDeleteMessages object as the JSON encoding of UpdateDeleteMessages.
func (entity *UpdateDeleteMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateDeleteMessages

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateDeleteMessages) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateDeleteMessages) GetType() string {
	return TypeUpdateDeleteMessages
}

// UpdateType returns constant class type string of the class.
func (*UpdateDeleteMessages) UpdateType() string {
	return TypeUpdateDeleteMessages
}

// UpdateUserChatAction user activity in the chat has changed
type UpdateUserChatAction struct {
	meta
	// Chat identifier
	ChatID int64 `json:"chat_id"`
	// Identifier of a user performing an action
	UserID int32 `json:"user_id"`
	// The action description
	Action ChatAction `json:"action"`
}

// MarshalJSON returns UpdateUserChatAction object as the JSON encoding of UpdateUserChatAction.
func (entity *UpdateUserChatAction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateUserChatAction

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateUserChatAction) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateUserChatAction) GetType() string {
	return TypeUpdateUserChatAction
}

// UpdateType returns constant class type string of the class.
func (*UpdateUserChatAction) UpdateType() string {
	return TypeUpdateUserChatAction
}

// UnmarshalJSON sets UpdateUserChatAction object to a copy of JSON encoding of UpdateUserChatAction.
func (entity *UpdateUserChatAction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatID int64           `json:"chat_id"`
		UserID int32           `json:"user_id"`
		Action json.RawMessage `json:"action"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ChatID = tmp.ChatID
	entity.UserID = tmp.UserID

	fieldAction, _ := UnmarshalChatAction(tmp.Action)
	entity.Action = fieldAction

	return nil
}

// UpdateUserStatus the user went online or offline
type UpdateUserStatus struct {
	meta
	// User identifier
	UserID int32 `json:"user_id"`
	// New status of the user
	Status UserStatus `json:"status"`
}

// MarshalJSON returns UpdateUserStatus object as the JSON encoding of UpdateUserStatus.
func (entity *UpdateUserStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateUserStatus

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateUserStatus) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateUserStatus) GetType() string {
	return TypeUpdateUserStatus
}

// UpdateType returns constant class type string of the class.
func (*UpdateUserStatus) UpdateType() string {
	return TypeUpdateUserStatus
}

// UnmarshalJSON sets UpdateUserStatus object to a copy of JSON encoding of UpdateUserStatus.
func (entity *UpdateUserStatus) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserID int32           `json:"user_id"`
		Status json.RawMessage `json:"status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.UserID = tmp.UserID

	fieldStatus, _ := UnmarshalUserStatus(tmp.Status)
	entity.Status = fieldStatus

	return nil
}

// UpdateUser some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the client
type UpdateUser struct {
	meta
	// New data about the user
	User *User `json:"user"`
}

// MarshalJSON returns UpdateUser object as the JSON encoding of UpdateUser.
func (entity *UpdateUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateUser

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateUser) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateUser) GetType() string {
	return TypeUpdateUser
}

// UpdateType returns constant class type string of the class.
func (*UpdateUser) UpdateType() string {
	return TypeUpdateUser
}

// UpdateBasicGroup some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the client
type UpdateBasicGroup struct {
	meta
	// New data about the group
	BasicGroup *BasicGroup `json:"basic_group"`
}

// MarshalJSON returns UpdateBasicGroup object as the JSON encoding of UpdateBasicGroup.
func (entity *UpdateBasicGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateBasicGroup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateBasicGroup) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateBasicGroup) GetType() string {
	return TypeUpdateBasicGroup
}

// UpdateType returns constant class type string of the class.
func (*UpdateBasicGroup) UpdateType() string {
	return TypeUpdateBasicGroup
}

// UpdateSupergroup some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the client
type UpdateSupergroup struct {
	meta
	// New data about the supergroup
	Supergroup *Supergroup `json:"supergroup"`
}

// MarshalJSON returns UpdateSupergroup object as the JSON encoding of UpdateSupergroup.
func (entity *UpdateSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateSupergroup

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateSupergroup) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateSupergroup) GetType() string {
	return TypeUpdateSupergroup
}

// UpdateType returns constant class type string of the class.
func (*UpdateSupergroup) UpdateType() string {
	return TypeUpdateSupergroup
}

// UpdateSecretChat some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the client
type UpdateSecretChat struct {
	meta
	// New data about the secret chat
	SecretChat *SecretChat `json:"secret_chat"`
}

// MarshalJSON returns UpdateSecretChat object as the JSON encoding of UpdateSecretChat.
func (entity *UpdateSecretChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateSecretChat

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateSecretChat) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateSecretChat) GetType() string {
	return TypeUpdateSecretChat
}

// UpdateType returns constant class type string of the class.
func (*UpdateSecretChat) UpdateType() string {
	return TypeUpdateSecretChat
}

// UpdateUserFullInfo some data from userFullInfo has been changed
type UpdateUserFullInfo struct {
	meta
	// User identifier
	UserID int32 `json:"user_id"`
	// New full information about the user
	UserFullInfo *UserFullInfo `json:"user_full_info"`
}

// MarshalJSON returns UpdateUserFullInfo object as the JSON encoding of UpdateUserFullInfo.
func (entity *UpdateUserFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateUserFullInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateUserFullInfo) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateUserFullInfo) GetType() string {
	return TypeUpdateUserFullInfo
}

// UpdateType returns constant class type string of the class.
func (*UpdateUserFullInfo) UpdateType() string {
	return TypeUpdateUserFullInfo
}

// UpdateBasicGroupFullInfo some data from basicGroupFullInfo has been changed
type UpdateBasicGroupFullInfo struct {
	meta
	// Identifier of a basic group
	BasicGroupID int32 `json:"basic_group_id"`
	// New full information about the group
	BasicGroupFullInfo *BasicGroupFullInfo `json:"basic_group_full_info"`
}

// MarshalJSON returns UpdateBasicGroupFullInfo object as the JSON encoding of UpdateBasicGroupFullInfo.
func (entity *UpdateBasicGroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateBasicGroupFullInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateBasicGroupFullInfo) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateBasicGroupFullInfo) GetType() string {
	return TypeUpdateBasicGroupFullInfo
}

// UpdateType returns constant class type string of the class.
func (*UpdateBasicGroupFullInfo) UpdateType() string {
	return TypeUpdateBasicGroupFullInfo
}

// UpdateSupergroupFullInfo some data from supergroupFullInfo has been changed
type UpdateSupergroupFullInfo struct {
	meta
	// Identifier of the supergroup or channel
	SupergroupID int32 `json:"supergroup_id"`
	// New full information about the supergroup
	SupergroupFullInfo *SupergroupFullInfo `json:"supergroup_full_info"`
}

// MarshalJSON returns UpdateSupergroupFullInfo object as the JSON encoding of UpdateSupergroupFullInfo.
func (entity *UpdateSupergroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateSupergroupFullInfo

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateSupergroupFullInfo) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateSupergroupFullInfo) GetType() string {
	return TypeUpdateSupergroupFullInfo
}

// UpdateType returns constant class type string of the class.
func (*UpdateSupergroupFullInfo) UpdateType() string {
	return TypeUpdateSupergroupFullInfo
}

// UpdateServiceNotification service notification from the server. Upon receiving this the client must show a popup with the content of the notification
type UpdateServiceNotification struct {
	meta
	// Notification type. If type begins with "AUTH_KEY_DROP_", then two buttons "Cancel" and "Log out" should be shown under notification; if user presses the second, all local data should be destroyed using Destroy method
	Type string `json:"type"`
	// Notification content
	Content MessageContent `json:"content"`
}

// MarshalJSON returns UpdateServiceNotification object as the JSON encoding of UpdateServiceNotification.
func (entity *UpdateServiceNotification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateServiceNotification

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateServiceNotification) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateServiceNotification) GetType() string {
	return TypeUpdateServiceNotification
}

// UpdateType returns constant class type string of the class.
func (*UpdateServiceNotification) UpdateType() string {
	return TypeUpdateServiceNotification
}

// UnmarshalJSON sets UpdateServiceNotification object to a copy of JSON encoding of UpdateServiceNotification.
func (entity *UpdateServiceNotification) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type    string          `json:"type"`
		Content json.RawMessage `json:"content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Type = tmp.Type

	fieldContent, _ := UnmarshalMessageContent(tmp.Content)
	entity.Content = fieldContent

	return nil
}

// UpdateFile information about a file was updated
type UpdateFile struct {
	meta
	// New data about the file
	File *File `json:"file"`
}

// MarshalJSON returns UpdateFile object as the JSON encoding of UpdateFile.
func (entity *UpdateFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateFile

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateFile) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateFile) GetType() string {
	return TypeUpdateFile
}

// UpdateType returns constant class type string of the class.
func (*UpdateFile) UpdateType() string {
	return TypeUpdateFile
}

// UpdateFileGenerationStart the file generation process needs to be started by the client
type UpdateFileGenerationStart struct {
	meta
	// Unique identifier for the generation process
	GenerationID Int64JSON `json:"generation_id"`
	// The path to a file from which a new file is generated; may be empty
	OriginalPath string `json:"original_path"`
	// The path to a file that should be created and where the new file should be generated
	DestinationPath string `json:"destination_path"`
	// String specifying the conversion applied to the original file. If conversion is "#url#" than original_path contains an HTTP/HTTPS URL of a file, which should be downloaded by the client
	Conversion string `json:"conversion"`
}

// MarshalJSON returns UpdateFileGenerationStart object as the JSON encoding of UpdateFileGenerationStart.
func (entity *UpdateFileGenerationStart) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateFileGenerationStart

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateFileGenerationStart) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateFileGenerationStart) GetType() string {
	return TypeUpdateFileGenerationStart
}

// UpdateType returns constant class type string of the class.
func (*UpdateFileGenerationStart) UpdateType() string {
	return TypeUpdateFileGenerationStart
}

// UpdateFileGenerationStop file generation is no longer needed
type UpdateFileGenerationStop struct {
	meta
	// Unique identifier for the generation process
	GenerationID Int64JSON `json:"generation_id"`
}

// MarshalJSON returns UpdateFileGenerationStop object as the JSON encoding of UpdateFileGenerationStop.
func (entity *UpdateFileGenerationStop) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateFileGenerationStop

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateFileGenerationStop) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateFileGenerationStop) GetType() string {
	return TypeUpdateFileGenerationStop
}

// UpdateType returns constant class type string of the class.
func (*UpdateFileGenerationStop) UpdateType() string {
	return TypeUpdateFileGenerationStop
}

// UpdateCall new call was created or information about a call was updated
type UpdateCall struct {
	meta
	// New data about a call
	Call *Call `json:"call"`
}

// MarshalJSON returns UpdateCall object as the JSON encoding of UpdateCall.
func (entity *UpdateCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateCall

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateCall) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateCall) GetType() string {
	return TypeUpdateCall
}

// UpdateType returns constant class type string of the class.
func (*UpdateCall) UpdateType() string {
	return TypeUpdateCall
}

// UpdateUserPrivacySettingRules some privacy setting rules have been changed
type UpdateUserPrivacySettingRules struct {
	meta
	// The privacy setting
	Setting UserPrivacySetting `json:"setting"`
	// New privacy rules
	Rules *UserPrivacySettingRules `json:"rules"`
}

// MarshalJSON returns UpdateUserPrivacySettingRules object as the JSON encoding of UpdateUserPrivacySettingRules.
func (entity *UpdateUserPrivacySettingRules) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateUserPrivacySettingRules

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateUserPrivacySettingRules) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateUserPrivacySettingRules) GetType() string {
	return TypeUpdateUserPrivacySettingRules
}

// UpdateType returns constant class type string of the class.
func (*UpdateUserPrivacySettingRules) UpdateType() string {
	return TypeUpdateUserPrivacySettingRules
}

// UnmarshalJSON sets UpdateUserPrivacySettingRules object to a copy of JSON encoding of UpdateUserPrivacySettingRules.
func (entity *UpdateUserPrivacySettingRules) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Setting json.RawMessage          `json:"setting"`
		Rules   *UserPrivacySettingRules `json:"rules"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Rules = tmp.Rules

	fieldSetting, _ := UnmarshalUserPrivacySetting(tmp.Setting)
	entity.Setting = fieldSetting

	return nil
}

// UpdateUnreadMessageCount number of unread messages has changed. This update is sent only if a message database is used
type UpdateUnreadMessageCount struct {
	meta
	// Total number of unread messages
	UnreadCount int32 `json:"unread_count"`
	// Total number of unread messages in unmuted chats
	UnreadUnmutedCount int32 `json:"unread_unmuted_count"`
}

// MarshalJSON returns UpdateUnreadMessageCount object as the JSON encoding of UpdateUnreadMessageCount.
func (entity *UpdateUnreadMessageCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateUnreadMessageCount

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateUnreadMessageCount) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateUnreadMessageCount) GetType() string {
	return TypeUpdateUnreadMessageCount
}

// UpdateType returns constant class type string of the class.
func (*UpdateUnreadMessageCount) UpdateType() string {
	return TypeUpdateUnreadMessageCount
}

// UpdateUnreadChatCount number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if a message database is used
type UpdateUnreadChatCount struct {
	meta
	// Total number of unread chats
	UnreadCount int32 `json:"unread_count"`
	// Total number of unread unmuted chats
	UnreadUnmutedCount int32 `json:"unread_unmuted_count"`
	// Total number of chats marked as unread
	MarkedAsUnreadCount int32 `json:"marked_as_unread_count"`
	// Total number of unmuted chats marked as unread
	MarkedAsUnreadUnmutedCount int32 `json:"marked_as_unread_unmuted_count"`
}

// MarshalJSON returns UpdateUnreadChatCount object as the JSON encoding of UpdateUnreadChatCount.
func (entity *UpdateUnreadChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateUnreadChatCount

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateUnreadChatCount) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateUnreadChatCount) GetType() string {
	return TypeUpdateUnreadChatCount
}

// UpdateType returns constant class type string of the class.
func (*UpdateUnreadChatCount) UpdateType() string {
	return TypeUpdateUnreadChatCount
}

// UpdateOption an option changed its value
type UpdateOption struct {
	meta
	// The option name
	Name string `json:"name"`
	// The new option value
	Value OptionValue `json:"value"`
}

// MarshalJSON returns UpdateOption object as the JSON encoding of UpdateOption.
func (entity *UpdateOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateOption

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateOption) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateOption) GetType() string {
	return TypeUpdateOption
}

// UpdateType returns constant class type string of the class.
func (*UpdateOption) UpdateType() string {
	return TypeUpdateOption
}

// UnmarshalJSON sets UpdateOption object to a copy of JSON encoding of UpdateOption.
func (entity *UpdateOption) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Name  string          `json:"name"`
		Value json.RawMessage `json:"value"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.Name = tmp.Name

	fieldValue, _ := UnmarshalOptionValue(tmp.Value)
	entity.Value = fieldValue

	return nil
}

// UpdateInstalledStickerSets the list of installed sticker sets was updated
type UpdateInstalledStickerSets struct {
	meta
	// True, if the list of installed mask sticker sets was updated
	IsMasks bool `json:"is_masks"`
	// The new list of installed ordinary sticker sets
	StickerSetIDs []Int64JSON `json:"sticker_set_ids"`
}

// MarshalJSON returns UpdateInstalledStickerSets object as the JSON encoding of UpdateInstalledStickerSets.
func (entity *UpdateInstalledStickerSets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateInstalledStickerSets

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateInstalledStickerSets) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateInstalledStickerSets) GetType() string {
	return TypeUpdateInstalledStickerSets
}

// UpdateType returns constant class type string of the class.
func (*UpdateInstalledStickerSets) UpdateType() string {
	return TypeUpdateInstalledStickerSets
}

// UpdateTrendingStickerSets the list of trending sticker sets was updated or some of them were viewed
type UpdateTrendingStickerSets struct {
	meta
	// The new list of trending sticker sets
	StickerSets *StickerSets `json:"sticker_sets"`
}

// MarshalJSON returns UpdateTrendingStickerSets object as the JSON encoding of UpdateTrendingStickerSets.
func (entity *UpdateTrendingStickerSets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateTrendingStickerSets

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateTrendingStickerSets) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateTrendingStickerSets) GetType() string {
	return TypeUpdateTrendingStickerSets
}

// UpdateType returns constant class type string of the class.
func (*UpdateTrendingStickerSets) UpdateType() string {
	return TypeUpdateTrendingStickerSets
}

// UpdateRecentStickers the list of recently used stickers was updated
type UpdateRecentStickers struct {
	meta
	// True, if the list of stickers attached to photo or video files was updated, otherwise the list of sent stickers is updated
	IsAttached bool `json:"is_attached"`
	// The new list of file identifiers of recently used stickers
	StickerIDs []int32 `json:"sticker_ids"`
}

// MarshalJSON returns UpdateRecentStickers object as the JSON encoding of UpdateRecentStickers.
func (entity *UpdateRecentStickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateRecentStickers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateRecentStickers) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateRecentStickers) GetType() string {
	return TypeUpdateRecentStickers
}

// UpdateType returns constant class type string of the class.
func (*UpdateRecentStickers) UpdateType() string {
	return TypeUpdateRecentStickers
}

// UpdateFavoriteStickers the list of favorite stickers was updated
type UpdateFavoriteStickers struct {
	meta
	// The new list of file identifiers of favorite stickers
	StickerIDs []int32 `json:"sticker_ids"`
}

// MarshalJSON returns UpdateFavoriteStickers object as the JSON encoding of UpdateFavoriteStickers.
func (entity *UpdateFavoriteStickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateFavoriteStickers

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateFavoriteStickers) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateFavoriteStickers) GetType() string {
	return TypeUpdateFavoriteStickers
}

// UpdateType returns constant class type string of the class.
func (*UpdateFavoriteStickers) UpdateType() string {
	return TypeUpdateFavoriteStickers
}

// UpdateSavedAnimations the list of saved animations was updated
type UpdateSavedAnimations struct {
	meta
	// The new list of file identifiers of saved animations
	AnimationIDs []int32 `json:"animation_ids"`
}

// MarshalJSON returns UpdateSavedAnimations object as the JSON encoding of UpdateSavedAnimations.
func (entity *UpdateSavedAnimations) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateSavedAnimations

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateSavedAnimations) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateSavedAnimations) GetType() string {
	return TypeUpdateSavedAnimations
}

// UpdateType returns constant class type string of the class.
func (*UpdateSavedAnimations) UpdateType() string {
	return TypeUpdateSavedAnimations
}

// UpdateLanguagePackStrings some language pack strings have been updated
type UpdateLanguagePackStrings struct {
	meta
	// Localization target to which the language pack belongs
	LocalizationTarget string `json:"localization_target"`
	// Identifier of the updated language pack
	LanguagePackID string `json:"language_pack_id"`
	// List of changed language pack strings
	Strings []*LanguagePackString `json:"strings"`
}

// MarshalJSON returns UpdateLanguagePackStrings object as the JSON encoding of UpdateLanguagePackStrings.
func (entity *UpdateLanguagePackStrings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateLanguagePackStrings

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateLanguagePackStrings) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateLanguagePackStrings) GetType() string {
	return TypeUpdateLanguagePackStrings
}

// UpdateType returns constant class type string of the class.
func (*UpdateLanguagePackStrings) UpdateType() string {
	return TypeUpdateLanguagePackStrings
}

// UpdateConnectionState the connection state has changed
type UpdateConnectionState struct {
	meta
	// The new connection state
	State ConnectionState `json:"state"`
}

// MarshalJSON returns UpdateConnectionState object as the JSON encoding of UpdateConnectionState.
func (entity *UpdateConnectionState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateConnectionState

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateConnectionState) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateConnectionState) GetType() string {
	return TypeUpdateConnectionState
}

// UpdateType returns constant class type string of the class.
func (*UpdateConnectionState) UpdateType() string {
	return TypeUpdateConnectionState
}

// UnmarshalJSON sets UpdateConnectionState object to a copy of JSON encoding of UpdateConnectionState.
func (entity *UpdateConnectionState) UnmarshalJSON(data []byte) error {
	var tmp struct {
		State json.RawMessage `json:"state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldState, _ := UnmarshalConnectionState(tmp.State)
	entity.State = fieldState

	return nil
}

// UpdateTermsOfService new terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method should be called with the reason "Decline ToS update"
type UpdateTermsOfService struct {
	meta
	// Identifier of the terms of service
	TermsOfServiceID string `json:"terms_of_service_id"`
	// The new terms of service
	TermsOfService *TermsOfService `json:"terms_of_service"`
}

// MarshalJSON returns UpdateTermsOfService object as the JSON encoding of UpdateTermsOfService.
func (entity *UpdateTermsOfService) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateTermsOfService

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateTermsOfService) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateTermsOfService) GetType() string {
	return TypeUpdateTermsOfService
}

// UpdateType returns constant class type string of the class.
func (*UpdateTermsOfService) UpdateType() string {
	return TypeUpdateTermsOfService
}

// UpdateNewInlineQuery a new incoming inline query; for bots only
type UpdateNewInlineQuery struct {
	meta
	// Unique query identifier
	ID Int64JSON `json:"id"`
	// Identifier of the user who sent the query
	SenderUserID int32 `json:"sender_user_id"`
	// User location, provided by the client; may be null
	UserLocation *Location `json:"user_location"`
	// Text of the query
	Query string `json:"query"`
	// Offset of the first entry to return
	Offset string `json:"offset"`
}

// MarshalJSON returns UpdateNewInlineQuery object as the JSON encoding of UpdateNewInlineQuery.
func (entity *UpdateNewInlineQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewInlineQuery

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewInlineQuery) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewInlineQuery) GetType() string {
	return TypeUpdateNewInlineQuery
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewInlineQuery) UpdateType() string {
	return TypeUpdateNewInlineQuery
}

// UpdateNewChosenInlineResult the user has chosen a result of an inline query; for bots only
type UpdateNewChosenInlineResult struct {
	meta
	// Identifier of the user who sent the query
	SenderUserID int32 `json:"sender_user_id"`
	// User location, provided by the client; may be null
	UserLocation *Location `json:"user_location"`
	// Text of the query
	Query string `json:"query"`
	// Identifier of the chosen result
	ResultID string `json:"result_id"`
	// Identifier of the sent inline message, if known
	InlineMessageID string `json:"inline_message_id"`
}

// MarshalJSON returns UpdateNewChosenInlineResult object as the JSON encoding of UpdateNewChosenInlineResult.
func (entity *UpdateNewChosenInlineResult) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewChosenInlineResult

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewChosenInlineResult) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewChosenInlineResult) GetType() string {
	return TypeUpdateNewChosenInlineResult
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewChosenInlineResult) UpdateType() string {
	return TypeUpdateNewChosenInlineResult
}

// UpdateNewCallbackQuery a new incoming callback query; for bots only
type UpdateNewCallbackQuery struct {
	meta
	// Unique query identifier
	ID Int64JSON `json:"id"`
	// Identifier of the user who sent the query
	SenderUserID int32 `json:"sender_user_id"`
	// Identifier of the chat, in which the query was sent
	ChatID int64 `json:"chat_id"`
	// Identifier of the message, from which the query originated
	MessageID int64 `json:"message_id"`
	// Identifier that uniquely corresponds to the chat to which the message was sent
	ChatInstance Int64JSON `json:"chat_instance"`
	// Query payload
	Payload CallbackQueryPayload `json:"payload"`
}

// MarshalJSON returns UpdateNewCallbackQuery object as the JSON encoding of UpdateNewCallbackQuery.
func (entity *UpdateNewCallbackQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewCallbackQuery

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewCallbackQuery) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewCallbackQuery) GetType() string {
	return TypeUpdateNewCallbackQuery
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewCallbackQuery) UpdateType() string {
	return TypeUpdateNewCallbackQuery
}

// UnmarshalJSON sets UpdateNewCallbackQuery object to a copy of JSON encoding of UpdateNewCallbackQuery.
func (entity *UpdateNewCallbackQuery) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID           Int64JSON       `json:"id"`
		SenderUserID int32           `json:"sender_user_id"`
		ChatID       int64           `json:"chat_id"`
		MessageID    int64           `json:"message_id"`
		ChatInstance Int64JSON       `json:"chat_instance"`
		Payload      json.RawMessage `json:"payload"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.SenderUserID = tmp.SenderUserID
	entity.ChatID = tmp.ChatID
	entity.MessageID = tmp.MessageID
	entity.ChatInstance = tmp.ChatInstance

	fieldPayload, _ := UnmarshalCallbackQueryPayload(tmp.Payload)
	entity.Payload = fieldPayload

	return nil
}

// UpdateNewInlineCallbackQuery a new incoming callback query from a message sent via a bot; for bots only
type UpdateNewInlineCallbackQuery struct {
	meta
	// Unique query identifier
	ID Int64JSON `json:"id"`
	// Identifier of the user who sent the query
	SenderUserID int32 `json:"sender_user_id"`
	// Identifier of the inline message, from which the query originated
	InlineMessageID string `json:"inline_message_id"`
	// An identifier uniquely corresponding to the chat a message was sent to
	ChatInstance Int64JSON `json:"chat_instance"`
	// Query payload
	Payload CallbackQueryPayload `json:"payload"`
}

// MarshalJSON returns UpdateNewInlineCallbackQuery object as the JSON encoding of UpdateNewInlineCallbackQuery.
func (entity *UpdateNewInlineCallbackQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewInlineCallbackQuery

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewInlineCallbackQuery) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewInlineCallbackQuery) GetType() string {
	return TypeUpdateNewInlineCallbackQuery
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewInlineCallbackQuery) UpdateType() string {
	return TypeUpdateNewInlineCallbackQuery
}

// UnmarshalJSON sets UpdateNewInlineCallbackQuery object to a copy of JSON encoding of UpdateNewInlineCallbackQuery.
func (entity *UpdateNewInlineCallbackQuery) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ID              Int64JSON       `json:"id"`
		SenderUserID    int32           `json:"sender_user_id"`
		InlineMessageID string          `json:"inline_message_id"`
		ChatInstance    Int64JSON       `json:"chat_instance"`
		Payload         json.RawMessage `json:"payload"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	entity.ID = tmp.ID
	entity.SenderUserID = tmp.SenderUserID
	entity.InlineMessageID = tmp.InlineMessageID
	entity.ChatInstance = tmp.ChatInstance

	fieldPayload, _ := UnmarshalCallbackQueryPayload(tmp.Payload)
	entity.Payload = fieldPayload

	return nil
}

// UpdateNewShippingQuery a new incoming shipping query; for bots only. Only for invoices with flexible price
type UpdateNewShippingQuery struct {
	meta
	// Unique query identifier
	ID Int64JSON `json:"id"`
	// Identifier of the user who sent the query
	SenderUserID int32 `json:"sender_user_id"`
	// Invoice payload
	InvoicePayload string `json:"invoice_payload"`
	// User shipping address
	ShippingAddress *Address `json:"shipping_address"`
}

// MarshalJSON returns UpdateNewShippingQuery object as the JSON encoding of UpdateNewShippingQuery.
func (entity *UpdateNewShippingQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewShippingQuery

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewShippingQuery) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewShippingQuery) GetType() string {
	return TypeUpdateNewShippingQuery
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewShippingQuery) UpdateType() string {
	return TypeUpdateNewShippingQuery
}

// UpdateNewPreCheckoutQuery a new incoming pre-checkout query; for bots only. Contains full information about a checkout
type UpdateNewPreCheckoutQuery struct {
	meta
	// Unique query identifier
	ID Int64JSON `json:"id"`
	// Identifier of the user who sent the query
	SenderUserID int32 `json:"sender_user_id"`
	// Currency for the product price
	Currency string `json:"currency"`
	// Total price for the product, in the minimal quantity of the currency
	TotalAmount int64 `json:"total_amount"`
	// Invoice payload
	InvoicePayload []byte `json:"invoice_payload"`
	// Identifier of a shipping option chosen by the user; may be empty if not applicable
	ShippingOptionID string `json:"shipping_option_id"`
	// Information about the order; may be null
	OrderInfo *OrderInfo `json:"order_info"`
}

// MarshalJSON returns UpdateNewPreCheckoutQuery object as the JSON encoding of UpdateNewPreCheckoutQuery.
func (entity *UpdateNewPreCheckoutQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewPreCheckoutQuery

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewPreCheckoutQuery) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewPreCheckoutQuery) GetType() string {
	return TypeUpdateNewPreCheckoutQuery
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewPreCheckoutQuery) UpdateType() string {
	return TypeUpdateNewPreCheckoutQuery
}

// UpdateNewCustomEvent a new incoming event; for bots only
type UpdateNewCustomEvent struct {
	meta
	// A JSON-serialized event
	Event string `json:"event"`
}

// MarshalJSON returns UpdateNewCustomEvent object as the JSON encoding of UpdateNewCustomEvent.
func (entity *UpdateNewCustomEvent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewCustomEvent

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewCustomEvent) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewCustomEvent) GetType() string {
	return TypeUpdateNewCustomEvent
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewCustomEvent) UpdateType() string {
	return TypeUpdateNewCustomEvent
}

// UpdateNewCustomQuery a new incoming query; for bots only
type UpdateNewCustomQuery struct {
	meta
	// The query identifier
	ID Int64JSON `json:"id"`
	// JSON-serialized query data
	Data string `json:"data"`
	// Query timeout
	Timeout int32 `json:"timeout"`
}

// MarshalJSON returns UpdateNewCustomQuery object as the JSON encoding of UpdateNewCustomQuery.
func (entity *UpdateNewCustomQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub UpdateNewCustomQuery

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*UpdateNewCustomQuery) GetClass() string {
	return ClassUpdate
}

// GetType returns constant class type string of the class.
func (*UpdateNewCustomQuery) GetType() string {
	return TypeUpdateNewCustomQuery
}

// UpdateType returns constant class type string of the class.
func (*UpdateNewCustomQuery) UpdateType() string {
	return TypeUpdateNewCustomQuery
}

// TestInt a simple object containing a number; for testing only
type TestInt struct {
	meta
	// Number
	Value int32 `json:"value"`
}

// MarshalJSON returns TestInt object as the JSON encoding of TestInt.
func (entity *TestInt) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TestInt

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TestInt) GetClass() string {
	return ClassTestInt
}

// GetType returns constant class type string of the class.
func (*TestInt) GetType() string {
	return TypeTestInt
}

// TestString a simple object containing a string; for testing only
type TestString struct {
	meta
	// String
	Value string `json:"value"`
}

// MarshalJSON returns TestString object as the JSON encoding of TestString.
func (entity *TestString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TestString

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TestString) GetClass() string {
	return ClassTestString
}

// GetType returns constant class type string of the class.
func (*TestString) GetType() string {
	return TypeTestString
}

// TestBytes a simple object containing a sequence of bytes; for testing only
type TestBytes struct {
	meta
	// Bytes
	Value []byte `json:"value"`
}

// MarshalJSON returns TestBytes object as the JSON encoding of TestBytes.
func (entity *TestBytes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TestBytes

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TestBytes) GetClass() string {
	return ClassTestBytes
}

// GetType returns constant class type string of the class.
func (*TestBytes) GetType() string {
	return TypeTestBytes
}

// TestVectorInt a simple object containing a vector of numbers; for testing only
type TestVectorInt struct {
	meta
	// Vector of numbers
	Value []int32 `json:"value"`
}

// MarshalJSON returns TestVectorInt object as the JSON encoding of TestVectorInt.
func (entity *TestVectorInt) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TestVectorInt

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TestVectorInt) GetClass() string {
	return ClassTestVectorInt
}

// GetType returns constant class type string of the class.
func (*TestVectorInt) GetType() string {
	return TypeTestVectorInt
}

// TestVectorIntObject a simple object containing a vector of objects that hold a number; for testing only
type TestVectorIntObject struct {
	meta
	// Vector of objects
	Value []*TestInt `json:"value"`
}

// MarshalJSON returns TestVectorIntObject object as the JSON encoding of TestVectorIntObject.
func (entity *TestVectorIntObject) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TestVectorIntObject

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TestVectorIntObject) GetClass() string {
	return ClassTestVectorIntObject
}

// GetType returns constant class type string of the class.
func (*TestVectorIntObject) GetType() string {
	return TypeTestVectorIntObject
}

// TestVectorString a simple object containing a vector of strings; for testing only
type TestVectorString struct {
	meta
	// Vector of strings
	Value []string `json:"value"`
}

// MarshalJSON returns TestVectorString object as the JSON encoding of TestVectorString.
func (entity *TestVectorString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TestVectorString

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TestVectorString) GetClass() string {
	return ClassTestVectorString
}

// GetType returns constant class type string of the class.
func (*TestVectorString) GetType() string {
	return TypeTestVectorString
}

// TestVectorStringObject a simple object containing a vector of objects that hold a string; for testing only
type TestVectorStringObject struct {
	meta
	// Vector of objects
	Value []*TestString `json:"value"`
}

// MarshalJSON returns TestVectorStringObject object as the JSON encoding of TestVectorStringObject.
func (entity *TestVectorStringObject) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetType()

	type stub TestVectorStringObject

	return json.Marshal((*stub)(entity))
}

// GetClass returns constant class string of the class.
func (*TestVectorStringObject) GetClass() string {
	return ClassTestVectorStringObject
}

// GetType returns constant class type string of the class.
func (*TestVectorStringObject) GetType() string {
	return TypeTestVectorStringObject
}
