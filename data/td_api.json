{
    "types": [
        {
            "name": "double",
            "description": "",
            "class": "Double",
            "properties": []
        },
        {
            "name": "string",
            "description": "",
            "class": "String",
            "properties": []
        },
        {
            "name": "int32",
            "description": "",
            "class": "Int32",
            "properties": []
        },
        {
            "name": "int53",
            "description": "",
            "class": "Int53",
            "properties": []
        },
        {
            "name": "int64",
            "description": "",
            "class": "Int64",
            "properties": []
        },
        {
            "name": "bytes",
            "description": "",
            "class": "Bytes",
            "properties": []
        },
        {
            "name": "boolFalse",
            "description": "",
            "class": "Bool",
            "properties": []
        },
        {
            "name": "boolTrue",
            "description": "",
            "class": "Bool",
            "properties": []
        },
        {
            "name": "vector\u003ct\u003e",
            "description": "",
            "class": "Vector\u003cT\u003e",
            "properties": []
        },
        {
            "name": "error",
            "description": "An object of this type can be returned on every function call, in case of an error",
            "class": "Error",
            "properties": [
                {
                    "name": "code",
                    "type": "int32",
                    "description": "Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user"
                },
                {
                    "name": "message",
                    "type": "string",
                    "description": "Error message; subject to future changes"
                }
            ]
        },
        {
            "name": "ok",
            "description": "An object of this type is returned on a successful function call for certain functions",
            "class": "Ok",
            "properties": []
        },
        {
            "name": "tdlibParameters",
            "description": "Contains parameters for TDLib initialization",
            "class": "TdlibParameters",
            "properties": [
                {
                    "name": "use_test_dc",
                    "type": "Bool",
                    "description": "If set to true, the Telegram test environment will be used instead of the production environment"
                },
                {
                    "name": "database_directory",
                    "type": "string",
                    "description": "The path to the directory for the persistent database; if empty, the current working directory will be used"
                },
                {
                    "name": "files_directory",
                    "type": "string",
                    "description": "The path to the directory for storing files; if empty, database_directory will be used"
                },
                {
                    "name": "use_file_database",
                    "type": "Bool",
                    "description": "If set to true, information about downloaded and uploaded files will be saved between application restarts"
                },
                {
                    "name": "use_chat_info_database",
                    "type": "Bool",
                    "description": "If set to true, the library will maintain a cache of users, basic groups, supergroups, channels and secret chats. Implies use_file_database"
                },
                {
                    "name": "use_message_database",
                    "type": "Bool",
                    "description": "If set to true, the library will maintain a cache of chats and messages. Implies use_chat_info_database"
                },
                {
                    "name": "use_secret_chats",
                    "type": "Bool",
                    "description": "If set to true, support for secret chats will be enabled"
                },
                {
                    "name": "api_id",
                    "type": "int32",
                    "description": "Application identifier for Telegram API access, which can be obtained at https://my.telegram.org"
                },
                {
                    "name": "api_hash",
                    "type": "string",
                    "description": "Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org"
                },
                {
                    "name": "system_language_code",
                    "type": "string",
                    "description": "IETF language tag of the user's operating system language; must be non-empty"
                },
                {
                    "name": "device_model",
                    "type": "string",
                    "description": "Model of the device the application is being run on; must be non-empty"
                },
                {
                    "name": "system_version",
                    "type": "string",
                    "description": "Version of the operating system the application is being run on; must be non-empty"
                },
                {
                    "name": "application_version",
                    "type": "string",
                    "description": "Application version; must be non-empty"
                },
                {
                    "name": "enable_storage_optimizer",
                    "type": "Bool",
                    "description": "If set to true, old files will automatically be deleted"
                },
                {
                    "name": "ignore_file_names",
                    "type": "Bool",
                    "description": "If set to true, original file names will be ignored. Otherwise, downloaded files will be saved under names as close as possible to the original name"
                }
            ]
        },
        {
            "name": "authenticationCodeTypeTelegramMessage",
            "description": "An authentication code is delivered via a private Telegram message, which can be viewed in another client",
            "class": "AuthenticationCodeType",
            "properties": [
                {
                    "name": "length",
                    "type": "int32",
                    "description": "Length of the code"
                }
            ]
        },
        {
            "name": "authenticationCodeTypeSms",
            "description": "An authentication code is delivered via an SMS message to the specified phone number",
            "class": "AuthenticationCodeType",
            "properties": [
                {
                    "name": "length",
                    "type": "int32",
                    "description": "Length of the code"
                }
            ]
        },
        {
            "name": "authenticationCodeTypeCall",
            "description": "An authentication code is delivered via a phone call to the specified phone number",
            "class": "AuthenticationCodeType",
            "properties": [
                {
                    "name": "length",
                    "type": "int32",
                    "description": "Length of the code"
                }
            ]
        },
        {
            "name": "authenticationCodeTypeFlashCall",
            "description": "An authentication code is delivered by an immediately cancelled call to the specified phone number. The number from which the call was made is the code",
            "class": "AuthenticationCodeType",
            "properties": [
                {
                    "name": "pattern",
                    "type": "string",
                    "description": "Pattern of the phone number from which the call will be made"
                }
            ]
        },
        {
            "name": "authenticationCodeInfo",
            "description": "Information about the authentication code that was sent",
            "class": "AuthenticationCodeInfo",
            "properties": [
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "A phone number that is being authenticated"
                },
                {
                    "name": "type",
                    "type": "AuthenticationCodeType",
                    "description": "Describes the way the code was sent to the user"
                },
                {
                    "name": "next_type",
                    "type": "AuthenticationCodeType",
                    "description": "Describes the way the next code will be sent to the user; may be null"
                },
                {
                    "name": "timeout",
                    "type": "int32",
                    "description": "Timeout before the code should be re-sent, in seconds"
                }
            ]
        },
        {
            "name": "emailAddressAuthenticationCodeInfo",
            "description": "Information about the email address authentication code that was sent",
            "class": "EmailAddressAuthenticationCodeInfo",
            "properties": [
                {
                    "name": "email_address_pattern",
                    "type": "string",
                    "description": "Pattern of the email address to which an authentication code was sent"
                },
                {
                    "name": "length",
                    "type": "int32",
                    "description": "Length of the code; 0 if unknown"
                }
            ]
        },
        {
            "name": "textEntity",
            "description": "Represents a part of the text that needs to be formatted in some unusual way",
            "class": "TextEntity",
            "properties": [
                {
                    "name": "offset",
                    "type": "int32",
                    "description": "Offset of the entity in UTF-16 code points"
                },
                {
                    "name": "length",
                    "type": "int32",
                    "description": "Length of the entity, in UTF-16 code points"
                },
                {
                    "name": "type",
                    "type": "TextEntityType",
                    "description": "Type of the entity"
                }
            ]
        },
        {
            "name": "textEntities",
            "description": "Contains a list of text entities",
            "class": "TextEntities",
            "properties": [
                {
                    "name": "entities",
                    "type": "vector\u003ctextEntity\u003e",
                    "description": "List of text entities"
                }
            ]
        },
        {
            "name": "formattedText",
            "description": "A text with some entities",
            "class": "FormattedText",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "The text"
                },
                {
                    "name": "entities",
                    "type": "vector\u003ctextEntity\u003e",
                    "description": "Entities contained in the text"
                }
            ]
        },
        {
            "name": "termsOfService",
            "description": "Contains Telegram terms of service",
            "class": "TermsOfService",
            "properties": [
                {
                    "name": "text",
                    "type": "formattedText",
                    "description": "Text of the terms of service"
                },
                {
                    "name": "min_user_age",
                    "type": "int32",
                    "description": "Mininum age of a user to be able to accept the terms; 0 if any"
                },
                {
                    "name": "show_popup",
                    "type": "Bool",
                    "description": "True, if a blocking popup with terms of service must be shown to the user"
                }
            ]
        },
        {
            "name": "authorizationStateWaitTdlibParameters",
            "description": "TDLib needs TdlibParameters for initialization",
            "class": "AuthorizationState",
            "properties": []
        },
        {
            "name": "authorizationStateWaitEncryptionKey",
            "description": "TDLib needs an encryption key to decrypt the local database",
            "class": "AuthorizationState",
            "properties": [
                {
                    "name": "is_encrypted",
                    "type": "Bool",
                    "description": "True, if the database is currently encrypted"
                }
            ]
        },
        {
            "name": "authorizationStateWaitPhoneNumber",
            "description": "TDLib needs the user's phone number to authorize",
            "class": "AuthorizationState",
            "properties": []
        },
        {
            "name": "authorizationStateWaitCode",
            "description": "TDLib needs the user's authentication code to finalize authorization",
            "class": "AuthorizationState",
            "properties": [
                {
                    "name": "is_registered",
                    "type": "Bool",
                    "description": "True, if the user is already registered"
                },
                {
                    "name": "terms_of_service",
                    "type": "termsOfService",
                    "description": "Telegram terms of service, which should be accepted before user can continue registration; may be null"
                },
                {
                    "name": "code_info",
                    "type": "authenticationCodeInfo",
                    "description": "Information about the authorization code that was sent"
                }
            ]
        },
        {
            "name": "authorizationStateWaitPassword",
            "description": "The user has been authorized, but needs to enter a password to start using the application",
            "class": "AuthorizationState",
            "properties": [
                {
                    "name": "password_hint",
                    "type": "string",
                    "description": "Hint for the password; can be empty"
                },
                {
                    "name": "has_recovery_email_address",
                    "type": "Bool",
                    "description": "True if a recovery email address has been set up"
                },
                {
                    "name": "recovery_email_address_pattern",
                    "type": "string",
                    "description": "Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent"
                }
            ]
        },
        {
            "name": "authorizationStateReady",
            "description": "The user has been successfully authorized. TDLib is now ready to answer queries",
            "class": "AuthorizationState",
            "properties": []
        },
        {
            "name": "authorizationStateLoggingOut",
            "description": "The user is currently logging out",
            "class": "AuthorizationState",
            "properties": []
        },
        {
            "name": "authorizationStateClosing",
            "description": "TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received",
            "class": "AuthorizationState",
            "properties": []
        },
        {
            "name": "authorizationStateClosed",
            "description": "TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to with error code 500. To continue working, one should create a new instance of the TDLib client",
            "class": "AuthorizationState",
            "properties": []
        },
        {
            "name": "passwordState",
            "description": "Represents the current state of 2-step verification",
            "class": "PasswordState",
            "properties": [
                {
                    "name": "has_password",
                    "type": "Bool",
                    "description": "True if a 2-step verification password is set"
                },
                {
                    "name": "password_hint",
                    "type": "string",
                    "description": "Hint for the password; can be empty"
                },
                {
                    "name": "has_recovery_email_address",
                    "type": "Bool",
                    "description": "True if a recovery email is set"
                },
                {
                    "name": "has_passport_data",
                    "type": "Bool",
                    "description": "True if some Telegram Passport elements were saved"
                },
                {
                    "name": "unconfirmed_recovery_email_address_pattern",
                    "type": "string",
                    "description": "Pattern of the email address to which the confirmation email was sent"
                }
            ]
        },
        {
            "name": "recoveryEmailAddress",
            "description": "Contains information about the current recovery email address",
            "class": "RecoveryEmailAddress",
            "properties": [
                {
                    "name": "recovery_email_address",
                    "type": "string",
                    "description": "Recovery email address"
                }
            ]
        },
        {
            "name": "temporaryPasswordState",
            "description": "Returns information about the availability of a temporary password, which can be used for payments",
            "class": "TemporaryPasswordState",
            "properties": [
                {
                    "name": "has_password",
                    "type": "Bool",
                    "description": "True, if a temporary password is available"
                },
                {
                    "name": "valid_for",
                    "type": "int32",
                    "description": "Time left before the temporary password expires, in seconds"
                }
            ]
        },
        {
            "name": "localFile",
            "description": "Represents a local file",
            "class": "LocalFile",
            "properties": [
                {
                    "name": "path",
                    "type": "string",
                    "description": "Local path to the locally available file part; may be empty"
                },
                {
                    "name": "can_be_downloaded",
                    "type": "Bool",
                    "description": "True, if it is possible to try to download or generate the file"
                },
                {
                    "name": "can_be_deleted",
                    "type": "Bool",
                    "description": "True, if the file can be deleted"
                },
                {
                    "name": "is_downloading_active",
                    "type": "Bool",
                    "description": "True, if the file is currently being downloaded (or a local copy is being generated by some other means)"
                },
                {
                    "name": "is_downloading_completed",
                    "type": "Bool",
                    "description": "True, if the local copy is fully available"
                },
                {
                    "name": "downloaded_prefix_size",
                    "type": "int32",
                    "description": "If is_downloading_completed is false, then only some prefix of the file is ready to be read. downloaded_prefix_size is the size of that prefix"
                },
                {
                    "name": "downloaded_size",
                    "type": "int32",
                    "description": "Total downloaded file bytes. Should be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage"
                }
            ]
        },
        {
            "name": "remoteFile",
            "description": "Represents a remote file",
            "class": "RemoteFile",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Remote file identifier; may be empty. Can be used across application restarts or even from other devices for the current user. If the ID starts with \"http://\" or \"https://\", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the client with the HTTP URL in the original_path and \"#url#\" as the conversion string. Clients should generate the file by downloading it to the specified location"
                },
                {
                    "name": "is_uploading_active",
                    "type": "Bool",
                    "description": "True, if the file is currently being uploaded (or a remote copy is being generated by some other means)"
                },
                {
                    "name": "is_uploading_completed",
                    "type": "Bool",
                    "description": "True, if a remote copy is fully available"
                },
                {
                    "name": "uploaded_size",
                    "type": "int32",
                    "description": "Size of the remote available part of the file; 0 if unknown"
                }
            ]
        },
        {
            "name": "file",
            "description": "Represents a file",
            "class": "File",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Unique file identifier"
                },
                {
                    "name": "size",
                    "type": "int32",
                    "description": "File size; 0 if unknown"
                },
                {
                    "name": "expected_size",
                    "type": "int32",
                    "description": "Expected file size in case the exact file size is unknown, but an approximate size is known. Can be used to show download/upload progress"
                },
                {
                    "name": "local",
                    "type": "localFile",
                    "description": "Information about the local copy of the file"
                },
                {
                    "name": "remote",
                    "type": "remoteFile",
                    "description": "Information about the remote copy of the file"
                }
            ]
        },
        {
            "name": "inputFileID",
            "description": "A file defined by its unique ID",
            "class": "InputFile",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Unique file identifier"
                }
            ]
        },
        {
            "name": "inputFileRemote",
            "description": "A file defined by its remote ID",
            "class": "InputFile",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Remote file identifier"
                }
            ]
        },
        {
            "name": "inputFileLocal",
            "description": "A file defined by a local path",
            "class": "InputFile",
            "properties": [
                {
                    "name": "path",
                    "type": "string",
                    "description": "Local path to the file"
                }
            ]
        },
        {
            "name": "inputFileGenerated",
            "description": "A file generated by the client",
            "class": "InputFile",
            "properties": [
                {
                    "name": "original_path",
                    "type": "string",
                    "description": "Local path to a file from which the file is generated; may be empty if there is no such file"
                },
                {
                    "name": "conversion",
                    "type": "string",
                    "description": "String specifying the conversion applied to the original file; should be persistent across application restarts"
                },
                {
                    "name": "expected_size",
                    "type": "int32",
                    "description": "Expected size of the generated file; 0 if unknown"
                }
            ]
        },
        {
            "name": "photoSize",
            "description": "Photo description",
            "class": "PhotoSize",
            "properties": [
                {
                    "name": "type",
                    "type": "string",
                    "description": "Thumbnail type (see https://core.telegram.org/constructor/photoSize)"
                },
                {
                    "name": "photo",
                    "type": "file",
                    "description": "Information about the photo file"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Photo width"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Photo height"
                }
            ]
        },
        {
            "name": "maskPointForehead",
            "description": "A mask should be placed relatively to the forehead",
            "class": "MaskPoint",
            "properties": []
        },
        {
            "name": "maskPointEyes",
            "description": "A mask should be placed relatively to the eyes",
            "class": "MaskPoint",
            "properties": []
        },
        {
            "name": "maskPointMouth",
            "description": "A mask should be placed relatively to the mouth",
            "class": "MaskPoint",
            "properties": []
        },
        {
            "name": "maskPointChin",
            "description": "A mask should be placed relatively to the chin",
            "class": "MaskPoint",
            "properties": []
        },
        {
            "name": "maskPosition",
            "description": "Position on a photo where a mask should be placed",
            "class": "MaskPosition",
            "properties": [
                {
                    "name": "point",
                    "type": "MaskPoint",
                    "description": "Part of the face, relative to which the mask should be placed"
                },
                {
                    "name": "x_shift",
                    "type": "double",
                    "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)"
                },
                {
                    "name": "y_shift",
                    "type": "double",
                    "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position)"
                },
                {
                    "name": "scale",
                    "type": "double",
                    "description": "Mask scaling coefficient. (For example, 2.0 means a doubled size)"
                }
            ]
        },
        {
            "name": "animation",
            "description": "Describes an animation file. The animation must be encoded in GIF or MPEG4 format",
            "class": "Animation",
            "properties": [
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the animation, in seconds; as defined by the sender"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Width of the animation"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Height of the animation"
                },
                {
                    "name": "file_name",
                    "type": "string",
                    "description": "Original name of the file; as defined by the sender"
                },
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "MIME type of the file, usually \"image/gif\" or \"video/mp4\""
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Animation thumbnail; may be null"
                },
                {
                    "name": "animation",
                    "type": "file",
                    "description": "File containing the animation"
                }
            ]
        },
        {
            "name": "audio",
            "description": "Describes an audio file. Audio is usually in MP3 format",
            "class": "Audio",
            "properties": [
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the audio, in seconds; as defined by the sender"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the audio; as defined by the sender"
                },
                {
                    "name": "performer",
                    "type": "string",
                    "description": "Performer of the audio; as defined by the sender"
                },
                {
                    "name": "file_name",
                    "type": "string",
                    "description": "Original name of the file; as defined by the sender"
                },
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "The MIME type of the file; as defined by the sender"
                },
                {
                    "name": "album_cover_thumbnail",
                    "type": "photoSize",
                    "description": "The thumbnail of the album cover; as defined by the sender. The full size thumbnail should be extracted from the downloaded file; may be null"
                },
                {
                    "name": "audio",
                    "type": "file",
                    "description": "File containing the audio"
                }
            ]
        },
        {
            "name": "document",
            "description": "Describes a document of any type",
            "class": "Document",
            "properties": [
                {
                    "name": "file_name",
                    "type": "string",
                    "description": "Original name of the file; as defined by the sender"
                },
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "MIME type of the file; as defined by the sender"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Document thumbnail; as defined by the sender; may be null"
                },
                {
                    "name": "document",
                    "type": "file",
                    "description": "File containing the document"
                }
            ]
        },
        {
            "name": "photo",
            "description": "Describes a photo",
            "class": "Photo",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Photo identifier; 0 for deleted photos"
                },
                {
                    "name": "has_stickers",
                    "type": "Bool",
                    "description": "True, if stickers were added to the photo"
                },
                {
                    "name": "sizes",
                    "type": "vector\u003cphotoSize\u003e",
                    "description": "Available variants of the photo, in different sizes"
                }
            ]
        },
        {
            "name": "sticker",
            "description": "Describes a sticker",
            "class": "Sticker",
            "properties": [
                {
                    "name": "set_id",
                    "type": "int64",
                    "description": "The identifier of the sticker set to which the sticker belongs; 0 if none"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Sticker width; as defined by the sender"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Sticker height; as defined by the sender"
                },
                {
                    "name": "emoji",
                    "type": "string",
                    "description": "Emoji corresponding to the sticker"
                },
                {
                    "name": "is_mask",
                    "type": "Bool",
                    "description": "True, if the sticker is a mask"
                },
                {
                    "name": "mask_position",
                    "type": "maskPosition",
                    "description": "Position where the mask should be placed; may be null"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Sticker thumbnail in WEBP or JPEG format; may be null"
                },
                {
                    "name": "sticker",
                    "type": "file",
                    "description": "File containing the sticker"
                }
            ]
        },
        {
            "name": "video",
            "description": "Describes a video file",
            "class": "Video",
            "properties": [
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the video, in seconds; as defined by the sender"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Video width; as defined by the sender"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Video height; as defined by the sender"
                },
                {
                    "name": "file_name",
                    "type": "string",
                    "description": "Original name of the file; as defined by the sender"
                },
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "MIME type of the file; as defined by the sender"
                },
                {
                    "name": "has_stickers",
                    "type": "Bool",
                    "description": "True, if stickers were added to the photo"
                },
                {
                    "name": "supports_streaming",
                    "type": "Bool",
                    "description": "True, if the video should be tried to be streamed"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Video thumbnail; as defined by the sender; may be null"
                },
                {
                    "name": "video",
                    "type": "file",
                    "description": "File containing the video"
                }
            ]
        },
        {
            "name": "videoNote",
            "description": "Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format",
            "class": "VideoNote",
            "properties": [
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the video, in seconds; as defined by the sender"
                },
                {
                    "name": "length",
                    "type": "int32",
                    "description": "Video width and height; as defined by the sender"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Video thumbnail; as defined by the sender; may be null"
                },
                {
                    "name": "video",
                    "type": "file",
                    "description": "File containing the video"
                }
            ]
        },
        {
            "name": "voiceNote",
            "description": "Describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel",
            "class": "VoiceNote",
            "properties": [
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the voice note, in seconds; as defined by the sender"
                },
                {
                    "name": "waveform",
                    "type": "bytes",
                    "description": "A waveform representation of the voice note in 5-bit format"
                },
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "MIME type of the file; as defined by the sender"
                },
                {
                    "name": "voice",
                    "type": "file",
                    "description": "File containing the voice note"
                }
            ]
        },
        {
            "name": "contact",
            "description": "Describes a user contact",
            "class": "Contact",
            "properties": [
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "Phone number of the user"
                },
                {
                    "name": "first_name",
                    "type": "string",
                    "description": "First name of the user; 1-255 characters in length"
                },
                {
                    "name": "last_name",
                    "type": "string",
                    "description": "Last name of the user"
                },
                {
                    "name": "vcard",
                    "type": "string",
                    "description": "Additional data about the user in a form of vCard; 0-2048 bytes in length"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the user, if known; otherwise 0"
                }
            ]
        },
        {
            "name": "location",
            "description": "Describes a location on planet Earth",
            "class": "Location",
            "properties": [
                {
                    "name": "latitude",
                    "type": "double",
                    "description": "Latitude of the location in degrees; as defined by the sender"
                },
                {
                    "name": "longitude",
                    "type": "double",
                    "description": "Longitude of the location, in degrees; as defined by the sender"
                }
            ]
        },
        {
            "name": "venue",
            "description": "Describes a venue",
            "class": "Venue",
            "properties": [
                {
                    "name": "location",
                    "type": "location",
                    "description": "Venue location; as defined by the sender"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Venue name; as defined by the sender"
                },
                {
                    "name": "address",
                    "type": "string",
                    "description": "Venue address; as defined by the sender"
                },
                {
                    "name": "provider",
                    "type": "string",
                    "description": "Provider of the venue database; as defined by the sender. Currently only \"foursquare\" needs to be supported"
                },
                {
                    "name": "id",
                    "type": "string",
                    "description": "Identifier of the venue in the provider database; as defined by the sender"
                },
                {
                    "name": "type",
                    "type": "string",
                    "description": "Type of the venue in the provider database; as defined by the sender"
                }
            ]
        },
        {
            "name": "game",
            "description": "Describes a game",
            "class": "Game",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Game ID"
                },
                {
                    "name": "short_name",
                    "type": "string",
                    "description": "Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name}"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Game title"
                },
                {
                    "name": "text",
                    "type": "formattedText",
                    "description": "Game text, usually containing scoreboards for a game"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Game description"
                },
                {
                    "name": "photo",
                    "type": "photo",
                    "description": "Game photo"
                },
                {
                    "name": "animation",
                    "type": "animation",
                    "description": "Game animation; may be null"
                }
            ]
        },
        {
            "name": "profilePhoto",
            "description": "Describes a user profile photo",
            "class": "ProfilePhoto",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of userProfilePhotos"
                },
                {
                    "name": "small",
                    "type": "file",
                    "description": "A small (160x160) user profile photo"
                },
                {
                    "name": "big",
                    "type": "file",
                    "description": "A big (640x640) user profile photo"
                }
            ]
        },
        {
            "name": "chatPhoto",
            "description": "Describes the photo of a chat",
            "class": "ChatPhoto",
            "properties": [
                {
                    "name": "small",
                    "type": "file",
                    "description": "A small (160x160) chat photo"
                },
                {
                    "name": "big",
                    "type": "file",
                    "description": "A big (640x640) chat photo"
                }
            ]
        },
        {
            "name": "linkStateNone",
            "description": "The phone number of user A is not known to user B",
            "class": "LinkState",
            "properties": []
        },
        {
            "name": "linkStateKnowsPhoneNumber",
            "description": "The phone number of user A is known but that number has not been saved to the contacts list of user B",
            "class": "LinkState",
            "properties": []
        },
        {
            "name": "linkStateIsContact",
            "description": "The phone number of user A has been saved to the contacts list of user B",
            "class": "LinkState",
            "properties": []
        },
        {
            "name": "userTypeRegular",
            "description": "A regular user",
            "class": "UserType",
            "properties": []
        },
        {
            "name": "userTypeDeleted",
            "description": "A deleted user or deleted bot. No information on the user besides the user_id is available. It is not possible to perform any active actions on this type of user",
            "class": "UserType",
            "properties": []
        },
        {
            "name": "userTypeBot",
            "description": "A bot (see https://core.telegram.org/bots)",
            "class": "UserType",
            "properties": [
                {
                    "name": "can_join_groups",
                    "type": "Bool",
                    "description": "True, if the bot can be invited to basic group and supergroup chats"
                },
                {
                    "name": "can_read_all_group_messages",
                    "type": "Bool",
                    "description": "True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages"
                },
                {
                    "name": "is_inline",
                    "type": "Bool",
                    "description": "True, if the bot supports inline queries"
                },
                {
                    "name": "inline_query_placeholder",
                    "type": "string",
                    "description": "Placeholder for inline queries (displayed on the client input field)"
                },
                {
                    "name": "need_location",
                    "type": "Bool",
                    "description": "True, if the location of the user should be sent with every inline query to this bot"
                }
            ]
        },
        {
            "name": "userTypeUnknown",
            "description": "No information on the user besides the user_id is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type",
            "class": "UserType",
            "properties": []
        },
        {
            "name": "botCommand",
            "description": "Represents commands supported by a bot",
            "class": "BotCommand",
            "properties": [
                {
                    "name": "command",
                    "type": "string",
                    "description": "Text of the bot command"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Description of the bot command"
                }
            ]
        },
        {
            "name": "botInfo",
            "description": "Provides information about a bot and its supported commands",
            "class": "BotInfo",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "description": "Long description shown on the user info page"
                },
                {
                    "name": "commands",
                    "type": "vector\u003cbotCommand\u003e",
                    "description": "A list of commands supported by the bot"
                }
            ]
        },
        {
            "name": "user",
            "description": "Represents a user",
            "class": "User",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "first_name",
                    "type": "string",
                    "description": "First name of the user"
                },
                {
                    "name": "last_name",
                    "type": "string",
                    "description": "Last name of the user"
                },
                {
                    "name": "username",
                    "type": "string",
                    "description": "Username of the user"
                },
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "Phone number of the user"
                },
                {
                    "name": "status",
                    "type": "UserStatus",
                    "description": "Current online status of the user"
                },
                {
                    "name": "profile_photo",
                    "type": "profilePhoto",
                    "description": "Profile photo of the user; may be null"
                },
                {
                    "name": "outgoing_link",
                    "type": "LinkState",
                    "description": "Relationship from the current user to the other user"
                },
                {
                    "name": "incoming_link",
                    "type": "LinkState",
                    "description": "Relationship from the other user to the current user"
                },
                {
                    "name": "is_verified",
                    "type": "Bool",
                    "description": "True, if the user is verified"
                },
                {
                    "name": "restriction_reason",
                    "type": "string",
                    "description": "If non-empty, it contains the reason why access to this user must be restricted. The format of the string is \"{type}: {description}\". {type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)"
                },
                {
                    "name": "have_access",
                    "type": "Bool",
                    "description": "If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser"
                },
                {
                    "name": "type",
                    "type": "UserType",
                    "description": "Type of the user"
                },
                {
                    "name": "language_code",
                    "type": "string",
                    "description": "IETF language tag of the user's language; only available to bots"
                }
            ]
        },
        {
            "name": "userFullInfo",
            "description": "Contains full information about a user (except the full list of profile photos)",
            "class": "UserFullInfo",
            "properties": [
                {
                    "name": "is_blocked",
                    "type": "Bool",
                    "description": "True, if the user is blacklisted by the current user"
                },
                {
                    "name": "can_be_called",
                    "type": "Bool",
                    "description": "True, if the user can be called"
                },
                {
                    "name": "has_private_calls",
                    "type": "Bool",
                    "description": "True, if the user can't be called due to their privacy settings"
                },
                {
                    "name": "bio",
                    "type": "string",
                    "description": "A short user bio"
                },
                {
                    "name": "share_text",
                    "type": "string",
                    "description": "For bots, the text that is included with the link when users share the bot"
                },
                {
                    "name": "group_in_common_count",
                    "type": "int32",
                    "description": "Number of group chats where both the other user and the current user are a member; 0 for the current user"
                },
                {
                    "name": "bot_info",
                    "type": "botInfo",
                    "description": "If the user is a bot, information about the bot; may be null"
                }
            ]
        },
        {
            "name": "userProfilePhotos",
            "description": "Contains part of the list of user photos",
            "class": "UserProfilePhotos",
            "properties": [
                {
                    "name": "total_count",
                    "type": "int32",
                    "description": "Total number of user profile photos"
                },
                {
                    "name": "photos",
                    "type": "vector\u003cphoto\u003e",
                    "description": "A list of photos"
                }
            ]
        },
        {
            "name": "users",
            "description": "Represents a list of users",
            "class": "Users",
            "properties": [
                {
                    "name": "total_count",
                    "type": "int32",
                    "description": "Approximate total count of users found"
                },
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "A list of user identifiers"
                }
            ]
        },
        {
            "name": "chatMemberStatusCreator",
            "description": "The user is the creator of a chat and has all the administrator privileges",
            "class": "ChatMemberStatus",
            "properties": [
                {
                    "name": "is_member",
                    "type": "Bool",
                    "description": "True, if the user is a member of the chat"
                }
            ]
        },
        {
            "name": "chatMemberStatusAdministrator",
            "description": "The user is a member of a chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, and ban unprivileged members. In supergroups and channels, there are more detailed options for administrator privileges",
            "class": "ChatMemberStatus",
            "properties": [
                {
                    "name": "can_be_edited",
                    "type": "Bool",
                    "description": "True, if the current user can edit the administrator privileges for the called user"
                },
                {
                    "name": "can_change_info",
                    "type": "Bool",
                    "description": "True, if the administrator can change the chat title, photo, and other settings"
                },
                {
                    "name": "can_post_messages",
                    "type": "Bool",
                    "description": "True, if the administrator can create channel posts; applicable to channels only"
                },
                {
                    "name": "can_edit_messages",
                    "type": "Bool",
                    "description": "True, if the administrator can edit messages of other users and pin messages; applicable to channels only"
                },
                {
                    "name": "can_delete_messages",
                    "type": "Bool",
                    "description": "True, if the administrator can delete messages of other users"
                },
                {
                    "name": "can_invite_users",
                    "type": "Bool",
                    "description": "True, if the administrator can invite new users to the chat"
                },
                {
                    "name": "can_restrict_members",
                    "type": "Bool",
                    "description": "True, if the administrator can restrict, ban, or unban chat members"
                },
                {
                    "name": "can_pin_messages",
                    "type": "Bool",
                    "description": "True, if the administrator can pin messages; applicable to supergroups only"
                },
                {
                    "name": "can_promote_members",
                    "type": "Bool",
                    "description": "True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that were directly or indirectly promoted by him"
                }
            ]
        },
        {
            "name": "chatMemberStatusMember",
            "description": "The user is a member of a chat, without any additional privileges or restrictions",
            "class": "ChatMemberStatus",
            "properties": []
        },
        {
            "name": "chatMemberStatusRestricted",
            "description": "The user is under certain restrictions in the chat. Not supported in basic groups and channels",
            "class": "ChatMemberStatus",
            "properties": [
                {
                    "name": "is_member",
                    "type": "Bool",
                    "description": "True, if the user is a member of the chat"
                },
                {
                    "name": "restricted_until_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever"
                },
                {
                    "name": "can_send_messages",
                    "type": "Bool",
                    "description": "True, if the user can send text messages, contacts, locations, and venues"
                },
                {
                    "name": "can_send_media_messages",
                    "type": "Bool",
                    "description": "True, if the user can send audio files, documents, photos, videos, video notes, and voice notes. Implies can_send_messages permissions"
                },
                {
                    "name": "can_send_other_messages",
                    "type": "Bool",
                    "description": "True, if the user can send animations, games, and stickers and use inline bots. Implies can_send_media_messages permissions"
                },
                {
                    "name": "can_add_web_page_previews",
                    "type": "Bool",
                    "description": "True, if the user may add a web page preview to his messages. Implies can_send_messages permissions"
                }
            ]
        },
        {
            "name": "chatMemberStatusLeft",
            "description": "The user is not a chat member",
            "class": "ChatMemberStatus",
            "properties": []
        },
        {
            "name": "chatMemberStatusBanned",
            "description": "The user was banned (and hence is not a member of the chat). Implies the user can't return to the chat or view messages",
            "class": "ChatMemberStatus",
            "properties": [
                {
                    "name": "banned_until_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever"
                }
            ]
        },
        {
            "name": "chatMember",
            "description": "A user with information about joining/leaving a chat",
            "class": "ChatMember",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier of the chat member"
                },
                {
                    "name": "inviter_user_id",
                    "type": "int32",
                    "description": "Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown"
                },
                {
                    "name": "joined_chat_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the user joined a chat"
                },
                {
                    "name": "status",
                    "type": "ChatMemberStatus",
                    "description": "Status of the member in the chat"
                },
                {
                    "name": "bot_info",
                    "type": "botInfo",
                    "description": "If the user is a bot, information about the bot; may be null. Can be null even for a bot if the bot is not a chat member"
                }
            ]
        },
        {
            "name": "chatMembers",
            "description": "Contains a list of chat members",
            "class": "ChatMembers",
            "properties": [
                {
                    "name": "total_count",
                    "type": "int32",
                    "description": "Approximate total count of chat members found"
                },
                {
                    "name": "members",
                    "type": "vector\u003cchatMember\u003e",
                    "description": "A list of chat members"
                }
            ]
        },
        {
            "name": "chatMembersFilterAdministrators",
            "description": "Returns the creator and administrators",
            "class": "ChatMembersFilter",
            "properties": []
        },
        {
            "name": "chatMembersFilterMembers",
            "description": "Returns all chat members, including restricted chat members",
            "class": "ChatMembersFilter",
            "properties": []
        },
        {
            "name": "chatMembersFilterRestricted",
            "description": "Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup",
            "class": "ChatMembersFilter",
            "properties": []
        },
        {
            "name": "chatMembersFilterBanned",
            "description": "Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel",
            "class": "ChatMembersFilter",
            "properties": []
        },
        {
            "name": "chatMembersFilterBots",
            "description": "Returns bot members of the chat",
            "class": "ChatMembersFilter",
            "properties": []
        },
        {
            "name": "supergroupMembersFilterRecent",
            "description": "Returns recently active users in reverse chronological order",
            "class": "SupergroupMembersFilter",
            "properties": []
        },
        {
            "name": "supergroupMembersFilterAdministrators",
            "description": "Returns the creator and administrators",
            "class": "SupergroupMembersFilter",
            "properties": []
        },
        {
            "name": "supergroupMembersFilterSearch",
            "description": "Used to search for supergroup or channel members via a (string) query",
            "class": "SupergroupMembersFilter",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                }
            ]
        },
        {
            "name": "supergroupMembersFilterRestricted",
            "description": "Returns restricted supergroup members; can be used only by administrators",
            "class": "SupergroupMembersFilter",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                }
            ]
        },
        {
            "name": "supergroupMembersFilterBanned",
            "description": "Returns users banned from the supergroup or channel; can be used only by administrators",
            "class": "SupergroupMembersFilter",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                }
            ]
        },
        {
            "name": "supergroupMembersFilterBots",
            "description": "Returns bot members of the supergroup or channel",
            "class": "SupergroupMembersFilter",
            "properties": []
        },
        {
            "name": "basicGroup",
            "description": "Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users)",
            "class": "BasicGroup",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Group identifier"
                },
                {
                    "name": "member_count",
                    "type": "int32",
                    "description": "Number of members in the group"
                },
                {
                    "name": "status",
                    "type": "ChatMemberStatus",
                    "description": "Status of the current user in the group"
                },
                {
                    "name": "everyone_is_administrator",
                    "type": "Bool",
                    "description": "True, if all members have been granted administrator rights in the group"
                },
                {
                    "name": "is_active",
                    "type": "Bool",
                    "description": "True, if the group is active"
                },
                {
                    "name": "upgraded_to_supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup to which this group was upgraded; 0 if none"
                }
            ]
        },
        {
            "name": "basicGroupFullInfo",
            "description": "Contains full information about a basic group",
            "class": "BasicGroupFullInfo",
            "properties": [
                {
                    "name": "creator_user_id",
                    "type": "int32",
                    "description": "User identifier of the creator of the group; 0 if unknown"
                },
                {
                    "name": "members",
                    "type": "vector\u003cchatMember\u003e",
                    "description": "Group members"
                },
                {
                    "name": "invite_link",
                    "type": "string",
                    "description": "Invite link for this group; available only for the group creator and only after it has been generated at least once"
                }
            ]
        },
        {
            "name": "supergroup",
            "description": "Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers",
            "class": "Supergroup",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Supergroup or channel identifier"
                },
                {
                    "name": "username",
                    "type": "string",
                    "description": "Username of the supergroup or channel; empty for private supergroups or channels"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member"
                },
                {
                    "name": "status",
                    "type": "ChatMemberStatus",
                    "description": "Status of the current user in the supergroup or channel"
                },
                {
                    "name": "member_count",
                    "type": "int32",
                    "description": "Member count; 0 if unknown. Currently it is guaranteed to be known only if the supergroup or channel was found through SearchPublicChats"
                },
                {
                    "name": "anyone_can_invite",
                    "type": "Bool",
                    "description": "True, if any member of the supergroup can invite other members. This field has no meaning for channels"
                },
                {
                    "name": "sign_messages",
                    "type": "Bool",
                    "description": "True, if messages sent to the channel should contain information about the sender. This field is only applicable to channels"
                },
                {
                    "name": "is_channel",
                    "type": "Bool",
                    "description": "True, if the supergroup is a channel"
                },
                {
                    "name": "is_verified",
                    "type": "Bool",
                    "description": "True, if the supergroup or channel is verified"
                },
                {
                    "name": "restriction_reason",
                    "type": "string",
                    "description": "If non-empty, contains the reason why access to this supergroup or channel must be restricted. Format of the string is \"{type}: {description}\". {type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user)"
                }
            ]
        },
        {
            "name": "supergroupFullInfo",
            "description": "Contains full information about a supergroup or channel",
            "class": "SupergroupFullInfo",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "description": "Supergroup or channel description"
                },
                {
                    "name": "member_count",
                    "type": "int32",
                    "description": "Number of members in the supergroup or channel; 0 if unknown"
                },
                {
                    "name": "administrator_count",
                    "type": "int32",
                    "description": "Number of privileged users in the supergroup or channel; 0 if unknown"
                },
                {
                    "name": "restricted_count",
                    "type": "int32",
                    "description": "Number of restricted users in the supergroup; 0 if unknown"
                },
                {
                    "name": "banned_count",
                    "type": "int32",
                    "description": "Number of users banned from chat; 0 if unknown"
                },
                {
                    "name": "can_get_members",
                    "type": "Bool",
                    "description": "True, if members of the chat can be retrieved"
                },
                {
                    "name": "can_set_username",
                    "type": "Bool",
                    "description": "True, if the chat can be made public"
                },
                {
                    "name": "can_set_sticker_set",
                    "type": "Bool",
                    "description": "True, if the supergroup sticker set can be changed"
                },
                {
                    "name": "is_all_history_available",
                    "type": "Bool",
                    "description": "True, if new chat members will have access to old messages. In public supergroups and both public and private channels, old messages are always available, so this option affects only private supergroups. The value of this field is only available for chat administrators"
                },
                {
                    "name": "sticker_set_id",
                    "type": "int64",
                    "description": "Identifier of the supergroup sticker set; 0 if none"
                },
                {
                    "name": "invite_link",
                    "type": "string",
                    "description": "Invite link for this chat"
                },
                {
                    "name": "pinned_message_id",
                    "type": "int53",
                    "description": "Identifier of the pinned message in the chat; 0 if none"
                },
                {
                    "name": "upgraded_from_basic_group_id",
                    "type": "int32",
                    "description": "Identifier of the basic group from which supergroup was upgraded; 0 if none"
                },
                {
                    "name": "upgraded_from_max_message_id",
                    "type": "int53",
                    "description": "Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none"
                }
            ]
        },
        {
            "name": "secretChatStatePending",
            "description": "The secret chat is not yet created; waiting for the other user to get online",
            "class": "SecretChatState",
            "properties": []
        },
        {
            "name": "secretChatStateReady",
            "description": "The secret chat is ready to use",
            "class": "SecretChatState",
            "properties": []
        },
        {
            "name": "secretChatStateClosed",
            "description": "The secret chat is closed",
            "class": "SecretChatState",
            "properties": []
        },
        {
            "name": "secretChat",
            "description": "Represents a secret chat",
            "class": "SecretChat",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Secret chat identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the chat partner"
                },
                {
                    "name": "state",
                    "type": "SecretChatState",
                    "description": "State of the secret chat"
                },
                {
                    "name": "is_outbound",
                    "type": "Bool",
                    "description": "True, if the chat was created by the current user; otherwise false"
                },
                {
                    "name": "ttl",
                    "type": "int32",
                    "description": "Current message Time To Live setting (self-destruct timer) for the chat, in seconds"
                },
                {
                    "name": "key_hash",
                    "type": "bytes",
                    "description": "Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 bytes, which must be used to make a 12x12 square image with a color depth of 4. The first 16 bytes should be used to make a central 8x8 square, while the remaining 20 bytes should be used to construct a 2-pixel-wide border around that square. Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers"
                },
                {
                    "name": "layer",
                    "type": "int32",
                    "description": "Secret chat layer; determines features supported by the other client. Video notes are supported if the layer \u003e= 66"
                }
            ]
        },
        {
            "name": "messageForwardedFromUser",
            "description": "The message was originally written by a known user",
            "class": "MessageForwardInfo",
            "properties": [
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user that originally sent this message"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the message was originally sent"
                },
                {
                    "name": "forwarded_from_chat_id",
                    "type": "int53",
                    "description": "For messages forwarded to the chat with the current user (saved messages), the identifier of the chat from which the message was forwarded; 0 if unknown"
                },
                {
                    "name": "forwarded_from_message_id",
                    "type": "int53",
                    "description": "For messages forwarded to the chat with the current user (saved messages) the identifier of the original message from which the new message was forwarded; 0 if unknown"
                }
            ]
        },
        {
            "name": "messageForwardedPost",
            "description": "The message was originally a post in a channel",
            "class": "MessageForwardInfo",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat from which the message was forwarded"
                },
                {
                    "name": "author_signature",
                    "type": "string",
                    "description": "Post author signature"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the message was originally sent"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier of the original message from which the new message was forwarded; 0 if unknown"
                },
                {
                    "name": "forwarded_from_chat_id",
                    "type": "int53",
                    "description": "For messages forwarded to the chat with the current user (saved messages), the identifier of the chat from which the message was forwarded; 0 if unknown"
                },
                {
                    "name": "forwarded_from_message_id",
                    "type": "int53",
                    "description": "For messages forwarded to the chat with the current user (saved messages), the identifier of the original message from which the new message was forwarded; 0 if unknown"
                }
            ]
        },
        {
            "name": "messageSendingStatePending",
            "description": "The message is being sent now, but has not yet been delivered to the server",
            "class": "MessageSendingState",
            "properties": []
        },
        {
            "name": "messageSendingStateFailed",
            "description": "The message failed to be sent",
            "class": "MessageSendingState",
            "properties": []
        },
        {
            "name": "message",
            "description": "Describes a message",
            "class": "Message",
            "properties": [
                {
                    "name": "id",
                    "type": "int53",
                    "description": "Message identifier, unique for the chat to which the message belongs"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who sent the message; 0 if unknown. It is unknown for channel posts"
                },
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "sending_state",
                    "type": "MessageSendingState",
                    "description": "Information about the sending state of the message; may be null"
                },
                {
                    "name": "is_outgoing",
                    "type": "Bool",
                    "description": "True, if the message is outgoing"
                },
                {
                    "name": "can_be_edited",
                    "type": "Bool",
                    "description": "True, if the message can be edited"
                },
                {
                    "name": "can_be_forwarded",
                    "type": "Bool",
                    "description": "True, if the message can be forwarded"
                },
                {
                    "name": "can_be_deleted_only_for_self",
                    "type": "Bool",
                    "description": "True, if the message can be deleted only for the current user while other users will continue to see it"
                },
                {
                    "name": "can_be_deleted_for_all_users",
                    "type": "Bool",
                    "description": "True, if the message can be deleted for all users"
                },
                {
                    "name": "is_channel_post",
                    "type": "Bool",
                    "description": "True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts"
                },
                {
                    "name": "contains_unread_mention",
                    "type": "Bool",
                    "description": "True, if the message contains an unread mention for the current user"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the message was sent"
                },
                {
                    "name": "edit_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the message was last edited"
                },
                {
                    "name": "forward_info",
                    "type": "MessageForwardInfo",
                    "description": "Information about the initial message sender; may be null"
                },
                {
                    "name": "reply_to_message_id",
                    "type": "int53",
                    "description": "If non-zero, the identifier of the message this message is replying to; can be the identifier of a deleted message"
                },
                {
                    "name": "ttl",
                    "type": "int32",
                    "description": "For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none. TDLib will send updateDeleteMessages or updateMessageContent once the TTL expires"
                },
                {
                    "name": "ttl_expires_in",
                    "type": "double",
                    "description": "Time left before the message expires, in seconds"
                },
                {
                    "name": "via_bot_user_id",
                    "type": "int32",
                    "description": "If non-zero, the user identifier of the bot through which this message was sent"
                },
                {
                    "name": "author_signature",
                    "type": "string",
                    "description": "For channel posts, optional author signature"
                },
                {
                    "name": "views",
                    "type": "int32",
                    "description": "Number of times this message was viewed"
                },
                {
                    "name": "media_album_id",
                    "type": "int64",
                    "description": "Unique identifier of an album this message belongs to. Only photos and videos can be grouped together in albums"
                },
                {
                    "name": "content",
                    "type": "MessageContent",
                    "description": "Content of the message"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "Reply markup for the message; may be null"
                }
            ]
        },
        {
            "name": "messages",
            "description": "Contains a list of messages",
            "class": "Messages",
            "properties": [
                {
                    "name": "total_count",
                    "type": "int32",
                    "description": "Approximate total count of messages found"
                },
                {
                    "name": "messages",
                    "type": "vector\u003cmessage\u003e",
                    "description": "List of messages; messages may be null"
                }
            ]
        },
        {
            "name": "foundMessages",
            "description": "Contains a list of messages found by a search",
            "class": "FoundMessages",
            "properties": [
                {
                    "name": "messages",
                    "type": "vector\u003cmessage\u003e",
                    "description": "List of messages"
                },
                {
                    "name": "next_from_search_id",
                    "type": "int64",
                    "description": "Value to pass as from_search_id to get more results"
                }
            ]
        },
        {
            "name": "notificationSettingsScopePrivateChats",
            "description": "Notification settings applied to all private and secret chats when the corresponding chat setting has a default value",
            "class": "NotificationSettingsScope",
            "properties": []
        },
        {
            "name": "notificationSettingsScopeGroupChats",
            "description": "Notification settings applied to all basic groups, supergroups and channels when the corresponding chat setting has a default value",
            "class": "NotificationSettingsScope",
            "properties": []
        },
        {
            "name": "chatNotificationSettings",
            "description": "Contains information about notification settings for a chat",
            "class": "ChatNotificationSettings",
            "properties": [
                {
                    "name": "use_default_mute_for",
                    "type": "Bool",
                    "description": "If true, mute_for is ignored and the value for the relevant type of chat is used instead"
                },
                {
                    "name": "mute_for",
                    "type": "int32",
                    "description": "Time left before notifications will be unmuted, in seconds"
                },
                {
                    "name": "use_default_sound",
                    "type": "Bool",
                    "description": "If true, sound is ignored and the value for the relevant type of chat is used instead"
                },
                {
                    "name": "sound",
                    "type": "string",
                    "description": "The name of an audio file to be used for notification sounds; only applies to iOS applications"
                },
                {
                    "name": "use_default_show_preview",
                    "type": "Bool",
                    "description": "If true, show_preview is ignored and the value for the relevant type of chat is used instead"
                },
                {
                    "name": "show_preview",
                    "type": "Bool",
                    "description": "True, if message content should be displayed in notifications"
                }
            ]
        },
        {
            "name": "scopeNotificationSettings",
            "description": "Contains information about notification settings for several chats",
            "class": "ScopeNotificationSettings",
            "properties": [
                {
                    "name": "mute_for",
                    "type": "int32",
                    "description": "Time left before notifications will be unmuted, in seconds"
                },
                {
                    "name": "sound",
                    "type": "string",
                    "description": "The name of an audio file to be used for notification sounds; only applies to iOS applications"
                },
                {
                    "name": "show_preview",
                    "type": "Bool",
                    "description": "True, if message content should be displayed in notifications"
                }
            ]
        },
        {
            "name": "draftMessage",
            "description": "Contains information about a message draft",
            "class": "DraftMessage",
            "properties": [
                {
                    "name": "reply_to_message_id",
                    "type": "int53",
                    "description": "Identifier of the message to reply to; 0 if none"
                },
                {
                    "name": "input_message_text",
                    "type": "InputMessageContent",
                    "description": "Content of the message draft; this should always be of type inputMessageText"
                }
            ]
        },
        {
            "name": "chatTypePrivate",
            "description": "An ordinary chat with a user",
            "class": "ChatType",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ]
        },
        {
            "name": "chatTypeBasicGroup",
            "description": "A basic group (i.e., a chat with 0-200 other users)",
            "class": "ChatType",
            "properties": [
                {
                    "name": "basic_group_id",
                    "type": "int32",
                    "description": "Basic group identifier"
                }
            ]
        },
        {
            "name": "chatTypeSupergroup",
            "description": "A supergroup (i.e. a chat with up to GetOption(\"supergroup_max_size\") other users), or channel (with unlimited members)",
            "class": "ChatType",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Supergroup or channel identifier"
                },
                {
                    "name": "is_channel",
                    "type": "Bool",
                    "description": "True, if the supergroup is a channel"
                }
            ]
        },
        {
            "name": "chatTypeSecret",
            "description": "A secret chat with a user",
            "class": "ChatType",
            "properties": [
                {
                    "name": "secret_chat_id",
                    "type": "int32",
                    "description": "Secret chat identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier of the secret chat peer"
                }
            ]
        },
        {
            "name": "chat",
            "description": "A chat. (Can be a private chat, basic group, supergroup, or secret chat)",
            "class": "Chat",
            "properties": [
                {
                    "name": "id",
                    "type": "int53",
                    "description": "Chat unique identifier"
                },
                {
                    "name": "type",
                    "type": "ChatType",
                    "description": "Type of the chat"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Chat title"
                },
                {
                    "name": "photo",
                    "type": "chatPhoto",
                    "description": "Chat photo; may be null"
                },
                {
                    "name": "last_message",
                    "type": "message",
                    "description": "Last message in the chat; may be null"
                },
                {
                    "name": "order",
                    "type": "int64",
                    "description": "Descending parameter by which chats are sorted in the main chat list. If the order number of two chats is the same, they must be sorted in descending order by ID. If 0, the position of the chat in the list is undetermined"
                },
                {
                    "name": "is_pinned",
                    "type": "Bool",
                    "description": "True, if the chat is pinned"
                },
                {
                    "name": "is_marked_as_unread",
                    "type": "Bool",
                    "description": "True, if the chat is marked as unread"
                },
                {
                    "name": "is_sponsored",
                    "type": "Bool",
                    "description": "True, if the chat is sponsored by the user's MTProxy server"
                },
                {
                    "name": "can_be_reported",
                    "type": "Bool",
                    "description": "True, if the chat can be reported to Telegram moderators through reportChat"
                },
                {
                    "name": "default_disable_notification",
                    "type": "Bool",
                    "description": "Default value of the disable_notification parameter, used when a message is sent to the chat"
                },
                {
                    "name": "unread_count",
                    "type": "int32",
                    "description": "Number of unread messages in the chat"
                },
                {
                    "name": "last_read_inbox_message_id",
                    "type": "int53",
                    "description": "Identifier of the last read incoming message"
                },
                {
                    "name": "last_read_outbox_message_id",
                    "type": "int53",
                    "description": "Identifier of the last read outgoing message"
                },
                {
                    "name": "unread_mention_count",
                    "type": "int32",
                    "description": "Number of unread messages with a mention/reply in the chat"
                },
                {
                    "name": "notification_settings",
                    "type": "chatNotificationSettings",
                    "description": "Notification settings for this chat"
                },
                {
                    "name": "reply_markup_message_id",
                    "type": "int53",
                    "description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat"
                },
                {
                    "name": "draft_message",
                    "type": "draftMessage",
                    "description": "A draft of a message in the chat; may be null"
                },
                {
                    "name": "client_data",
                    "type": "string",
                    "description": "Contains client-specific data associated with the chat. (For example, the chat position or local chat notification settings can be stored here.) Persistent if a message database is used"
                }
            ]
        },
        {
            "name": "chats",
            "description": "Represents a list of chats",
            "class": "Chats",
            "properties": [
                {
                    "name": "chat_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "List of chat identifiers"
                }
            ]
        },
        {
            "name": "chatInviteLink",
            "description": "Contains a chat invite link",
            "class": "ChatInviteLink",
            "properties": [
                {
                    "name": "invite_link",
                    "type": "string",
                    "description": "Chat invite link"
                }
            ]
        },
        {
            "name": "chatInviteLinkInfo",
            "description": "Contains information about a chat invite link",
            "class": "ChatInviteLinkInfo",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier of the invite link; 0 if the user is not a member of this chat"
                },
                {
                    "name": "type",
                    "type": "ChatType",
                    "description": "Contains information about the type of the chat"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the chat"
                },
                {
                    "name": "photo",
                    "type": "chatPhoto",
                    "description": "Chat photo; may be null"
                },
                {
                    "name": "member_count",
                    "type": "int32",
                    "description": "Number of members"
                },
                {
                    "name": "member_user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "User identifiers of some chat members that may be known to the current user"
                },
                {
                    "name": "is_public",
                    "type": "Bool",
                    "description": "True, if the chat is a public supergroup or channel with a username"
                }
            ]
        },
        {
            "name": "keyboardButtonTypeText",
            "description": "A simple button, with text that should be sent when the button is pressed",
            "class": "KeyboardButtonType",
            "properties": []
        },
        {
            "name": "keyboardButtonTypeRequestPhoneNumber",
            "description": "A button that sends the user's phone number when pressed; available only in private chats",
            "class": "KeyboardButtonType",
            "properties": []
        },
        {
            "name": "keyboardButtonTypeRequestLocation",
            "description": "A button that sends the user's location when pressed; available only in private chats",
            "class": "KeyboardButtonType",
            "properties": []
        },
        {
            "name": "keyboardButton",
            "description": "Represents a single button in a bot keyboard",
            "class": "KeyboardButton",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "Text of the button"
                },
                {
                    "name": "type",
                    "type": "KeyboardButtonType",
                    "description": "Type of the button"
                }
            ]
        },
        {
            "name": "inlineKeyboardButtonTypeURL",
            "description": "A button that opens a specified URL",
            "class": "InlineKeyboardButtonType",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "HTTP or tg:// URL to open"
                }
            ]
        },
        {
            "name": "inlineKeyboardButtonTypeCallback",
            "description": "A button that sends a special callback query to a bot",
            "class": "InlineKeyboardButtonType",
            "properties": [
                {
                    "name": "data",
                    "type": "bytes",
                    "description": "Data to be sent to the bot via a callback query"
                }
            ]
        },
        {
            "name": "inlineKeyboardButtonTypeCallbackGame",
            "description": "A button with a game that sends a special callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame",
            "class": "InlineKeyboardButtonType",
            "properties": []
        },
        {
            "name": "inlineKeyboardButtonTypeSwitchInline",
            "description": "A button that forces an inline query to the bot to be inserted in the input field",
            "class": "InlineKeyboardButtonType",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Inline query to be sent to the bot"
                },
                {
                    "name": "in_current_chat",
                    "type": "Bool",
                    "description": "True, if the inline query should be sent from the current chat"
                }
            ]
        },
        {
            "name": "inlineKeyboardButtonTypeBuy",
            "description": "A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice",
            "class": "InlineKeyboardButtonType",
            "properties": []
        },
        {
            "name": "inlineKeyboardButton",
            "description": "Represents a single button in an inline keyboard",
            "class": "InlineKeyboardButton",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "Text of the button"
                },
                {
                    "name": "type",
                    "type": "InlineKeyboardButtonType",
                    "description": "Type of the button"
                }
            ]
        },
        {
            "name": "replyMarkupRemoveKeyboard",
            "description": "Instructs clients to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, UpdateChatReplyMarkup with message_id == 0 will be sent",
            "class": "ReplyMarkup",
            "properties": [
                {
                    "name": "is_personal",
                    "type": "Bool",
                    "description": "True, if the keyboard is removed only for the mentioned users or the target user of a reply"
                }
            ]
        },
        {
            "name": "replyMarkupForceReply",
            "description": "Instructs clients to force a reply to this message",
            "class": "ReplyMarkup",
            "properties": [
                {
                    "name": "is_personal",
                    "type": "Bool",
                    "description": "True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply"
                }
            ]
        },
        {
            "name": "replyMarkupShowKeyboard",
            "description": "Contains a custom keyboard layout to quickly reply to bots",
            "class": "ReplyMarkup",
            "properties": [
                {
                    "name": "rows",
                    "type": "vector\u003cvector\u003ckeyboardButton\u003e\u003e",
                    "description": "A list of rows of bot keyboard buttons"
                },
                {
                    "name": "resize_keyboard",
                    "type": "Bool",
                    "description": "True, if the client needs to resize the keyboard vertically"
                },
                {
                    "name": "one_time",
                    "type": "Bool",
                    "description": "True, if the client needs to hide the keyboard after use"
                },
                {
                    "name": "is_personal",
                    "type": "Bool",
                    "description": "True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply"
                }
            ]
        },
        {
            "name": "replyMarkupInlineKeyboard",
            "description": "Contains an inline keyboard layout",
            "class": "ReplyMarkup",
            "properties": [
                {
                    "name": "rows",
                    "type": "vector\u003cvector\u003cinlineKeyboardButton\u003e\u003e",
                    "description": "A list of rows of inline keyboard buttons"
                }
            ]
        },
        {
            "name": "richTextPlain",
            "description": "A plain text",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "Text"
                }
            ]
        },
        {
            "name": "richTextBold",
            "description": "A bold rich text",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Text"
                }
            ]
        },
        {
            "name": "richTextItalic",
            "description": "An italicized rich text",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Text"
                }
            ]
        },
        {
            "name": "richTextUnderline",
            "description": "An underlined rich text",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Text"
                }
            ]
        },
        {
            "name": "richTextStrikethrough",
            "description": "A strike-through rich text",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Text"
                }
            ]
        },
        {
            "name": "richTextFixed",
            "description": "A fixed-width rich text",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Text"
                }
            ]
        },
        {
            "name": "richTextURL",
            "description": "A rich text URL link",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Text"
                },
                {
                    "name": "url",
                    "type": "string",
                    "description": "URL"
                }
            ]
        },
        {
            "name": "richTextEmailAddress",
            "description": "A rich text email link",
            "class": "RichText",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Text"
                },
                {
                    "name": "email_address",
                    "type": "string",
                    "description": "Email address"
                }
            ]
        },
        {
            "name": "richTexts",
            "description": "A concatenation of rich texts",
            "class": "RichText",
            "properties": [
                {
                    "name": "texts",
                    "type": "vector\u003cRichText\u003e",
                    "description": "Texts"
                }
            ]
        },
        {
            "name": "pageBlockTitle",
            "description": "The title of a page",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "title",
                    "type": "RichText",
                    "description": "Title"
                }
            ]
        },
        {
            "name": "pageBlockSubtitle",
            "description": "The subtitle of a page",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "subtitle",
                    "type": "RichText",
                    "description": "Subtitle"
                }
            ]
        },
        {
            "name": "pageBlockAuthorDate",
            "description": "The author and publishing date of a page",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "author",
                    "type": "RichText",
                    "description": "Author"
                },
                {
                    "name": "publish_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the article was published; 0 if unknown"
                }
            ]
        },
        {
            "name": "pageBlockHeader",
            "description": "A header",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "header",
                    "type": "RichText",
                    "description": "Header"
                }
            ]
        },
        {
            "name": "pageBlockSubheader",
            "description": "A subheader",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "subheader",
                    "type": "RichText",
                    "description": "Subheader"
                }
            ]
        },
        {
            "name": "pageBlockParagraph",
            "description": "A text paragraph",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Paragraph text"
                }
            ]
        },
        {
            "name": "pageBlockPreformatted",
            "description": "A preformatted text paragraph",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Paragraph text"
                },
                {
                    "name": "language",
                    "type": "string",
                    "description": "Programming language for which the text should be formatted"
                }
            ]
        },
        {
            "name": "pageBlockFooter",
            "description": "The footer of a page",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "footer",
                    "type": "RichText",
                    "description": "Footer"
                }
            ]
        },
        {
            "name": "pageBlockDivider",
            "description": "An empty block separating a page",
            "class": "PageBlock",
            "properties": []
        },
        {
            "name": "pageBlockAnchor",
            "description": "An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "Name of the anchor"
                }
            ]
        },
        {
            "name": "pageBlockList",
            "description": "A list of texts",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "items",
                    "type": "vector\u003cRichText\u003e",
                    "description": "Texts"
                },
                {
                    "name": "is_ordered",
                    "type": "Bool",
                    "description": "True, if the items should be marked with numbers"
                }
            ]
        },
        {
            "name": "pageBlockBlockQuote",
            "description": "A block quote",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Quote text"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Quote caption"
                }
            ]
        },
        {
            "name": "pageBlockPullQuote",
            "description": "A pull quote",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "text",
                    "type": "RichText",
                    "description": "Quote text"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Quote caption"
                }
            ]
        },
        {
            "name": "pageBlockAnimation",
            "description": "An animation",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "animation",
                    "type": "animation",
                    "description": "Animation file; may be null"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Animation caption"
                },
                {
                    "name": "need_autoplay",
                    "type": "Bool",
                    "description": "True, if the animation should be played automatically"
                }
            ]
        },
        {
            "name": "pageBlockAudio",
            "description": "An audio file",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "audio",
                    "type": "audio",
                    "description": "Audio file; may be null"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Audio file caption"
                }
            ]
        },
        {
            "name": "pageBlockPhoto",
            "description": "A photo",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "photo",
                    "type": "photo",
                    "description": "Photo file; may be null"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Photo caption"
                }
            ]
        },
        {
            "name": "pageBlockVideo",
            "description": "A video",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "video",
                    "type": "video",
                    "description": "Video file; may be null"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Video caption"
                },
                {
                    "name": "need_autoplay",
                    "type": "Bool",
                    "description": "True, if the video should be played automatically"
                },
                {
                    "name": "is_looped",
                    "type": "Bool",
                    "description": "True, if the video should be looped"
                }
            ]
        },
        {
            "name": "pageBlockCover",
            "description": "A page cover",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "cover",
                    "type": "PageBlock",
                    "description": "Cover"
                }
            ]
        },
        {
            "name": "pageBlockEmbedded",
            "description": "An embedded web page",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "Web page URL, if available"
                },
                {
                    "name": "html",
                    "type": "string",
                    "description": "HTML-markup of the embedded page"
                },
                {
                    "name": "poster_photo",
                    "type": "photo",
                    "description": "Poster photo, if available; may be null"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Block width"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Block height"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Block caption"
                },
                {
                    "name": "is_full_width",
                    "type": "Bool",
                    "description": "True, if the block should be full width"
                },
                {
                    "name": "allow_scrolling",
                    "type": "Bool",
                    "description": "True, if scrolling should be allowed"
                }
            ]
        },
        {
            "name": "pageBlockEmbeddedPost",
            "description": "An embedded post",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "Web page URL"
                },
                {
                    "name": "author",
                    "type": "string",
                    "description": "Post author"
                },
                {
                    "name": "author_photo",
                    "type": "photo",
                    "description": "Post author photo"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the post was created; 0 if unknown"
                },
                {
                    "name": "page_blocks",
                    "type": "vector\u003cPageBlock\u003e",
                    "description": "Post content"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Post caption"
                }
            ]
        },
        {
            "name": "pageBlockCollage",
            "description": "A collage",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "page_blocks",
                    "type": "vector\u003cPageBlock\u003e",
                    "description": "Collage item contents"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Block caption"
                }
            ]
        },
        {
            "name": "pageBlockSlideshow",
            "description": "A slideshow",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "page_blocks",
                    "type": "vector\u003cPageBlock\u003e",
                    "description": "Slideshow item contents"
                },
                {
                    "name": "caption",
                    "type": "RichText",
                    "description": "Block caption"
                }
            ]
        },
        {
            "name": "pageBlockChatLink",
            "description": "A link to a chat",
            "class": "PageBlock",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "description": "Chat title"
                },
                {
                    "name": "photo",
                    "type": "chatPhoto",
                    "description": "Chat photo; may be null"
                },
                {
                    "name": "username",
                    "type": "string",
                    "description": "Chat username, by which all other information about the chat should be resolved"
                }
            ]
        },
        {
            "name": "webPageInstantView",
            "description": "Describes an instant view page for a web page",
            "class": "WebPageInstantView",
            "properties": [
                {
                    "name": "page_blocks",
                    "type": "vector\u003cPageBlock\u003e",
                    "description": "Content of the web page"
                },
                {
                    "name": "is_full",
                    "type": "Bool",
                    "description": "True, if the instant view contains the full page. A network request might be needed to get the full web page instant view"
                }
            ]
        },
        {
            "name": "webPage",
            "description": "Describes a web page preview",
            "class": "WebPage",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "Original URL of the link"
                },
                {
                    "name": "display_url",
                    "type": "string",
                    "description": "URL to display"
                },
                {
                    "name": "type",
                    "type": "string",
                    "description": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else"
                },
                {
                    "name": "site_name",
                    "type": "string",
                    "description": "Short name of the site (e.g., Google Docs, App Store)"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the content"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Description of the content"
                },
                {
                    "name": "photo",
                    "type": "photo",
                    "description": "Image representing the content; may be null"
                },
                {
                    "name": "embed_url",
                    "type": "string",
                    "description": "URL to show in the embedded preview"
                },
                {
                    "name": "embed_type",
                    "type": "string",
                    "description": "MIME type of the embedded preview, (e.g., text/html or video/mp4)"
                },
                {
                    "name": "embed_width",
                    "type": "int32",
                    "description": "Width of the embedded preview"
                },
                {
                    "name": "embed_height",
                    "type": "int32",
                    "description": "Height of the embedded preview"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the content, in seconds"
                },
                {
                    "name": "author",
                    "type": "string",
                    "description": "Author of the content"
                },
                {
                    "name": "animation",
                    "type": "animation",
                    "description": "Preview of the content as an animation, if available; may be null"
                },
                {
                    "name": "audio",
                    "type": "audio",
                    "description": "Preview of the content as an audio file, if available; may be null"
                },
                {
                    "name": "document",
                    "type": "document",
                    "description": "Preview of the content as a document, if available (currently only available for small PDF files and ZIP archives); may be null"
                },
                {
                    "name": "sticker",
                    "type": "sticker",
                    "description": "Preview of the content as a sticker for small WEBP files, if available; may be null"
                },
                {
                    "name": "video",
                    "type": "video",
                    "description": "Preview of the content as a video, if available; may be null"
                },
                {
                    "name": "video_note",
                    "type": "videoNote",
                    "description": "Preview of the content as a video note, if available; may be null"
                },
                {
                    "name": "voice_note",
                    "type": "voiceNote",
                    "description": "Preview of the content as a voice note, if available; may be null"
                },
                {
                    "name": "has_instant_view",
                    "type": "Bool",
                    "description": "True, if the web page has an instant view"
                }
            ]
        },
        {
            "name": "address",
            "description": "Describes an address",
            "class": "Address",
            "properties": [
                {
                    "name": "country_code",
                    "type": "string",
                    "description": "A two-letter ISO 3166-1 alpha-2 country code"
                },
                {
                    "name": "state",
                    "type": "string",
                    "description": "State, if applicable"
                },
                {
                    "name": "city",
                    "type": "string",
                    "description": "City"
                },
                {
                    "name": "street_line1",
                    "type": "string",
                    "description": "First line of the address"
                },
                {
                    "name": "street_line2",
                    "type": "string",
                    "description": "Second line of the address"
                },
                {
                    "name": "postal_code",
                    "type": "string",
                    "description": "Address postal code"
                }
            ]
        },
        {
            "name": "labeledPricePart",
            "description": "Portion of the price of a product (e.g., \"delivery cost\", \"tax amount\")",
            "class": "LabeledPricePart",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "description": "Label for this portion of the product price"
                },
                {
                    "name": "amount",
                    "type": "int53",
                    "description": "Currency amount in minimal quantity of the currency"
                }
            ]
        },
        {
            "name": "invoice",
            "description": "Product invoice",
            "class": "Invoice",
            "properties": [
                {
                    "name": "currency",
                    "type": "string",
                    "description": "ISO 4217 currency code"
                },
                {
                    "name": "price_parts",
                    "type": "vector\u003clabeledPricePart\u003e",
                    "description": "A list of objects used to calculate the total price of the product"
                },
                {
                    "name": "is_test",
                    "type": "Bool",
                    "description": "True, if the payment is a test payment"
                },
                {
                    "name": "need_name",
                    "type": "Bool",
                    "description": "True, if the user's name is needed for payment"
                },
                {
                    "name": "need_phone_number",
                    "type": "Bool",
                    "description": "True, if the user's phone number is needed for payment"
                },
                {
                    "name": "need_email_address",
                    "type": "Bool",
                    "description": "True, if the user's email address is needed for payment"
                },
                {
                    "name": "need_shipping_address",
                    "type": "Bool",
                    "description": "True, if the user's shipping address is needed for payment"
                },
                {
                    "name": "send_phone_number_to_provider",
                    "type": "Bool",
                    "description": "True, if the user's phone number will be sent to the provider"
                },
                {
                    "name": "send_email_address_to_provider",
                    "type": "Bool",
                    "description": "True, if the user's email address will be sent to the provider"
                },
                {
                    "name": "is_flexible",
                    "type": "Bool",
                    "description": "True, if the total price depends on the shipping method"
                }
            ]
        },
        {
            "name": "orderInfo",
            "description": "Order information",
            "class": "OrderInfo",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "Name of the user"
                },
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "Phone number of the user"
                },
                {
                    "name": "email_address",
                    "type": "string",
                    "description": "Email address of the user"
                },
                {
                    "name": "shipping_address",
                    "type": "address",
                    "description": "Shipping address for this order; may be null"
                }
            ]
        },
        {
            "name": "shippingOption",
            "description": "One shipping option",
            "class": "ShippingOption",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Shipping option identifier"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Option title"
                },
                {
                    "name": "price_parts",
                    "type": "vector\u003clabeledPricePart\u003e",
                    "description": "A list of objects used to calculate the total shipping costs"
                }
            ]
        },
        {
            "name": "savedCredentials",
            "description": "Contains information about saved card credentials",
            "class": "SavedCredentials",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the saved credentials"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the saved credentials"
                }
            ]
        },
        {
            "name": "inputCredentialsSaved",
            "description": "Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password",
            "class": "InputCredentials",
            "properties": [
                {
                    "name": "saved_credentials_id",
                    "type": "string",
                    "description": "Identifier of the saved credentials"
                }
            ]
        },
        {
            "name": "inputCredentialsNew",
            "description": "Applies if a user enters new credentials on a payment provider website",
            "class": "InputCredentials",
            "properties": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "Contains JSON-encoded data with a credential identifier from the payment provider"
                },
                {
                    "name": "allow_save",
                    "type": "Bool",
                    "description": "True, if the credential identifier can be saved on the server side"
                }
            ]
        },
        {
            "name": "inputCredentialsAndroidPay",
            "description": "Applies if a user enters new credentials using Android Pay",
            "class": "InputCredentials",
            "properties": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "JSON-encoded data with the credential identifier"
                }
            ]
        },
        {
            "name": "inputCredentialsApplePay",
            "description": "Applies if a user enters new credentials using Apple Pay",
            "class": "InputCredentials",
            "properties": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "JSON-encoded data with the credential identifier"
                }
            ]
        },
        {
            "name": "paymentsProviderStripe",
            "description": "Stripe payment provider",
            "class": "PaymentsProviderStripe",
            "properties": [
                {
                    "name": "publishable_key",
                    "type": "string",
                    "description": "Stripe API publishable key"
                },
                {
                    "name": "need_country",
                    "type": "Bool",
                    "description": "True, if the user country must be provided"
                },
                {
                    "name": "need_postal_code",
                    "type": "Bool",
                    "description": "True, if the user ZIP/postal code must be provided"
                },
                {
                    "name": "need_cardholder_name",
                    "type": "Bool",
                    "description": "True, if the cardholder name must be provided"
                }
            ]
        },
        {
            "name": "paymentForm",
            "description": "Contains information about an invoice payment form",
            "class": "PaymentForm",
            "properties": [
                {
                    "name": "invoice",
                    "type": "invoice",
                    "description": "Full information of the invoice"
                },
                {
                    "name": "url",
                    "type": "string",
                    "description": "Payment form URL"
                },
                {
                    "name": "payments_provider",
                    "type": "paymentsProviderStripe",
                    "description": "Contains information about the payment provider, if available, to support it natively without the need for opening the URL; may be null"
                },
                {
                    "name": "saved_order_info",
                    "type": "orderInfo",
                    "description": "Saved server-side order information; may be null"
                },
                {
                    "name": "saved_credentials",
                    "type": "savedCredentials",
                    "description": "Contains information about saved card credentials; may be null"
                },
                {
                    "name": "can_save_credentials",
                    "type": "Bool",
                    "description": "True, if the user can choose to save credentials"
                },
                {
                    "name": "need_password",
                    "type": "Bool",
                    "description": "True, if the user will be able to save credentials protected by a password they set up"
                }
            ]
        },
        {
            "name": "validatedOrderInfo",
            "description": "Contains a temporary identifier of validated order information, which is stored for one hour. Also contains the available shipping options",
            "class": "ValidatedOrderInfo",
            "properties": [
                {
                    "name": "order_info_id",
                    "type": "string",
                    "description": "Temporary identifier of the order information"
                },
                {
                    "name": "shipping_options",
                    "type": "vector\u003cshippingOption\u003e",
                    "description": "Available shipping options"
                }
            ]
        },
        {
            "name": "paymentResult",
            "description": "Contains the result of a payment request",
            "class": "PaymentResult",
            "properties": [
                {
                    "name": "success",
                    "type": "Bool",
                    "description": "True, if the payment request was successful; otherwise the verification_url will be not empty"
                },
                {
                    "name": "verification_url",
                    "type": "string",
                    "description": "URL for additional payment credentials verification"
                }
            ]
        },
        {
            "name": "paymentReceipt",
            "description": "Contains information about a successful payment",
            "class": "PaymentReceipt",
            "properties": [
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the payment was made"
                },
                {
                    "name": "payments_provider_user_id",
                    "type": "int32",
                    "description": "User identifier of the payment provider bot"
                },
                {
                    "name": "invoice",
                    "type": "invoice",
                    "description": "Contains information about the invoice"
                },
                {
                    "name": "order_info",
                    "type": "orderInfo",
                    "description": "Contains order information; may be null"
                },
                {
                    "name": "shipping_option",
                    "type": "shippingOption",
                    "description": "Chosen shipping option; may be null"
                },
                {
                    "name": "credentials_title",
                    "type": "string",
                    "description": "Title of the saved credentials"
                }
            ]
        },
        {
            "name": "datedFile",
            "description": "File with the date it was uploaded",
            "class": "DatedFile",
            "properties": [
                {
                    "name": "file",
                    "type": "file",
                    "description": "The file"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the file was uploaded"
                }
            ]
        },
        {
            "name": "passportElementTypePersonalDetails",
            "description": "A Telegram Passport element containing the user's personal details",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypePassport",
            "description": "A Telegram Passport element containing the user's passport",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeDriverLicense",
            "description": "A Telegram Passport element containing the user's driver license",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeIdentityCard",
            "description": "A Telegram Passport element containing the user's identity card",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeInternalPassport",
            "description": "A Telegram Passport element containing the user's internal passport",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeAddress",
            "description": "A Telegram Passport element containing the user's address",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeUtilityBill",
            "description": "A Telegram Passport element containing the user's utility bill",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeBankStatement",
            "description": "A Telegram Passport element containing the user's bank statement",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeRentalAgreement",
            "description": "A Telegram Passport element containing the user's rental agreement",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypePassportRegistration",
            "description": "A Telegram Passport element containing the registration page of the user's passport",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeTemporaryRegistration",
            "description": "A Telegram Passport element containing the user's temporary registration",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypePhoneNumber",
            "description": "A Telegram Passport element containing the user's phone number",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "passportElementTypeEmailAddress",
            "description": "A Telegram Passport element containing the user's email address",
            "class": "PassportElementType",
            "properties": []
        },
        {
            "name": "date",
            "description": "Represents a date according to the Gregorian calendar",
            "class": "Date",
            "properties": [
                {
                    "name": "day",
                    "type": "int32",
                    "description": "Day of the month, 1-31"
                },
                {
                    "name": "month",
                    "type": "int32",
                    "description": "Month, 1-12"
                },
                {
                    "name": "year",
                    "type": "int32",
                    "description": "Year, 1-9999"
                }
            ]
        },
        {
            "name": "personalDetails",
            "description": "Contains the user's personal details",
            "class": "PersonalDetails",
            "properties": [
                {
                    "name": "first_name",
                    "type": "string",
                    "description": "First name of the user written in English; 1-255 characters"
                },
                {
                    "name": "middle_name",
                    "type": "string",
                    "description": "Middle name of the user written in English; 0-255 characters"
                },
                {
                    "name": "last_name",
                    "type": "string",
                    "description": "Last name of the user written in English; 1-255 characters"
                },
                {
                    "name": "native_first_name",
                    "type": "string",
                    "description": "Native first name of the user; 1-255 characters"
                },
                {
                    "name": "native_middle_name",
                    "type": "string",
                    "description": "Native middle name of the user; 0-255 characters"
                },
                {
                    "name": "native_last_name",
                    "type": "string",
                    "description": "Native last name of the user; 1-255 characters"
                },
                {
                    "name": "birthdate",
                    "type": "date",
                    "description": "Birthdate of the user"
                },
                {
                    "name": "gender",
                    "type": "string",
                    "description": "Gender of the user, \"male\" or \"female\""
                },
                {
                    "name": "country_code",
                    "type": "string",
                    "description": "A two-letter ISO 3166-1 alpha-2 country code of the user's country"
                },
                {
                    "name": "residence_country_code",
                    "type": "string",
                    "description": "A two-letter ISO 3166-1 alpha-2 country code of the user's residence country"
                }
            ]
        },
        {
            "name": "identityDocument",
            "description": "An identity document",
            "class": "IdentityDocument",
            "properties": [
                {
                    "name": "number",
                    "type": "string",
                    "description": "Document number; 1-24 characters"
                },
                {
                    "name": "expiry_date",
                    "type": "date",
                    "description": "Document expiry date; may be null"
                },
                {
                    "name": "front_side",
                    "type": "datedFile",
                    "description": "Front side of the document"
                },
                {
                    "name": "reverse_side",
                    "type": "datedFile",
                    "description": "Reverse side of the document; only for driver license and identity card"
                },
                {
                    "name": "selfie",
                    "type": "datedFile",
                    "description": "Selfie with the document; may be null"
                },
                {
                    "name": "translation",
                    "type": "vector\u003cdatedFile\u003e",
                    "description": "List of files containing a certified English translation of the document"
                }
            ]
        },
        {
            "name": "inputIdentityDocument",
            "description": "An identity document to be saved to Telegram Passport",
            "class": "InputIdentityDocument",
            "properties": [
                {
                    "name": "number",
                    "type": "string",
                    "description": "Document number; 1-24 characters"
                },
                {
                    "name": "expiry_date",
                    "type": "date",
                    "description": "Document expiry date, if available"
                },
                {
                    "name": "front_side",
                    "type": "InputFile",
                    "description": "Front side of the document"
                },
                {
                    "name": "reverse_side",
                    "type": "InputFile",
                    "description": "Reverse side of the document; only for driver license and identity card"
                },
                {
                    "name": "selfie",
                    "type": "InputFile",
                    "description": "Selfie with the document, if available"
                },
                {
                    "name": "translation",
                    "type": "vector\u003cInputFile\u003e",
                    "description": "List of files containing a certified English translation of the document"
                }
            ]
        },
        {
            "name": "personalDocument",
            "description": "A personal document, containing some information about a user",
            "class": "PersonalDocument",
            "properties": [
                {
                    "name": "files",
                    "type": "vector\u003cdatedFile\u003e",
                    "description": "List of files containing the pages of the document"
                },
                {
                    "name": "translation",
                    "type": "vector\u003cdatedFile\u003e",
                    "description": "List of files containing a certified English translation of the document"
                }
            ]
        },
        {
            "name": "inputPersonalDocument",
            "description": "A personal document to be saved to Telegram Passport",
            "class": "InputPersonalDocument",
            "properties": [
                {
                    "name": "files",
                    "type": "vector\u003cInputFile\u003e",
                    "description": "List of files containing the pages of the document"
                },
                {
                    "name": "translation",
                    "type": "vector\u003cInputFile\u003e",
                    "description": "List of files containing a certified English translation of the document"
                }
            ]
        },
        {
            "name": "passportElementPersonalDetails",
            "description": "A Telegram Passport element containing the user's personal details",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "personal_details",
                    "type": "personalDetails",
                    "description": "Personal details of the user"
                }
            ]
        },
        {
            "name": "passportElementPassport",
            "description": "A Telegram Passport element containing the user's passport",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "passport",
                    "type": "identityDocument",
                    "description": "Passport"
                }
            ]
        },
        {
            "name": "passportElementDriverLicense",
            "description": "A Telegram Passport element containing the user's driver license",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "driver_license",
                    "type": "identityDocument",
                    "description": "Driver license"
                }
            ]
        },
        {
            "name": "passportElementIdentityCard",
            "description": "A Telegram Passport element containing the user's identity card",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "identity_card",
                    "type": "identityDocument",
                    "description": "Identity card"
                }
            ]
        },
        {
            "name": "passportElementInternalPassport",
            "description": "A Telegram Passport element containing the user's internal passport",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "internal_passport",
                    "type": "identityDocument",
                    "description": "Internal passport"
                }
            ]
        },
        {
            "name": "passportElementAddress",
            "description": "A Telegram Passport element containing the user's address",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "address",
                    "type": "address",
                    "description": "Address"
                }
            ]
        },
        {
            "name": "passportElementUtilityBill",
            "description": "A Telegram Passport element containing the user's utility bill",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "utility_bill",
                    "type": "personalDocument",
                    "description": "Utility bill"
                }
            ]
        },
        {
            "name": "passportElementBankStatement",
            "description": "A Telegram Passport element containing the user's bank statement",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "bank_statement",
                    "type": "personalDocument",
                    "description": "Bank statement"
                }
            ]
        },
        {
            "name": "passportElementRentalAgreement",
            "description": "A Telegram Passport element containing the user's rental agreement",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "rental_agreement",
                    "type": "personalDocument",
                    "description": "Rental agreement"
                }
            ]
        },
        {
            "name": "passportElementPassportRegistration",
            "description": "A Telegram Passport element containing the user's passport registration pages",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "passport_registration",
                    "type": "personalDocument",
                    "description": "Passport registration pages"
                }
            ]
        },
        {
            "name": "passportElementTemporaryRegistration",
            "description": "A Telegram Passport element containing the user's temporary registration",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "temporary_registration",
                    "type": "personalDocument",
                    "description": "Temporary registration"
                }
            ]
        },
        {
            "name": "passportElementPhoneNumber",
            "description": "A Telegram Passport element containing the user's phone number",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "Phone number"
                }
            ]
        },
        {
            "name": "passportElementEmailAddress",
            "description": "A Telegram Passport element containing the user's email address",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "email_address",
                    "type": "string",
                    "description": "Email address"
                }
            ]
        },
        {
            "name": "inputPassportElementPersonalDetails",
            "description": "A Telegram Passport element to be saved containing the user's personal details",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "personal_details",
                    "type": "personalDetails",
                    "description": "Personal details of the user"
                }
            ]
        },
        {
            "name": "inputPassportElementPassport",
            "description": "A Telegram Passport element to be saved containing the user's passport",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "passport",
                    "type": "inputIdentityDocument",
                    "description": "The passport to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementDriverLicense",
            "description": "A Telegram Passport element to be saved containing the user's driver license",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "driver_license",
                    "type": "inputIdentityDocument",
                    "description": "The driver license to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementIdentityCard",
            "description": "A Telegram Passport element to be saved containing the user's identity card",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "identity_card",
                    "type": "inputIdentityDocument",
                    "description": "The identity card to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementInternalPassport",
            "description": "A Telegram Passport element to be saved containing the user's internal passport",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "internal_passport",
                    "type": "inputIdentityDocument",
                    "description": "The internal passport to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementAddress",
            "description": "A Telegram Passport element to be saved containing the user's address",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "address",
                    "type": "address",
                    "description": "The address to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementUtilityBill",
            "description": "A Telegram Passport element to be saved containing the user's utility bill",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "utility_bill",
                    "type": "inputPersonalDocument",
                    "description": "The utility bill to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementBankStatement",
            "description": "A Telegram Passport element to be saved containing the user's bank statement",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "bank_statement",
                    "type": "inputPersonalDocument",
                    "description": "The bank statement to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementRentalAgreement",
            "description": "A Telegram Passport element to be saved containing the user's rental agreement",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "rental_agreement",
                    "type": "inputPersonalDocument",
                    "description": "The rental agreement to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementPassportRegistration",
            "description": "A Telegram Passport element to be saved containing the user's passport registration",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "passport_registration",
                    "type": "inputPersonalDocument",
                    "description": "The passport registration page to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementTemporaryRegistration",
            "description": "A Telegram Passport element to be saved containing the user's temporary registration",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "temporary_registration",
                    "type": "inputPersonalDocument",
                    "description": "The temporary registration document to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementPhoneNumber",
            "description": "A Telegram Passport element to be saved containing the user's phone number",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "The phone number to be saved"
                }
            ]
        },
        {
            "name": "inputPassportElementEmailAddress",
            "description": "A Telegram Passport element to be saved containing the user's email address",
            "class": "InputPassportElement",
            "properties": [
                {
                    "name": "email_address",
                    "type": "string",
                    "description": "The email address to be saved"
                }
            ]
        },
        {
            "name": "passportElements",
            "description": "Contains information about saved Telegram Passport elements",
            "class": "PassportElements",
            "properties": [
                {
                    "name": "elements",
                    "type": "vector\u003cPassportElement\u003e",
                    "description": "Telegram Passport elements"
                }
            ]
        },
        {
            "name": "passportElementErrorSourceUnspecified",
            "description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementErrorSourceDataField",
            "description": "One of the data fields contains an error. The error will be considered resolved when the value of the field changes",
            "class": "PassportElementErrorSource",
            "properties": [
                {
                    "name": "field_name",
                    "type": "string",
                    "description": "Field name"
                }
            ]
        },
        {
            "name": "passportElementErrorSourceFrontSide",
            "description": "The front side of the document contains an error. The error will be considered resolved when the file with the front side changes",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementErrorSourceReverseSide",
            "description": "The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementErrorSourceSelfie",
            "description": "The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementErrorSourceTranslationFile",
            "description": "One of files with the translation of the document contains an error. The error will be considered resolved when the file changes",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementErrorSourceTranslationFiles",
            "description": "The translation of the document contains an error. The error will be considered resolved when the list of translation files changes",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementErrorSourceFile",
            "description": "The file contains an error. The error will be considered resolved when the file changes",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementErrorSourceFiles",
            "description": "The list of attached files contains an error. The error will be considered resolved when the list of files changes",
            "class": "PassportElementErrorSource",
            "properties": []
        },
        {
            "name": "passportElementError",
            "description": "Contains the description of an error in a Telegram Passport element",
            "class": "PassportElementError",
            "properties": [
                {
                    "name": "type",
                    "type": "PassportElementType",
                    "description": "Type of the Telegram Passport element which has the error"
                },
                {
                    "name": "message",
                    "type": "string",
                    "description": "Error message"
                },
                {
                    "name": "source",
                    "type": "PassportElementErrorSource",
                    "description": "Error source"
                }
            ]
        },
        {
            "name": "passportSuitableElement",
            "description": "Contains information about a Telegram Passport element that was requested by a service",
            "class": "PassportSuitableElement",
            "properties": [
                {
                    "name": "type",
                    "type": "PassportElementType",
                    "description": "Type of the element"
                },
                {
                    "name": "is_selfie_required",
                    "type": "Bool",
                    "description": "True, if a selfie is required with the identity document"
                },
                {
                    "name": "is_translation_required",
                    "type": "Bool",
                    "description": "True, if a certified English translation is required with the document"
                },
                {
                    "name": "is_native_name_required",
                    "type": "Bool",
                    "description": "True, if personal details must include the user's name in the language of their country of residence"
                }
            ]
        },
        {
            "name": "passportRequiredElement",
            "description": "Contains a description of the required Telegram Passport element that was requested by a service",
            "class": "PassportRequiredElement",
            "properties": [
                {
                    "name": "suitable_elements",
                    "type": "vector\u003cpassportSuitableElement\u003e",
                    "description": "List of Telegram Passport elements any of which is enough to provide"
                }
            ]
        },
        {
            "name": "passportAuthorizationForm",
            "description": "Contains information about a Telegram Passport authorization form that was requested",
            "class": "PassportAuthorizationForm",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Unique identifier of the authorization form"
                },
                {
                    "name": "required_elements",
                    "type": "vector\u003cpassportRequiredElement\u003e",
                    "description": "Information about the Telegram Passport elements that need to be provided to complete the form"
                },
                {
                    "name": "elements",
                    "type": "vector\u003cPassportElement\u003e",
                    "description": "Already available Telegram Passport elements"
                },
                {
                    "name": "errors",
                    "type": "vector\u003cpassportElementError\u003e",
                    "description": "Errors in the elements that are already available"
                },
                {
                    "name": "privacy_policy_url",
                    "type": "string",
                    "description": "URL for the privacy policy of the service; can be empty"
                }
            ]
        },
        {
            "name": "encryptedCredentials",
            "description": "Contains encrypted Telegram Passport data credentials",
            "class": "EncryptedCredentials",
            "properties": [
                {
                    "name": "data",
                    "type": "bytes",
                    "description": "The encrypted credentials"
                },
                {
                    "name": "hash",
                    "type": "bytes",
                    "description": "The decrypted data hash"
                },
                {
                    "name": "secret",
                    "type": "bytes",
                    "description": "Secret for data decryption, encrypted with the service's public key"
                }
            ]
        },
        {
            "name": "encryptedPassportElement",
            "description": "Contains information about an encrypted Telegram Passport element; for bots only",
            "class": "EncryptedPassportElement",
            "properties": [
                {
                    "name": "type",
                    "type": "PassportElementType",
                    "description": "Type of Telegram Passport element"
                },
                {
                    "name": "data",
                    "type": "bytes",
                    "description": "Encrypted JSON-encoded data about the user"
                },
                {
                    "name": "front_side",
                    "type": "datedFile",
                    "description": "The front side of an identity document"
                },
                {
                    "name": "reverse_side",
                    "type": "datedFile",
                    "description": "The reverse side of an identity document; may be null"
                },
                {
                    "name": "selfie",
                    "type": "datedFile",
                    "description": "Selfie with the document; may be null"
                },
                {
                    "name": "translation",
                    "type": "vector\u003cdatedFile\u003e",
                    "description": "List of files containing a certified English translation of the document"
                },
                {
                    "name": "files",
                    "type": "vector\u003cdatedFile\u003e",
                    "description": "List of attached files"
                },
                {
                    "name": "value",
                    "type": "string",
                    "description": "Unencrypted data, phone number or email address"
                },
                {
                    "name": "hash",
                    "type": "string",
                    "description": "Hash of the entire element"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceUnspecified",
            "description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "element_hash",
                    "type": "bytes",
                    "description": "Current hash of the entire element"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceDataField",
            "description": "A data field contains an error. The error is considered resolved when the field's value changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "field_name",
                    "type": "string",
                    "description": "Field name"
                },
                {
                    "name": "data_hash",
                    "type": "bytes",
                    "description": "Current data hash"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceFrontSide",
            "description": "The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "file_hash",
                    "type": "bytes",
                    "description": "Current hash of the file containing the front side"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceReverseSide",
            "description": "The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "file_hash",
                    "type": "bytes",
                    "description": "Current hash of the file containing the reverse side"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceSelfie",
            "description": "The selfie contains an error. The error is considered resolved when the file with the selfie changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "file_hash",
                    "type": "bytes",
                    "description": "Current hash of the file containing the selfie"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceTranslationFile",
            "description": "One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "file_hash",
                    "type": "bytes",
                    "description": "Current hash of the file containing the translation"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceTranslationFiles",
            "description": "The translation of the document contains an error. The error is considered resolved when the list of files changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "file_hashes",
                    "type": "vector\u003cbytes\u003e",
                    "description": "Current hashes of all files with the translation"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceFile",
            "description": "The file contains an error. The error is considered resolved when the file changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "file_hash",
                    "type": "bytes",
                    "description": "Current hash of the file which has the error"
                }
            ]
        },
        {
            "name": "inputPassportElementErrorSourceFiles",
            "description": "The list of attached files contains an error. The error is considered resolved when the file list changes",
            "class": "InputPassportElementErrorSource",
            "properties": [
                {
                    "name": "file_hashes",
                    "type": "vector\u003cbytes\u003e",
                    "description": "Current hashes of all attached files"
                }
            ]
        },
        {
            "name": "inputPassportElementError",
            "description": "Contains the description of an error in a Telegram Passport element; for bots only",
            "class": "InputPassportElementError",
            "properties": [
                {
                    "name": "type",
                    "type": "PassportElementType",
                    "description": "Type of Telegram Passport element that has the error"
                },
                {
                    "name": "message",
                    "type": "string",
                    "description": "Error message"
                },
                {
                    "name": "source",
                    "type": "InputPassportElementErrorSource",
                    "description": "Error source"
                }
            ]
        },
        {
            "name": "messageText",
            "description": "A text message",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "text",
                    "type": "formattedText",
                    "description": "Text of the message"
                },
                {
                    "name": "web_page",
                    "type": "webPage",
                    "description": "A preview of the web page that's mentioned in the text; may be null"
                }
            ]
        },
        {
            "name": "messageAnimation",
            "description": "An animation message (GIF-style).",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "animation",
                    "type": "animation",
                    "description": "Message content"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Animation caption"
                },
                {
                    "name": "is_secret",
                    "type": "Bool",
                    "description": "True, if the animation thumbnail must be blurred and the animation must be shown only while tapped"
                }
            ]
        },
        {
            "name": "messageAudio",
            "description": "An audio message",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "audio",
                    "type": "audio",
                    "description": "Message content"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Audio caption"
                }
            ]
        },
        {
            "name": "messageDocument",
            "description": "A document message (general file)",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "document",
                    "type": "document",
                    "description": "Message content"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Document caption"
                }
            ]
        },
        {
            "name": "messagePhoto",
            "description": "A photo message",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "photo",
                    "type": "photo",
                    "description": "Message content"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Photo caption"
                },
                {
                    "name": "is_secret",
                    "type": "Bool",
                    "description": "True, if the photo must be blurred and must be shown only while tapped"
                }
            ]
        },
        {
            "name": "messageExpiredPhoto",
            "description": "An expired photo message (self-destructed after TTL has elapsed)",
            "class": "MessageContent",
            "properties": []
        },
        {
            "name": "messageSticker",
            "description": "A sticker message",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "sticker",
                    "type": "sticker",
                    "description": "Message content"
                }
            ]
        },
        {
            "name": "messageVideo",
            "description": "A video message",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "video",
                    "type": "video",
                    "description": "Message content"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Video caption"
                },
                {
                    "name": "is_secret",
                    "type": "Bool",
                    "description": "True, if the video thumbnail must be blurred and the video must be shown only while tapped"
                }
            ]
        },
        {
            "name": "messageExpiredVideo",
            "description": "An expired video message (self-destructed after TTL has elapsed)",
            "class": "MessageContent",
            "properties": []
        },
        {
            "name": "messageVideoNote",
            "description": "A video note message",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "video_note",
                    "type": "videoNote",
                    "description": "Message content"
                },
                {
                    "name": "is_viewed",
                    "type": "Bool",
                    "description": "True, if at least one of the recipients has viewed the video note"
                },
                {
                    "name": "is_secret",
                    "type": "Bool",
                    "description": "True, if the video note thumbnail must be blurred and the video note must be shown only while tapped"
                }
            ]
        },
        {
            "name": "messageVoiceNote",
            "description": "A voice note message",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "voice_note",
                    "type": "voiceNote",
                    "description": "Message content"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Voice note caption"
                },
                {
                    "name": "is_listened",
                    "type": "Bool",
                    "description": "True, if at least one of the recipients has listened to the voice note"
                }
            ]
        },
        {
            "name": "messageLocation",
            "description": "A message with a location",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "location",
                    "type": "location",
                    "description": "Message content"
                },
                {
                    "name": "live_period",
                    "type": "int32",
                    "description": "Time relative to the message sent date until which the location can be updated, in seconds"
                },
                {
                    "name": "expires_in",
                    "type": "int32",
                    "description": "Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes"
                }
            ]
        },
        {
            "name": "messageVenue",
            "description": "A message with information about a venue",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "venue",
                    "type": "venue",
                    "description": "Message content"
                }
            ]
        },
        {
            "name": "messageContact",
            "description": "A message with a user contact",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "contact",
                    "type": "contact",
                    "description": "Message content"
                }
            ]
        },
        {
            "name": "messageGame",
            "description": "A message with a game",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "game",
                    "type": "game",
                    "description": "Game"
                }
            ]
        },
        {
            "name": "messageInvoice",
            "description": "A message with an invoice from a bot",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "description": "Product title"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Product description"
                },
                {
                    "name": "photo",
                    "type": "photo",
                    "description": "Product photo; may be null"
                },
                {
                    "name": "currency",
                    "type": "string",
                    "description": "Currency for the product price"
                },
                {
                    "name": "total_amount",
                    "type": "int53",
                    "description": "Product total price in the minimal quantity of the currency"
                },
                {
                    "name": "start_parameter",
                    "type": "string",
                    "description": "Unique invoice bot start_parameter. To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter}"
                },
                {
                    "name": "is_test",
                    "type": "Bool",
                    "description": "True, if the invoice is a test invoice"
                },
                {
                    "name": "need_shipping_address",
                    "type": "Bool",
                    "description": "True, if the shipping address should be specified"
                },
                {
                    "name": "receipt_message_id",
                    "type": "int53",
                    "description": "The identifier of the message with the receipt, after the product has been purchased"
                }
            ]
        },
        {
            "name": "messageCall",
            "description": "A message with information about an ended call",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "discard_reason",
                    "type": "CallDiscardReason",
                    "description": "Reason why the call was discarded"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Call duration, in seconds"
                }
            ]
        },
        {
            "name": "messageBasicGroupChatCreate",
            "description": "A newly created basic group",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the basic group"
                },
                {
                    "name": "member_user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "User identifiers of members in the basic group"
                }
            ]
        },
        {
            "name": "messageSupergroupChatCreate",
            "description": "A newly created supergroup or channel",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the supergroup or channel"
                }
            ]
        },
        {
            "name": "messageChatChangeTitle",
            "description": "An updated chat title",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "description": "New chat title"
                }
            ]
        },
        {
            "name": "messageChatChangePhoto",
            "description": "An updated chat photo",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "photo",
                    "type": "photo",
                    "description": "New chat photo"
                }
            ]
        },
        {
            "name": "messageChatDeletePhoto",
            "description": "A deleted chat photo",
            "class": "MessageContent",
            "properties": []
        },
        {
            "name": "messageChatAddMembers",
            "description": "New chat members were added",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "member_user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "User identifiers of the new members"
                }
            ]
        },
        {
            "name": "messageChatJoinByLink",
            "description": "A new member joined the chat by invite link",
            "class": "MessageContent",
            "properties": []
        },
        {
            "name": "messageChatDeleteMember",
            "description": "A chat member was deleted",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier of the deleted chat member"
                }
            ]
        },
        {
            "name": "messageChatUpgradeTo",
            "description": "A basic group was upgraded to a supergroup and was deactivated as the result",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup to which the basic group was upgraded"
                }
            ]
        },
        {
            "name": "messageChatUpgradeFrom",
            "description": "A supergroup has been created from a basic group",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the newly created supergroup"
                },
                {
                    "name": "basic_group_id",
                    "type": "int32",
                    "description": "The identifier of the original basic group"
                }
            ]
        },
        {
            "name": "messagePinMessage",
            "description": "A message has been pinned",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the pinned message, can be an identifier of a deleted message"
                }
            ]
        },
        {
            "name": "messageScreenshotTaken",
            "description": "A screenshot of a message in the chat has been taken",
            "class": "MessageContent",
            "properties": []
        },
        {
            "name": "messageChatSetTTL",
            "description": "The TTL (Time To Live) setting messages in a secret chat has been changed",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "ttl",
                    "type": "int32",
                    "description": "New TTL"
                }
            ]
        },
        {
            "name": "messageCustomServiceAction",
            "description": "A non-standard action has happened in the chat",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "Message text to be shown in the chat"
                }
            ]
        },
        {
            "name": "messageGameScore",
            "description": "A new high score was achieved in a game",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "game_message_id",
                    "type": "int53",
                    "description": "Identifier of the message with the game, can be an identifier of a deleted message"
                },
                {
                    "name": "game_id",
                    "type": "int64",
                    "description": "Identifier of the game, may be different from the games presented in the message with the game"
                },
                {
                    "name": "score",
                    "type": "int32",
                    "description": "New score"
                }
            ]
        },
        {
            "name": "messagePaymentSuccessful",
            "description": "A payment has been completed",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "invoice_message_id",
                    "type": "int53",
                    "description": "Identifier of the message with the corresponding invoice; can be an identifier of a deleted message"
                },
                {
                    "name": "currency",
                    "type": "string",
                    "description": "Currency for the price of the product"
                },
                {
                    "name": "total_amount",
                    "type": "int53",
                    "description": "Total price for the product, in the minimal quantity of the currency"
                }
            ]
        },
        {
            "name": "messagePaymentSuccessfulBot",
            "description": "A payment has been completed; for bots only",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "invoice_message_id",
                    "type": "int53",
                    "description": "Identifier of the message with the corresponding invoice; can be an identifier of a deleted message"
                },
                {
                    "name": "currency",
                    "type": "string",
                    "description": "Currency for price of the product"
                },
                {
                    "name": "total_amount",
                    "type": "int53",
                    "description": "Total price for the product, in the minimal quantity of the currency"
                },
                {
                    "name": "invoice_payload",
                    "type": "bytes",
                    "description": "Invoice payload"
                },
                {
                    "name": "shipping_option_id",
                    "type": "string",
                    "description": "Identifier of the shipping option chosen by the user; may be empty if not applicable"
                },
                {
                    "name": "order_info",
                    "type": "orderInfo",
                    "description": "Information about the order; may be null"
                },
                {
                    "name": "telegram_payment_charge_id",
                    "type": "string",
                    "description": "Telegram payment identifier"
                },
                {
                    "name": "provider_payment_charge_id",
                    "type": "string",
                    "description": "Provider payment identifier"
                }
            ]
        },
        {
            "name": "messageContactRegistered",
            "description": "A contact has registered with Telegram",
            "class": "MessageContent",
            "properties": []
        },
        {
            "name": "messageWebsiteConnected",
            "description": "The current user has connected a website by logging in using Telegram Login Widget on it",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "domain_name",
                    "type": "string",
                    "description": "Domain name of the connected website"
                }
            ]
        },
        {
            "name": "messagePassportDataSent",
            "description": "Telegram Passport data has been sent",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "types",
                    "type": "vector\u003cPassportElementType\u003e",
                    "description": "List of Telegram Passport element types sent"
                }
            ]
        },
        {
            "name": "messagePassportDataReceived",
            "description": "Telegram Passport data has been received; for bots only",
            "class": "MessageContent",
            "properties": [
                {
                    "name": "elements",
                    "type": "vector\u003cencryptedPassportElement\u003e",
                    "description": "List of received Telegram Passport elements"
                },
                {
                    "name": "credentials",
                    "type": "encryptedCredentials",
                    "description": "Encrypted data credentials"
                }
            ]
        },
        {
            "name": "messageUnsupported",
            "description": "Message content that is not supported by the client",
            "class": "MessageContent",
            "properties": []
        },
        {
            "name": "textEntityTypeMention",
            "description": "A mention of a user by their username",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeHashtag",
            "description": "A hashtag text, beginning with \"#\"",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeCashtag",
            "description": "A cashtag text, beginning with \"$\" and consisting of capital english letters (i.e. \"$USD\")",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeBotCommand",
            "description": "A bot command, beginning with \"/\". This shouldn't be highlighted if there are no bots in the chat",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeURL",
            "description": "An HTTP URL",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeEmailAddress",
            "description": "An email address",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeBold",
            "description": "A bold text",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeItalic",
            "description": "An italic text",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypeCode",
            "description": "Text that must be formatted as if inside a code HTML tag",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypePre",
            "description": "Text that must be formatted as if inside a pre HTML tag",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "textEntityTypePreCode",
            "description": "Text that must be formatted as if inside pre, and code HTML tags",
            "class": "TextEntityType",
            "properties": [
                {
                    "name": "language",
                    "type": "string",
                    "description": "Programming language of the code; as defined by the sender"
                }
            ]
        },
        {
            "name": "textEntityTypeTextURL",
            "description": "A text description shown instead of a raw URL",
            "class": "TextEntityType",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "HTTP or tg:// URL to be opened when the link is clicked"
                }
            ]
        },
        {
            "name": "textEntityTypeMentionName",
            "description": "A text shows instead of a raw mention of the user (e.g., when the user has no username)",
            "class": "TextEntityType",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the mentioned user"
                }
            ]
        },
        {
            "name": "textEntityTypePhoneNumber",
            "description": "A phone number",
            "class": "TextEntityType",
            "properties": []
        },
        {
            "name": "inputThumbnail",
            "description": "A thumbnail to be sent along with a file; should be in JPEG or WEBP format for stickers, and less than 200 kB in size",
            "class": "InputThumbnail",
            "properties": [
                {
                    "name": "thumbnail",
                    "type": "InputFile",
                    "description": "Thumbnail file to send. Sending thumbnails by file_id is currently not supported"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Thumbnail width, usually shouldn't exceed 90. Use 0 if unknown"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Thumbnail height, usually shouldn't exceed 90. Use 0 if unknown"
                }
            ]
        },
        {
            "name": "inputMessageText",
            "description": "A text message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "text",
                    "type": "formattedText",
                    "description": "Formatted text to be sent; 1-GetOption(\"message_text_length_max\") characters. Only Bold, Italic, Code, Pre, PreCode and TextURL entities are allowed to be specified manually"
                },
                {
                    "name": "disable_web_page_preview",
                    "type": "Bool",
                    "description": "True, if rich web page previews for URLs in the message text should be disabled"
                },
                {
                    "name": "clear_draft",
                    "type": "Bool",
                    "description": "True, if a chat message draft should be deleted"
                }
            ]
        },
        {
            "name": "inputMessageAnimation",
            "description": "An animation message (GIF-style).",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "animation",
                    "type": "InputFile",
                    "description": "Animation file to be sent"
                },
                {
                    "name": "thumbnail",
                    "type": "inputThumbnail",
                    "description": "Animation thumbnail, if available"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the animation, in seconds"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Width of the animation; may be replaced by the server"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Height of the animation; may be replaced by the server"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Animation caption; 0-GetOption(\"message_caption_length_max\") characters"
                }
            ]
        },
        {
            "name": "inputMessageAudio",
            "description": "An audio message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "audio",
                    "type": "InputFile",
                    "description": "Audio file to be sent"
                },
                {
                    "name": "album_cover_thumbnail",
                    "type": "inputThumbnail",
                    "description": "Thumbnail of the cover for the album, if available"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the audio, in seconds; may be replaced by the server"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the audio; 0-64 characters; may be replaced by the server"
                },
                {
                    "name": "performer",
                    "type": "string",
                    "description": "Performer of the audio; 0-64 characters, may be replaced by the server"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Audio caption; 0-GetOption(\"message_caption_length_max\") characters"
                }
            ]
        },
        {
            "name": "inputMessageDocument",
            "description": "A document message (general file)",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "document",
                    "type": "InputFile",
                    "description": "Document to be sent"
                },
                {
                    "name": "thumbnail",
                    "type": "inputThumbnail",
                    "description": "Document thumbnail, if available"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Document caption; 0-GetOption(\"message_caption_length_max\") characters"
                }
            ]
        },
        {
            "name": "inputMessagePhoto",
            "description": "A photo message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "photo",
                    "type": "InputFile",
                    "description": "Photo to send"
                },
                {
                    "name": "thumbnail",
                    "type": "inputThumbnail",
                    "description": "Photo thumbnail to be sent, this is sent to the other party in secret chats only"
                },
                {
                    "name": "added_sticker_file_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "File identifiers of the stickers added to the photo, if applicable"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Photo width"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Photo height"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Photo caption; 0-GetOption(\"message_caption_length_max\") characters"
                },
                {
                    "name": "ttl",
                    "type": "int32",
                    "description": "Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats"
                }
            ]
        },
        {
            "name": "inputMessageSticker",
            "description": "A sticker message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker to be sent"
                },
                {
                    "name": "thumbnail",
                    "type": "inputThumbnail",
                    "description": "Sticker thumbnail, if available"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Sticker width"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Sticker height"
                }
            ]
        },
        {
            "name": "inputMessageVideo",
            "description": "A video message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "video",
                    "type": "InputFile",
                    "description": "Video to be sent"
                },
                {
                    "name": "thumbnail",
                    "type": "inputThumbnail",
                    "description": "Video thumbnail, if available"
                },
                {
                    "name": "added_sticker_file_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "File identifiers of the stickers added to the video, if applicable"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the video, in seconds"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Video width"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Video height"
                },
                {
                    "name": "supports_streaming",
                    "type": "Bool",
                    "description": "True, if the video should be tried to be streamed"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Video caption; 0-GetOption(\"message_caption_length_max\") characters"
                },
                {
                    "name": "ttl",
                    "type": "int32",
                    "description": "Video TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats"
                }
            ]
        },
        {
            "name": "inputMessageVideoNote",
            "description": "A video note message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "video_note",
                    "type": "InputFile",
                    "description": "Video note to be sent"
                },
                {
                    "name": "thumbnail",
                    "type": "inputThumbnail",
                    "description": "Video thumbnail, if available"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the video, in seconds"
                },
                {
                    "name": "length",
                    "type": "int32",
                    "description": "Video width and height; must be positive and not greater than 640"
                }
            ]
        },
        {
            "name": "inputMessageVoiceNote",
            "description": "A voice note message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "voice_note",
                    "type": "InputFile",
                    "description": "Voice note to be sent"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "Duration of the voice note, in seconds"
                },
                {
                    "name": "waveform",
                    "type": "bytes",
                    "description": "Waveform representation of the voice note, in 5-bit format"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "Voice note caption; 0-GetOption(\"message_caption_length_max\") characters"
                }
            ]
        },
        {
            "name": "inputMessageLocation",
            "description": "A message with a location",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "location",
                    "type": "location",
                    "description": "Location to be sent"
                },
                {
                    "name": "live_period",
                    "type": "int32",
                    "description": "Period for which the location can be updated, in seconds; should bebetween 60 and 86400 for a live location and 0 otherwise"
                }
            ]
        },
        {
            "name": "inputMessageVenue",
            "description": "A message with information about a venue",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "venue",
                    "type": "venue",
                    "description": "Venue to send"
                }
            ]
        },
        {
            "name": "inputMessageContact",
            "description": "A message containing a user contact",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "contact",
                    "type": "contact",
                    "description": "Contact to send"
                }
            ]
        },
        {
            "name": "inputMessageGame",
            "description": "A message with a game; not supported for channels or secret chats",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "bot_user_id",
                    "type": "int32",
                    "description": "User identifier of the bot that owns the game"
                },
                {
                    "name": "game_short_name",
                    "type": "string",
                    "description": "Short name of the game"
                }
            ]
        },
        {
            "name": "inputMessageInvoice",
            "description": "A message with an invoice; can be used only by bots and only in private chats",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "invoice",
                    "type": "invoice",
                    "description": "Invoice"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Product title; 1-32 characters"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Product description; 0-255 characters"
                },
                {
                    "name": "photo_url",
                    "type": "string",
                    "description": "Product photo URL; optional"
                },
                {
                    "name": "photo_size",
                    "type": "int32",
                    "description": "Product photo size"
                },
                {
                    "name": "photo_width",
                    "type": "int32",
                    "description": "Product photo width"
                },
                {
                    "name": "photo_height",
                    "type": "int32",
                    "description": "Product photo height"
                },
                {
                    "name": "payload",
                    "type": "bytes",
                    "description": "The invoice payload"
                },
                {
                    "name": "provider_token",
                    "type": "string",
                    "description": "Payment provider token"
                },
                {
                    "name": "provider_data",
                    "type": "string",
                    "description": "JSON-encoded data about the invoice, which will be shared with the payment provider"
                },
                {
                    "name": "start_parameter",
                    "type": "string",
                    "description": "Unique invoice bot start_parameter for the generation of this invoice"
                }
            ]
        },
        {
            "name": "inputMessageForwarded",
            "description": "A forwarded message",
            "class": "InputMessageContent",
            "properties": [
                {
                    "name": "from_chat_id",
                    "type": "int53",
                    "description": "Identifier for the chat this forwarded message came from"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message to forward"
                },
                {
                    "name": "in_game_share",
                    "type": "Bool",
                    "description": "True, if a game message should be shared within a launched game; applies only to game messages"
                }
            ]
        },
        {
            "name": "searchMessagesFilterEmpty",
            "description": "Returns all found messages, no filter is applied",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterAnimation",
            "description": "Returns only animation messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterAudio",
            "description": "Returns only audio messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterDocument",
            "description": "Returns only document messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterPhoto",
            "description": "Returns only photo messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterVideo",
            "description": "Returns only video messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterVoiceNote",
            "description": "Returns only voice note messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterPhotoAndVideo",
            "description": "Returns only photo and video messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterURL",
            "description": "Returns only messages containing URLs",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterChatPhoto",
            "description": "Returns only messages containing chat photos",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterCall",
            "description": "Returns only call messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterMissedCall",
            "description": "Returns only incoming call messages with missed/declined discard reasons",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterVideoNote",
            "description": "Returns only video note messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterVoiceAndVideoNote",
            "description": "Returns only voice and video note messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterMention",
            "description": "Returns only messages with mentions of the current user, or messages that are replies to their messages",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "searchMessagesFilterUnreadMention",
            "description": "Returns only messages with unread mentions of the current user or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query or by the sending user",
            "class": "SearchMessagesFilter",
            "properties": []
        },
        {
            "name": "chatActionTyping",
            "description": "The user is typing a message",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "chatActionRecordingVideo",
            "description": "The user is recording a video",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "chatActionUploadingVideo",
            "description": "The user is uploading a video",
            "class": "ChatAction",
            "properties": [
                {
                    "name": "progress",
                    "type": "int32",
                    "description": "Upload progress, as a percentage"
                }
            ]
        },
        {
            "name": "chatActionRecordingVoiceNote",
            "description": "The user is recording a voice note",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "chatActionUploadingVoiceNote",
            "description": "The user is uploading a voice note",
            "class": "ChatAction",
            "properties": [
                {
                    "name": "progress",
                    "type": "int32",
                    "description": "Upload progress, as a percentage"
                }
            ]
        },
        {
            "name": "chatActionUploadingPhoto",
            "description": "The user is uploading a photo",
            "class": "ChatAction",
            "properties": [
                {
                    "name": "progress",
                    "type": "int32",
                    "description": "Upload progress, as a percentage"
                }
            ]
        },
        {
            "name": "chatActionUploadingDocument",
            "description": "The user is uploading a document",
            "class": "ChatAction",
            "properties": [
                {
                    "name": "progress",
                    "type": "int32",
                    "description": "Upload progress, as a percentage"
                }
            ]
        },
        {
            "name": "chatActionChoosingLocation",
            "description": "The user is picking a location or venue to send",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "chatActionChoosingContact",
            "description": "The user is picking a contact to send",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "chatActionStartPlayingGame",
            "description": "The user has started to play a game",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "chatActionRecordingVideoNote",
            "description": "The user is recording a video note",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "chatActionUploadingVideoNote",
            "description": "The user is uploading a video note",
            "class": "ChatAction",
            "properties": [
                {
                    "name": "progress",
                    "type": "int32",
                    "description": "Upload progress, as a percentage"
                }
            ]
        },
        {
            "name": "chatActionCancel",
            "description": "The user has cancelled the previous action",
            "class": "ChatAction",
            "properties": []
        },
        {
            "name": "userStatusEmpty",
            "description": "The user status was never changed",
            "class": "UserStatus",
            "properties": []
        },
        {
            "name": "userStatusOnline",
            "description": "The user is online",
            "class": "UserStatus",
            "properties": [
                {
                    "name": "expires",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the user's online status will expire"
                }
            ]
        },
        {
            "name": "userStatusOffline",
            "description": "The user is offline",
            "class": "UserStatus",
            "properties": [
                {
                    "name": "was_online",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the user was last online"
                }
            ]
        },
        {
            "name": "userStatusRecently",
            "description": "The user was online recently",
            "class": "UserStatus",
            "properties": []
        },
        {
            "name": "userStatusLastWeek",
            "description": "The user is offline, but was online last week",
            "class": "UserStatus",
            "properties": []
        },
        {
            "name": "userStatusLastMonth",
            "description": "The user is offline, but was online last month",
            "class": "UserStatus",
            "properties": []
        },
        {
            "name": "stickers",
            "description": "Represents a list of stickers",
            "class": "Stickers",
            "properties": [
                {
                    "name": "stickers",
                    "type": "vector\u003csticker\u003e",
                    "description": "List of stickers"
                }
            ]
        },
        {
            "name": "stickerEmojis",
            "description": "Represents a list of all emoji corresponding to a sticker in a sticker set. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object",
            "class": "StickerEmojis",
            "properties": [
                {
                    "name": "emojis",
                    "type": "vector\u003cstring\u003e",
                    "description": "List of emojis"
                }
            ]
        },
        {
            "name": "stickerSet",
            "description": "Represents a sticker set",
            "class": "StickerSet",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Identifier of the sticker set"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the sticker set"
                },
                {
                    "name": "name",
                    "type": "string",
                    "description": "Name of the sticker set"
                },
                {
                    "name": "is_installed",
                    "type": "Bool",
                    "description": "True, if the sticker set has been installed by the current user"
                },
                {
                    "name": "is_archived",
                    "type": "Bool",
                    "description": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously"
                },
                {
                    "name": "is_official",
                    "type": "Bool",
                    "description": "True, if the sticker set is official"
                },
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "True, if the stickers in the set are masks"
                },
                {
                    "name": "is_viewed",
                    "type": "Bool",
                    "description": "True for already viewed trending sticker sets"
                },
                {
                    "name": "stickers",
                    "type": "vector\u003csticker\u003e",
                    "description": "List of stickers in this set"
                },
                {
                    "name": "emojis",
                    "type": "vector\u003cstickerEmojis\u003e",
                    "description": "A list of emoji corresponding to the stickers in the same order"
                }
            ]
        },
        {
            "name": "stickerSetInfo",
            "description": "Represents short information about a sticker set",
            "class": "StickerSetInfo",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Identifier of the sticker set"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the sticker set"
                },
                {
                    "name": "name",
                    "type": "string",
                    "description": "Name of the sticker set"
                },
                {
                    "name": "is_installed",
                    "type": "Bool",
                    "description": "True, if the sticker set has been installed by current user"
                },
                {
                    "name": "is_archived",
                    "type": "Bool",
                    "description": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously"
                },
                {
                    "name": "is_official",
                    "type": "Bool",
                    "description": "True, if the sticker set is official"
                },
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "True, if the stickers in the set are masks"
                },
                {
                    "name": "is_viewed",
                    "type": "Bool",
                    "description": "True for already viewed trending sticker sets"
                },
                {
                    "name": "size",
                    "type": "int32",
                    "description": "Total number of stickers in the set"
                },
                {
                    "name": "covers",
                    "type": "vector\u003csticker\u003e",
                    "description": "Contains up to the first 5 stickers from the set, depending on the context. If the client needs more stickers the full set should be requested"
                }
            ]
        },
        {
            "name": "stickerSets",
            "description": "Represents a list of sticker sets",
            "class": "StickerSets",
            "properties": [
                {
                    "name": "total_count",
                    "type": "int32",
                    "description": "Approximate total number of sticker sets found"
                },
                {
                    "name": "sets",
                    "type": "vector\u003cstickerSetInfo\u003e",
                    "description": "List of sticker sets"
                }
            ]
        },
        {
            "name": "callDiscardReasonEmpty",
            "description": "The call wasn't discarded, or the reason is unknown",
            "class": "CallDiscardReason",
            "properties": []
        },
        {
            "name": "callDiscardReasonMissed",
            "description": "The call was ended before the conversation started. It was cancelled by the caller or missed by the other party",
            "class": "CallDiscardReason",
            "properties": []
        },
        {
            "name": "callDiscardReasonDeclined",
            "description": "The call was ended before the conversation started. It was declined by the other party",
            "class": "CallDiscardReason",
            "properties": []
        },
        {
            "name": "callDiscardReasonDisconnected",
            "description": "The call was ended during the conversation because the users were disconnected",
            "class": "CallDiscardReason",
            "properties": []
        },
        {
            "name": "callDiscardReasonHungUp",
            "description": "The call was ended because one of the parties hung up",
            "class": "CallDiscardReason",
            "properties": []
        },
        {
            "name": "callProtocol",
            "description": "Specifies the supported call protocols",
            "class": "CallProtocol",
            "properties": [
                {
                    "name": "udp_p2p",
                    "type": "Bool",
                    "description": "True, if UDP peer-to-peer connections are supported"
                },
                {
                    "name": "udp_reflector",
                    "type": "Bool",
                    "description": "True, if connection through UDP reflectors is supported"
                },
                {
                    "name": "min_layer",
                    "type": "int32",
                    "description": "Minimum supported API layer; use 65"
                },
                {
                    "name": "max_layer",
                    "type": "int32",
                    "description": "Maximum supported API layer; use 65"
                }
            ]
        },
        {
            "name": "callConnection",
            "description": "Describes the address of UDP reflectors",
            "class": "CallConnection",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Reflector identifier"
                },
                {
                    "name": "ip",
                    "type": "string",
                    "description": "IPv4 reflector address"
                },
                {
                    "name": "ipv6",
                    "type": "string",
                    "description": "IPv6 reflector address"
                },
                {
                    "name": "port",
                    "type": "int32",
                    "description": "Reflector port number"
                },
                {
                    "name": "peer_tag",
                    "type": "bytes",
                    "description": "Connection peer tag"
                }
            ]
        },
        {
            "name": "callID",
            "description": "Contains the call identifier",
            "class": "CallID",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Call identifier"
                }
            ]
        },
        {
            "name": "callStatePending",
            "description": "The call is pending, waiting to be accepted by a user",
            "class": "CallState",
            "properties": [
                {
                    "name": "is_created",
                    "type": "Bool",
                    "description": "True, if the call has already been created by the server"
                },
                {
                    "name": "is_received",
                    "type": "Bool",
                    "description": "True, if the call has already been received by the other party"
                }
            ]
        },
        {
            "name": "callStateExchangingKeys",
            "description": "The call has been answered and encryption keys are being exchanged",
            "class": "CallState",
            "properties": []
        },
        {
            "name": "callStateReady",
            "description": "The call is ready to use",
            "class": "CallState",
            "properties": [
                {
                    "name": "protocol",
                    "type": "callProtocol",
                    "description": "Call protocols supported by the peer"
                },
                {
                    "name": "connections",
                    "type": "vector\u003ccallConnection\u003e",
                    "description": "Available UDP reflectors"
                },
                {
                    "name": "config",
                    "type": "string",
                    "description": "A JSON-encoded call config"
                },
                {
                    "name": "encryption_key",
                    "type": "bytes",
                    "description": "Call encryption key"
                },
                {
                    "name": "emojis",
                    "type": "vector\u003cstring\u003e",
                    "description": "Encryption key emojis fingerprint"
                }
            ]
        },
        {
            "name": "callStateHangingUp",
            "description": "The call is hanging up after discardCall has been called",
            "class": "CallState",
            "properties": []
        },
        {
            "name": "callStateDiscarded",
            "description": "The call has ended successfully",
            "class": "CallState",
            "properties": [
                {
                    "name": "reason",
                    "type": "CallDiscardReason",
                    "description": "The reason, why the call has ended"
                },
                {
                    "name": "need_rating",
                    "type": "Bool",
                    "description": "True, if the call rating should be sent to the server"
                },
                {
                    "name": "need_debug_information",
                    "type": "Bool",
                    "description": "True, if the call debug information should be sent to the server"
                }
            ]
        },
        {
            "name": "callStateError",
            "description": "The call has ended with an error",
            "class": "CallState",
            "properties": [
                {
                    "name": "error",
                    "type": "error",
                    "description": "Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout"
                }
            ]
        },
        {
            "name": "call",
            "description": "Describes a call",
            "class": "Call",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Call identifier, not persistent"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Peer user identifier"
                },
                {
                    "name": "is_outgoing",
                    "type": "Bool",
                    "description": "True, if the call is outgoing"
                },
                {
                    "name": "state",
                    "type": "CallState",
                    "description": "Call state"
                }
            ]
        },
        {
            "name": "animations",
            "description": "Represents a list of animations",
            "class": "Animations",
            "properties": [
                {
                    "name": "animations",
                    "type": "vector\u003canimation\u003e",
                    "description": "List of animations"
                }
            ]
        },
        {
            "name": "importedContacts",
            "description": "Represents the result of an ImportContacts request",
            "class": "ImportedContacts",
            "properties": [
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user"
                },
                {
                    "name": "importer_count",
                    "type": "vector\u003cint32\u003e",
                    "description": "The number of users that imported the corresponding contact; 0 for already registered users or if unavailable"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultAnimatedGif",
            "description": "Represents a link to an animated GIF",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the query result"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the static result thumbnail (JPEG or GIF), if it exists"
                },
                {
                    "name": "gif_url",
                    "type": "string",
                    "description": "The URL of the GIF-file (file size must not exceed 1MB)"
                },
                {
                    "name": "gif_duration",
                    "type": "int32",
                    "description": "Duration of the GIF, in seconds"
                },
                {
                    "name": "gif_width",
                    "type": "int32",
                    "description": "Width of the GIF"
                },
                {
                    "name": "gif_height",
                    "type": "int32",
                    "description": "Height of the GIF"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultAnimatedMpeg4",
            "description": "Represents a link to an animated (i.e. without sound) H.264/MPEG-4 AVC video",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the static result thumbnail (JPEG or GIF), if it exists"
                },
                {
                    "name": "mpeg4_url",
                    "type": "string",
                    "description": "The URL of the MPEG4-file (file size must not exceed 1MB)"
                },
                {
                    "name": "mpeg4_duration",
                    "type": "int32",
                    "description": "Duration of the video, in seconds"
                },
                {
                    "name": "mpeg4_width",
                    "type": "int32",
                    "description": "Width of the video"
                },
                {
                    "name": "mpeg4_height",
                    "type": "int32",
                    "description": "Height of the video"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultArticle",
            "description": "Represents a link to an article or web page",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "url",
                    "type": "string",
                    "description": "URL of the result, if it exists"
                },
                {
                    "name": "hide_url",
                    "type": "Bool",
                    "description": "True, if the URL must be not shown"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "A short description of the result"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the result thumbnail, if it exists"
                },
                {
                    "name": "thumbnail_width",
                    "type": "int32",
                    "description": "Thumbnail width, if known"
                },
                {
                    "name": "thumbnail_height",
                    "type": "int32",
                    "description": "Thumbnail height, if known"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultAudio",
            "description": "Represents a link to an MP3 audio file",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the audio file"
                },
                {
                    "name": "performer",
                    "type": "string",
                    "description": "Performer of the audio file"
                },
                {
                    "name": "audio_url",
                    "type": "string",
                    "description": "The URL of the audio file"
                },
                {
                    "name": "audio_duration",
                    "type": "int32",
                    "description": "Audio file duration, in seconds"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAudio, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultContact",
            "description": "Represents a user contact",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "contact",
                    "type": "contact",
                    "description": "User contact"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the result thumbnail, if it exists"
                },
                {
                    "name": "thumbnail_width",
                    "type": "int32",
                    "description": "Thumbnail width, if known"
                },
                {
                    "name": "thumbnail_height",
                    "type": "int32",
                    "description": "Thumbnail height, if known"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultDocument",
            "description": "Represents a link to a file",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the resulting file"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Short description of the result, if known"
                },
                {
                    "name": "document_url",
                    "type": "string",
                    "description": "URL of the file"
                },
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "The URL of the file thumbnail, if it exists"
                },
                {
                    "name": "thumbnail_width",
                    "type": "int32",
                    "description": "Width of the thumbnail"
                },
                {
                    "name": "thumbnail_height",
                    "type": "int32",
                    "description": "Height of the thumbnail"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageDocument, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultGame",
            "description": "Represents a game",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "game_short_name",
                    "type": "string",
                    "description": "Short name of the game"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "Message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultLocation",
            "description": "Represents a point on the map",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "location",
                    "type": "location",
                    "description": "Location result"
                },
                {
                    "name": "live_period",
                    "type": "int32",
                    "description": "Amount of time relative to the message sent time until the location can be updated, in seconds"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the result thumbnail, if it exists"
                },
                {
                    "name": "thumbnail_width",
                    "type": "int32",
                    "description": "Thumbnail width, if known"
                },
                {
                    "name": "thumbnail_height",
                    "type": "int32",
                    "description": "Thumbnail height, if known"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultPhoto",
            "description": "Represents link to a JPEG image",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result, if known"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "A short description of the result, if known"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the photo thumbnail, if it exists"
                },
                {
                    "name": "photo_url",
                    "type": "string",
                    "description": "The URL of the JPEG photo (photo size must not exceed 5MB)"
                },
                {
                    "name": "photo_width",
                    "type": "int32",
                    "description": "Width of the photo"
                },
                {
                    "name": "photo_height",
                    "type": "int32",
                    "description": "Height of the photo"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessagePhoto, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultSticker",
            "description": "Represents a link to a WEBP sticker",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the sticker thumbnail, if it exists"
                },
                {
                    "name": "sticker_url",
                    "type": "string",
                    "description": "The URL of the WEBP sticker (sticker file size must not exceed 5MB)"
                },
                {
                    "name": "sticker_width",
                    "type": "int32",
                    "description": "Width of the sticker"
                },
                {
                    "name": "sticker_height",
                    "type": "int32",
                    "description": "Height of the sticker"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, inputMessageSticker, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultVenue",
            "description": "Represents information about a venue",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "venue",
                    "type": "venue",
                    "description": "Venue result"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "URL of the result thumbnail, if it exists"
                },
                {
                    "name": "thumbnail_width",
                    "type": "int32",
                    "description": "Thumbnail width, if known"
                },
                {
                    "name": "thumbnail_height",
                    "type": "int32",
                    "description": "Thumbnail height, if known"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultVideo",
            "description": "Represents a link to a page containing an embedded video player or a video file",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "A short description of the result, if known"
                },
                {
                    "name": "thumbnail_url",
                    "type": "string",
                    "description": "The URL of the video thumbnail (JPEG), if it exists"
                },
                {
                    "name": "video_url",
                    "type": "string",
                    "description": "URL of the embedded video player or video file"
                },
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "MIME type of the content of the video URL, only \"text/html\" or \"video/mp4\" are currently supported"
                },
                {
                    "name": "video_width",
                    "type": "int32",
                    "description": "Width of the video"
                },
                {
                    "name": "video_height",
                    "type": "int32",
                    "description": "Height of the video"
                },
                {
                    "name": "video_duration",
                    "type": "int32",
                    "description": "Video duration, in seconds"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVideo, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inputInlineQueryResultVoiceNote",
            "description": "Represents a link to an opus-encoded audio file within an OGG container, single channel audio",
            "class": "InputInlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the voice note"
                },
                {
                    "name": "voice_note_url",
                    "type": "string",
                    "description": "The URL of the voice note file"
                },
                {
                    "name": "voice_note_duration",
                    "type": "int32",
                    "description": "Duration of the voice note, in seconds"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The message reply markup. Must be of type replyMarkupInlineKeyboard or null"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVoiceNote, InputMessageLocation, InputMessageVenue or InputMessageContact"
                }
            ]
        },
        {
            "name": "inlineQueryResultArticle",
            "description": "Represents a link to an article or web page",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "url",
                    "type": "string",
                    "description": "URL of the result, if it exists"
                },
                {
                    "name": "hide_url",
                    "type": "Bool",
                    "description": "True, if the URL must be not shown"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "A short description of the result"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Result thumbnail; may be null"
                }
            ]
        },
        {
            "name": "inlineQueryResultContact",
            "description": "Represents a user contact",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "contact",
                    "type": "contact",
                    "description": "A user contact"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Result thumbnail; may be null"
                }
            ]
        },
        {
            "name": "inlineQueryResultLocation",
            "description": "Represents a point on the map",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "location",
                    "type": "location",
                    "description": "Location result"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Result thumbnail; may be null"
                }
            ]
        },
        {
            "name": "inlineQueryResultVenue",
            "description": "Represents information about a venue",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "venue",
                    "type": "venue",
                    "description": "Venue result"
                },
                {
                    "name": "thumbnail",
                    "type": "photoSize",
                    "description": "Result thumbnail; may be null"
                }
            ]
        },
        {
            "name": "inlineQueryResultGame",
            "description": "Represents information about a game",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "game",
                    "type": "game",
                    "description": "Game result"
                }
            ]
        },
        {
            "name": "inlineQueryResultAnimation",
            "description": "Represents an animation file",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "animation",
                    "type": "animation",
                    "description": "Animation file"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Animation title"
                }
            ]
        },
        {
            "name": "inlineQueryResultAudio",
            "description": "Represents an audio file",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "audio",
                    "type": "audio",
                    "description": "Audio file"
                }
            ]
        },
        {
            "name": "inlineQueryResultDocument",
            "description": "Represents a document",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "document",
                    "type": "document",
                    "description": "Document"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Document title"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Document description"
                }
            ]
        },
        {
            "name": "inlineQueryResultPhoto",
            "description": "Represents a photo",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "photo",
                    "type": "photo",
                    "description": "Photo"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the result, if known"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "A short description of the result, if known"
                }
            ]
        },
        {
            "name": "inlineQueryResultSticker",
            "description": "Represents a sticker",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "sticker",
                    "type": "sticker",
                    "description": "Sticker"
                }
            ]
        },
        {
            "name": "inlineQueryResultVideo",
            "description": "Represents a video",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "video",
                    "type": "video",
                    "description": "Video"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the video"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Description of the video"
                }
            ]
        },
        {
            "name": "inlineQueryResultVoiceNote",
            "description": "Represents a voice note",
            "class": "InlineQueryResult",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique identifier of the query result"
                },
                {
                    "name": "voice_note",
                    "type": "voiceNote",
                    "description": "Voice note"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the voice note"
                }
            ]
        },
        {
            "name": "inlineQueryResults",
            "description": "Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query",
            "class": "InlineQueryResults",
            "properties": [
                {
                    "name": "inline_query_id",
                    "type": "int64",
                    "description": "Unique identifier of the inline query"
                },
                {
                    "name": "next_offset",
                    "type": "string",
                    "description": "The offset for the next request. If empty, there are no more results"
                },
                {
                    "name": "results",
                    "type": "vector\u003cInlineQueryResult\u003e",
                    "description": "Results of the query"
                },
                {
                    "name": "switch_pm_text",
                    "type": "string",
                    "description": "If non-empty, this text should be shown on the button, which opens a private chat with the bot and sends the bot a start message with the switch_pm_parameter"
                },
                {
                    "name": "switch_pm_parameter",
                    "type": "string",
                    "description": "Parameter for the bot start message"
                }
            ]
        },
        {
            "name": "callbackQueryPayloadData",
            "description": "The payload from a general callback button",
            "class": "CallbackQueryPayload",
            "properties": [
                {
                    "name": "data",
                    "type": "bytes",
                    "description": "Data that was attached to the callback button"
                }
            ]
        },
        {
            "name": "callbackQueryPayloadGame",
            "description": "The payload from a game callback button",
            "class": "CallbackQueryPayload",
            "properties": [
                {
                    "name": "game_short_name",
                    "type": "string",
                    "description": "A short name of the game that was attached to the callback button"
                }
            ]
        },
        {
            "name": "callbackQueryAnswer",
            "description": "Contains a bot's answer to a callback query",
            "class": "CallbackQueryAnswer",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "Text of the answer"
                },
                {
                    "name": "show_alert",
                    "type": "Bool",
                    "description": "True, if an alert should be shown to the user instead of a toast notification"
                },
                {
                    "name": "url",
                    "type": "string",
                    "description": "URL to be opened"
                }
            ]
        },
        {
            "name": "customRequestResult",
            "description": "Contains the result of a custom request",
            "class": "CustomRequestResult",
            "properties": [
                {
                    "name": "result",
                    "type": "string",
                    "description": "A JSON-serialized result"
                }
            ]
        },
        {
            "name": "gameHighScore",
            "description": "Contains one row of the game high score table",
            "class": "GameHighScore",
            "properties": [
                {
                    "name": "position",
                    "type": "int32",
                    "description": "Position in the high score table"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "score",
                    "type": "int32",
                    "description": "User score"
                }
            ]
        },
        {
            "name": "gameHighScores",
            "description": "Contains a list of game high scores",
            "class": "GameHighScores",
            "properties": [
                {
                    "name": "scores",
                    "type": "vector\u003cgameHighScore\u003e",
                    "description": "A list of game high scores"
                }
            ]
        },
        {
            "name": "chatEventMessageEdited",
            "description": "A message was edited",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "old_message",
                    "type": "message",
                    "description": "The original message before the edit"
                },
                {
                    "name": "new_message",
                    "type": "message",
                    "description": "The message after it was edited"
                }
            ]
        },
        {
            "name": "chatEventMessageDeleted",
            "description": "A message was deleted",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "message",
                    "type": "message",
                    "description": "Deleted message"
                }
            ]
        },
        {
            "name": "chatEventMessagePinned",
            "description": "A message was pinned",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "message",
                    "type": "message",
                    "description": "Pinned message"
                }
            ]
        },
        {
            "name": "chatEventMessageUnpinned",
            "description": "A message was unpinned",
            "class": "ChatEventAction",
            "properties": []
        },
        {
            "name": "chatEventMemberJoined",
            "description": "A new member joined the chat",
            "class": "ChatEventAction",
            "properties": []
        },
        {
            "name": "chatEventMemberLeft",
            "description": "A member left the chat",
            "class": "ChatEventAction",
            "properties": []
        },
        {
            "name": "chatEventMemberInvited",
            "description": "A new chat member was invited",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "New member user identifier"
                },
                {
                    "name": "status",
                    "type": "ChatMemberStatus",
                    "description": "New member status"
                }
            ]
        },
        {
            "name": "chatEventMemberPromoted",
            "description": "A chat member has gained/lost administrator status, or the list of their administrator privileges has changed",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Chat member user identifier"
                },
                {
                    "name": "old_status",
                    "type": "ChatMemberStatus",
                    "description": "Previous status of the chat member"
                },
                {
                    "name": "new_status",
                    "type": "ChatMemberStatus",
                    "description": "New status of the chat member"
                }
            ]
        },
        {
            "name": "chatEventMemberRestricted",
            "description": "A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Chat member user identifier"
                },
                {
                    "name": "old_status",
                    "type": "ChatMemberStatus",
                    "description": "Previous status of the chat member"
                },
                {
                    "name": "new_status",
                    "type": "ChatMemberStatus",
                    "description": "New status of the chat member"
                }
            ]
        },
        {
            "name": "chatEventTitleChanged",
            "description": "The chat title was changed",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "old_title",
                    "type": "string",
                    "description": "Previous chat title"
                },
                {
                    "name": "new_title",
                    "type": "string",
                    "description": "New chat title"
                }
            ]
        },
        {
            "name": "chatEventDescriptionChanged",
            "description": "The chat description was changed",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "old_description",
                    "type": "string",
                    "description": "Previous chat description"
                },
                {
                    "name": "new_description",
                    "type": "string",
                    "description": "New chat description"
                }
            ]
        },
        {
            "name": "chatEventUsernameChanged",
            "description": "The chat username was changed",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "old_username",
                    "type": "string",
                    "description": "Previous chat username"
                },
                {
                    "name": "new_username",
                    "type": "string",
                    "description": "New chat username"
                }
            ]
        },
        {
            "name": "chatEventPhotoChanged",
            "description": "The chat photo was changed",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "old_photo",
                    "type": "chatPhoto",
                    "description": "Previous chat photo value; may be null"
                },
                {
                    "name": "new_photo",
                    "type": "chatPhoto",
                    "description": "New chat photo value; may be null"
                }
            ]
        },
        {
            "name": "chatEventInvitesToggled",
            "description": "The anyone_can_invite setting of a supergroup chat was toggled",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "anyone_can_invite",
                    "type": "Bool",
                    "description": "New value of anyone_can_invite"
                }
            ]
        },
        {
            "name": "chatEventSignMessagesToggled",
            "description": "The sign_messages setting of a channel was toggled",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "sign_messages",
                    "type": "Bool",
                    "description": "New value of sign_messages"
                }
            ]
        },
        {
            "name": "chatEventStickerSetChanged",
            "description": "The supergroup sticker set was changed",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "old_sticker_set_id",
                    "type": "int64",
                    "description": "Previous identifier of the chat sticker set; 0 if none"
                },
                {
                    "name": "new_sticker_set_id",
                    "type": "int64",
                    "description": "New identifier of the chat sticker set; 0 if none"
                }
            ]
        },
        {
            "name": "chatEventIsAllHistoryAvailableToggled",
            "description": "The is_all_history_available setting of a supergroup was toggled",
            "class": "ChatEventAction",
            "properties": [
                {
                    "name": "is_all_history_available",
                    "type": "Bool",
                    "description": "New value of is_all_history_available"
                }
            ]
        },
        {
            "name": "chatEvent",
            "description": "Represents a chat event",
            "class": "ChatEvent",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Chat event identifier"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the event happened"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the user who performed the action that triggered the event"
                },
                {
                    "name": "action",
                    "type": "ChatEventAction",
                    "description": "Action performed by the user"
                }
            ]
        },
        {
            "name": "chatEvents",
            "description": "Contains a list of chat events",
            "class": "ChatEvents",
            "properties": [
                {
                    "name": "events",
                    "type": "vector\u003cchatEvent\u003e",
                    "description": "List of events"
                }
            ]
        },
        {
            "name": "chatEventLogFilters",
            "description": "Represents a set of filters used to obtain a chat event log",
            "class": "ChatEventLogFilters",
            "properties": [
                {
                    "name": "message_edits",
                    "type": "Bool",
                    "description": "True, if message edits should be returned"
                },
                {
                    "name": "message_deletions",
                    "type": "Bool",
                    "description": "True, if message deletions should be returned"
                },
                {
                    "name": "message_pins",
                    "type": "Bool",
                    "description": "True, if pin/unpin events should be returned"
                },
                {
                    "name": "member_joins",
                    "type": "Bool",
                    "description": "True, if members joining events should be returned"
                },
                {
                    "name": "member_leaves",
                    "type": "Bool",
                    "description": "True, if members leaving events should be returned"
                },
                {
                    "name": "member_invites",
                    "type": "Bool",
                    "description": "True, if invited member events should be returned"
                },
                {
                    "name": "member_promotions",
                    "type": "Bool",
                    "description": "True, if member promotion/demotion events should be returned"
                },
                {
                    "name": "member_restrictions",
                    "type": "Bool",
                    "description": "True, if member restricted/unrestricted/banned/unbanned events should be returned"
                },
                {
                    "name": "info_changes",
                    "type": "Bool",
                    "description": "True, if changes in chat information should be returned"
                },
                {
                    "name": "setting_changes",
                    "type": "Bool",
                    "description": "True, if changes in chat settings should be returned"
                }
            ]
        },
        {
            "name": "languagePackStringValueOrdinary",
            "description": "An ordinary language pack string",
            "class": "LanguagePackStringValue",
            "properties": [
                {
                    "name": "value",
                    "type": "string",
                    "description": "String value"
                }
            ]
        },
        {
            "name": "languagePackStringValuePluralized",
            "description": "A language pack string which has different forms based on the number of some object it mentions",
            "class": "LanguagePackStringValue",
            "properties": [
                {
                    "name": "zero_value",
                    "type": "string",
                    "description": "Value for zero objects"
                },
                {
                    "name": "one_value",
                    "type": "string",
                    "description": "Value for one object"
                },
                {
                    "name": "two_value",
                    "type": "string",
                    "description": "Value for two objects"
                },
                {
                    "name": "few_value",
                    "type": "string",
                    "description": "Value for few objects"
                },
                {
                    "name": "many_value",
                    "type": "string",
                    "description": "Value for many objects"
                },
                {
                    "name": "other_value",
                    "type": "string",
                    "description": "Default value"
                }
            ]
        },
        {
            "name": "languagePackStringValueDeleted",
            "description": "A deleted language pack string, the value should be taken from the built-in english language pack",
            "class": "LanguagePackStringValue",
            "properties": []
        },
        {
            "name": "languagePackString",
            "description": "Represents one language pack string",
            "class": "LanguagePackString",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "description": "String key"
                },
                {
                    "name": "value",
                    "type": "LanguagePackStringValue",
                    "description": "String value"
                }
            ]
        },
        {
            "name": "languagePackStrings",
            "description": "Contains a list of language pack strings",
            "class": "LanguagePackStrings",
            "properties": [
                {
                    "name": "strings",
                    "type": "vector\u003clanguagePackString\u003e",
                    "description": "A list of language pack strings"
                }
            ]
        },
        {
            "name": "languagePackInfo",
            "description": "Contains information about a language pack",
            "class": "LanguagePackInfo",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "description": "Unique language pack identifier"
                },
                {
                    "name": "name",
                    "type": "string",
                    "description": "Language name"
                },
                {
                    "name": "native_name",
                    "type": "string",
                    "description": "Name of the language in that language"
                },
                {
                    "name": "local_string_count",
                    "type": "int32",
                    "description": "Total number of non-deleted strings from the language pack available locally"
                }
            ]
        },
        {
            "name": "localizationTargetInfo",
            "description": "Contains information about the current localization target",
            "class": "LocalizationTargetInfo",
            "properties": [
                {
                    "name": "language_packs",
                    "type": "vector\u003clanguagePackInfo\u003e",
                    "description": "List of available language packs for this application"
                }
            ]
        },
        {
            "name": "deviceTokenGoogleCloudMessaging",
            "description": "A token for Google Cloud Messaging",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "token",
                    "type": "string",
                    "description": "Device registration token; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "deviceTokenApplePush",
            "description": "A token for Apple Push Notification service",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "device_token",
                    "type": "string",
                    "description": "Device token; may be empty to de-register a device"
                },
                {
                    "name": "is_app_sandbox",
                    "type": "Bool",
                    "description": "True, if App Sandbox is enabled"
                }
            ]
        },
        {
            "name": "deviceTokenApplePushVoIP",
            "description": "A token for Apple Push Notification service VoIP notifications",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "device_token",
                    "type": "string",
                    "description": "Device token; may be empty to de-register a device"
                },
                {
                    "name": "is_app_sandbox",
                    "type": "Bool",
                    "description": "True, if App Sandbox is enabled"
                }
            ]
        },
        {
            "name": "deviceTokenWindowsPush",
            "description": "A token for Windows Push Notification Services",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "access_token",
                    "type": "string",
                    "description": "The access token that will be used to send notifications; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "deviceTokenMicrosoftPush",
            "description": "A token for Microsoft Push Notification Service",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "channel_uri",
                    "type": "string",
                    "description": "Push notification channel URI; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "deviceTokenMicrosoftPushVoIP",
            "description": "A token for Microsoft Push Notification Service VoIP channel",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "channel_uri",
                    "type": "string",
                    "description": "Push notification channel URI; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "deviceTokenWebPush",
            "description": "A token for web Push API",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "endpoint",
                    "type": "string",
                    "description": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device"
                },
                {
                    "name": "p256dh_base64url",
                    "type": "string",
                    "description": "Base64url-encoded P-256 elliptic curve Diffie-Hellman public key"
                },
                {
                    "name": "auth_base64url",
                    "type": "string",
                    "description": "Base64url-encoded authentication secret"
                }
            ]
        },
        {
            "name": "deviceTokenSimplePush",
            "description": "A token for Simple Push API for Firefox OS",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "endpoint",
                    "type": "string",
                    "description": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "deviceTokenUbuntuPush",
            "description": "A token for Ubuntu Push Client service",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "token",
                    "type": "string",
                    "description": "Token; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "deviceTokenBlackBerryPush",
            "description": "A token for BlackBerry Push Service",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "token",
                    "type": "string",
                    "description": "Token; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "deviceTokenTizenPush",
            "description": "A token for Tizen Push Service",
            "class": "DeviceToken",
            "properties": [
                {
                    "name": "reg_id",
                    "type": "string",
                    "description": "Push service registration identifier; may be empty to de-register a device"
                }
            ]
        },
        {
            "name": "wallpaper",
            "description": "Contains information about a wallpaper",
            "class": "Wallpaper",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Unique persistent wallpaper identifier"
                },
                {
                    "name": "sizes",
                    "type": "vector\u003cphotoSize\u003e",
                    "description": "Available variants of the wallpaper in different sizes. These photos can only be downloaded; they can't be sent in a message"
                },
                {
                    "name": "color",
                    "type": "int32",
                    "description": "Main color of the wallpaper in RGB24 format; should be treated as background color if no photos are specified"
                }
            ]
        },
        {
            "name": "wallpapers",
            "description": "Contains a list of wallpapers",
            "class": "Wallpapers",
            "properties": [
                {
                    "name": "wallpapers",
                    "type": "vector\u003cwallpaper\u003e",
                    "description": "A list of wallpapers"
                }
            ]
        },
        {
            "name": "hashtags",
            "description": "Contains a list of hashtags",
            "class": "Hashtags",
            "properties": [
                {
                    "name": "hashtags",
                    "type": "vector\u003cstring\u003e",
                    "description": "A list of hashtags"
                }
            ]
        },
        {
            "name": "checkChatUsernameResultOk",
            "description": "The username can be set",
            "class": "CheckChatUsernameResult",
            "properties": []
        },
        {
            "name": "checkChatUsernameResultUsernameInvalid",
            "description": "The username is invalid",
            "class": "CheckChatUsernameResult",
            "properties": []
        },
        {
            "name": "checkChatUsernameResultUsernameOccupied",
            "description": "The username is occupied",
            "class": "CheckChatUsernameResult",
            "properties": []
        },
        {
            "name": "checkChatUsernameResultPublicChatsTooMuch",
            "description": "The user has too much public chats, one of them should be made private first",
            "class": "CheckChatUsernameResult",
            "properties": []
        },
        {
            "name": "checkChatUsernameResultPublicGroupsUnavailable",
            "description": "The user can't be a member of a public supergroup",
            "class": "CheckChatUsernameResult",
            "properties": []
        },
        {
            "name": "optionValueBoolean",
            "description": "Boolean option",
            "class": "OptionValue",
            "properties": [
                {
                    "name": "value",
                    "type": "Bool",
                    "description": "The value of the option"
                }
            ]
        },
        {
            "name": "optionValueEmpty",
            "description": "An unknown option or an option which has a default value",
            "class": "OptionValue",
            "properties": []
        },
        {
            "name": "optionValueInteger",
            "description": "An integer option",
            "class": "OptionValue",
            "properties": [
                {
                    "name": "value",
                    "type": "int32",
                    "description": "The value of the option"
                }
            ]
        },
        {
            "name": "optionValueString",
            "description": "A string option",
            "class": "OptionValue",
            "properties": [
                {
                    "name": "value",
                    "type": "string",
                    "description": "The value of the option"
                }
            ]
        },
        {
            "name": "userPrivacySettingRuleAllowAll",
            "description": "A rule to allow all users to do something",
            "class": "UserPrivacySettingRule",
            "properties": []
        },
        {
            "name": "userPrivacySettingRuleAllowContacts",
            "description": "A rule to allow all of a user's contacts to do something",
            "class": "UserPrivacySettingRule",
            "properties": []
        },
        {
            "name": "userPrivacySettingRuleAllowUsers",
            "description": "A rule to allow certain specified users to do something",
            "class": "UserPrivacySettingRule",
            "properties": [
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "The user identifiers"
                }
            ]
        },
        {
            "name": "userPrivacySettingRuleRestrictAll",
            "description": "A rule to restrict all users from doing something",
            "class": "UserPrivacySettingRule",
            "properties": []
        },
        {
            "name": "userPrivacySettingRuleRestrictContacts",
            "description": "A rule to restrict all contacts of a user from doing something",
            "class": "UserPrivacySettingRule",
            "properties": []
        },
        {
            "name": "userPrivacySettingRuleRestrictUsers",
            "description": "A rule to restrict all specified users from doing something",
            "class": "UserPrivacySettingRule",
            "properties": [
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "The user identifiers"
                }
            ]
        },
        {
            "name": "userPrivacySettingRules",
            "description": "A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed",
            "class": "UserPrivacySettingRules",
            "properties": [
                {
                    "name": "rules",
                    "type": "vector\u003cUserPrivacySettingRule\u003e",
                    "description": "A list of rules"
                }
            ]
        },
        {
            "name": "userPrivacySettingShowStatus",
            "description": "A privacy setting for managing whether the user's online status is visible",
            "class": "UserPrivacySetting",
            "properties": []
        },
        {
            "name": "userPrivacySettingAllowChatInvites",
            "description": "A privacy setting for managing whether the user can be invited to chats",
            "class": "UserPrivacySetting",
            "properties": []
        },
        {
            "name": "userPrivacySettingAllowCalls",
            "description": "A privacy setting for managing whether the user can be called",
            "class": "UserPrivacySetting",
            "properties": []
        },
        {
            "name": "accountTTL",
            "description": "Contains information about the period of inactivity after which the current user's account will automatically be deleted",
            "class": "AccountTTL",
            "properties": [
                {
                    "name": "days",
                    "type": "int32",
                    "description": "Number of days of inactivity before the account will be flagged for deletion; should range from 30-366 days"
                }
            ]
        },
        {
            "name": "session",
            "description": "Contains information about one session in a Telegram application used by the current user",
            "class": "Session",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Session identifier"
                },
                {
                    "name": "is_current",
                    "type": "Bool",
                    "description": "True, if this session is the current session"
                },
                {
                    "name": "api_id",
                    "type": "int32",
                    "description": "Telegram API identifier, as provided by the application"
                },
                {
                    "name": "application_name",
                    "type": "string",
                    "description": "Name of the application, as provided by the application"
                },
                {
                    "name": "application_version",
                    "type": "string",
                    "description": "The version of the application, as provided by the application"
                },
                {
                    "name": "is_official_application",
                    "type": "Bool",
                    "description": "True, if the application is an official application or uses the api_id of an official application"
                },
                {
                    "name": "device_model",
                    "type": "string",
                    "description": "Model of the device the application has been run or is running on, as provided by the application"
                },
                {
                    "name": "platform",
                    "type": "string",
                    "description": "Operating system the application has been run or is running on, as provided by the application"
                },
                {
                    "name": "system_version",
                    "type": "string",
                    "description": "Version of the operating system the application has been run or is running on, as provided by the application"
                },
                {
                    "name": "log_in_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the user has logged in"
                },
                {
                    "name": "last_active_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the session was last used"
                },
                {
                    "name": "ip",
                    "type": "string",
                    "description": "IP address from which the session was created, in human-readable format"
                },
                {
                    "name": "country",
                    "type": "string",
                    "description": "A two-letter country code for the country from which the session was created, based on the IP address"
                },
                {
                    "name": "region",
                    "type": "string",
                    "description": "Region code from which the session was created, based on the IP address"
                }
            ]
        },
        {
            "name": "sessions",
            "description": "Contains a list of sessions",
            "class": "Sessions",
            "properties": [
                {
                    "name": "sessions",
                    "type": "vector\u003csession\u003e",
                    "description": "List of sessions"
                }
            ]
        },
        {
            "name": "connectedWebsite",
            "description": "Contains information about one website the current user is logged in with Telegram",
            "class": "ConnectedWebsite",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Website identifier"
                },
                {
                    "name": "domain_name",
                    "type": "string",
                    "description": "The domain name of the website"
                },
                {
                    "name": "bot_user_id",
                    "type": "int32",
                    "description": "User identifier of a bot linked with the website"
                },
                {
                    "name": "browser",
                    "type": "string",
                    "description": "The version of a browser used to log in"
                },
                {
                    "name": "platform",
                    "type": "string",
                    "description": "Operating system the browser is running on"
                },
                {
                    "name": "log_in_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the user was logged in"
                },
                {
                    "name": "last_active_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when obtained authorization was last used"
                },
                {
                    "name": "ip",
                    "type": "string",
                    "description": "IP address from which the user was logged in, in human-readable format"
                },
                {
                    "name": "location",
                    "type": "string",
                    "description": "Human-readable description of a country and a region, from which the user was logged in, based on the IP address"
                }
            ]
        },
        {
            "name": "connectedWebsites",
            "description": "Contains a list of websites the current user is logged in with Telegram",
            "class": "ConnectedWebsites",
            "properties": [
                {
                    "name": "websites",
                    "type": "vector\u003cconnectedWebsite\u003e",
                    "description": "List of connected websites"
                }
            ]
        },
        {
            "name": "chatReportSpamState",
            "description": "Contains information about the availability of the \"Report spam\" action for a chat",
            "class": "ChatReportSpamState",
            "properties": [
                {
                    "name": "can_report_spam",
                    "type": "Bool",
                    "description": "True, if a prompt with the \"Report spam\" action should be shown to the user"
                }
            ]
        },
        {
            "name": "chatReportReasonSpam",
            "description": "The chat contains spam messages",
            "class": "ChatReportReason",
            "properties": []
        },
        {
            "name": "chatReportReasonViolence",
            "description": "The chat promotes violence",
            "class": "ChatReportReason",
            "properties": []
        },
        {
            "name": "chatReportReasonPornography",
            "description": "The chat contains pornographic messages",
            "class": "ChatReportReason",
            "properties": []
        },
        {
            "name": "chatReportReasonCopyright",
            "description": "The chat contains copyrighted content",
            "class": "ChatReportReason",
            "properties": []
        },
        {
            "name": "chatReportReasonCustom",
            "description": "A custom reason provided by the user",
            "class": "ChatReportReason",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "Report text"
                }
            ]
        },
        {
            "name": "publicMessageLink",
            "description": "Contains a public HTTPS link to a message in a public supergroup or channel",
            "class": "PublicMessageLink",
            "properties": [
                {
                    "name": "link",
                    "type": "string",
                    "description": "Message link"
                },
                {
                    "name": "html",
                    "type": "string",
                    "description": "HTML-code for embedding the message"
                }
            ]
        },
        {
            "name": "fileTypeNone",
            "description": "The data is not a file",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeAnimation",
            "description": "The file is an animation",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeAudio",
            "description": "The file is an audio file",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeDocument",
            "description": "The file is a document",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypePhoto",
            "description": "The file is a photo",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeProfilePhoto",
            "description": "The file is a profile photo",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeSecret",
            "description": "The file was sent to a secret chat (the file type is not known to the server)",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeSecretThumbnail",
            "description": "The file is a thumbnail of a file from a secret chat",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeSecure",
            "description": "The file is a file from Secure storage used for storing Telegram Passport files",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeSticker",
            "description": "The file is a sticker",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeThumbnail",
            "description": "The file is a thumbnail of another file",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeUnknown",
            "description": "The file type is not yet known",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeVideo",
            "description": "The file is a video",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeVideoNote",
            "description": "The file is a video note",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeVoiceNote",
            "description": "The file is a voice note",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "fileTypeWallpaper",
            "description": "The file is a wallpaper",
            "class": "FileType",
            "properties": []
        },
        {
            "name": "storageStatisticsByFileType",
            "description": "Contains the storage usage statistics for a specific file type",
            "class": "StorageStatisticsByFileType",
            "properties": [
                {
                    "name": "file_type",
                    "type": "FileType",
                    "description": "File type"
                },
                {
                    "name": "size",
                    "type": "int53",
                    "description": "Total size of the files"
                },
                {
                    "name": "count",
                    "type": "int32",
                    "description": "Total number of files"
                }
            ]
        },
        {
            "name": "storageStatisticsByChat",
            "description": "Contains the storage usage statistics for a specific chat",
            "class": "StorageStatisticsByChat",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier; 0 if none"
                },
                {
                    "name": "size",
                    "type": "int53",
                    "description": "Total size of the files in the chat"
                },
                {
                    "name": "count",
                    "type": "int32",
                    "description": "Total number of files in the chat"
                },
                {
                    "name": "by_file_type",
                    "type": "vector\u003cstorageStatisticsByFileType\u003e",
                    "description": "Statistics split by file types"
                }
            ]
        },
        {
            "name": "storageStatistics",
            "description": "Contains the exact storage usage statistics split by chats and file type",
            "class": "StorageStatistics",
            "properties": [
                {
                    "name": "size",
                    "type": "int53",
                    "description": "Total size of files"
                },
                {
                    "name": "count",
                    "type": "int32",
                    "description": "Total number of files"
                },
                {
                    "name": "by_chat",
                    "type": "vector\u003cstorageStatisticsByChat\u003e",
                    "description": "Statistics split by chats"
                }
            ]
        },
        {
            "name": "storageStatisticsFast",
            "description": "Contains approximate storage usage statistics, excluding files of unknown file type",
            "class": "StorageStatisticsFast",
            "properties": [
                {
                    "name": "files_size",
                    "type": "int53",
                    "description": "Approximate total size of files"
                },
                {
                    "name": "file_count",
                    "type": "int32",
                    "description": "Approximate number of files"
                },
                {
                    "name": "database_size",
                    "type": "int53",
                    "description": "Size of the database"
                }
            ]
        },
        {
            "name": "networkTypeNone",
            "description": "The network is not available",
            "class": "NetworkType",
            "properties": []
        },
        {
            "name": "networkTypeMobile",
            "description": "A mobile network",
            "class": "NetworkType",
            "properties": []
        },
        {
            "name": "networkTypeMobileRoaming",
            "description": "A mobile roaming network",
            "class": "NetworkType",
            "properties": []
        },
        {
            "name": "networkTypeWiFi",
            "description": "A Wi-Fi network",
            "class": "NetworkType",
            "properties": []
        },
        {
            "name": "networkTypeOther",
            "description": "A different network type (e.g., Ethernet network)",
            "class": "NetworkType",
            "properties": []
        },
        {
            "name": "networkStatisticsEntryFile",
            "description": "Contains information about the total amount of data that was used to send and receive files",
            "class": "NetworkStatisticsEntry",
            "properties": [
                {
                    "name": "file_type",
                    "type": "FileType",
                    "description": "Type of the file the data is part of"
                },
                {
                    "name": "network_type",
                    "type": "NetworkType",
                    "description": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type"
                },
                {
                    "name": "sent_bytes",
                    "type": "int53",
                    "description": "Total number of bytes sent"
                },
                {
                    "name": "received_bytes",
                    "type": "int53",
                    "description": "Total number of bytes received"
                }
            ]
        },
        {
            "name": "networkStatisticsEntryCall",
            "description": "Contains information about the total amount of data that was used for calls",
            "class": "NetworkStatisticsEntry",
            "properties": [
                {
                    "name": "network_type",
                    "type": "NetworkType",
                    "description": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type"
                },
                {
                    "name": "sent_bytes",
                    "type": "int53",
                    "description": "Total number of bytes sent"
                },
                {
                    "name": "received_bytes",
                    "type": "int53",
                    "description": "Total number of bytes received"
                },
                {
                    "name": "duration",
                    "type": "double",
                    "description": "Total call duration, in seconds"
                }
            ]
        },
        {
            "name": "networkStatistics",
            "description": "A full list of available network statistic entries",
            "class": "NetworkStatistics",
            "properties": [
                {
                    "name": "since_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the app began collecting statistics"
                },
                {
                    "name": "entries",
                    "type": "vector\u003cNetworkStatisticsEntry\u003e",
                    "description": "Network statistics entries"
                }
            ]
        },
        {
            "name": "connectionStateWaitingForNetwork",
            "description": "Currently waiting for the network to become available. Use SetNetworkType to change the available network type",
            "class": "ConnectionState",
            "properties": []
        },
        {
            "name": "connectionStateConnectingToProxy",
            "description": "Currently establishing a connection with a proxy server",
            "class": "ConnectionState",
            "properties": []
        },
        {
            "name": "connectionStateConnecting",
            "description": "Currently establishing a connection to the Telegram servers",
            "class": "ConnectionState",
            "properties": []
        },
        {
            "name": "connectionStateUpdating",
            "description": "Downloading data received while the client was offline",
            "class": "ConnectionState",
            "properties": []
        },
        {
            "name": "connectionStateReady",
            "description": "There is a working connection to the Telegram servers",
            "class": "ConnectionState",
            "properties": []
        },
        {
            "name": "topChatCategoryUsers",
            "description": "A category containing frequently used private chats with non-bot users",
            "class": "TopChatCategory",
            "properties": []
        },
        {
            "name": "topChatCategoryBots",
            "description": "A category containing frequently used private chats with bot users",
            "class": "TopChatCategory",
            "properties": []
        },
        {
            "name": "topChatCategoryGroups",
            "description": "A category containing frequently used basic groups and supergroups",
            "class": "TopChatCategory",
            "properties": []
        },
        {
            "name": "topChatCategoryChannels",
            "description": "A category containing frequently used channels",
            "class": "TopChatCategory",
            "properties": []
        },
        {
            "name": "topChatCategoryInlineBots",
            "description": "A category containing frequently used chats with inline bots sorted by their usage in inline mode",
            "class": "TopChatCategory",
            "properties": []
        },
        {
            "name": "topChatCategoryCalls",
            "description": "A category containing frequently used chats used for calls",
            "class": "TopChatCategory",
            "properties": []
        },
        {
            "name": "tMeURLTypeUser",
            "description": "A URL linking to a user",
            "class": "TMeURLType",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the user"
                }
            ]
        },
        {
            "name": "tMeURLTypeSupergroup",
            "description": "A URL linking to a public supergroup or channel",
            "class": "TMeURLType",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int53",
                    "description": "Identifier of the supergroup or channel"
                }
            ]
        },
        {
            "name": "tMeURLTypeChatInvite",
            "description": "A chat invite link",
            "class": "TMeURLType",
            "properties": [
                {
                    "name": "info",
                    "type": "chatInviteLinkInfo",
                    "description": "Chat invite link info"
                }
            ]
        },
        {
            "name": "tMeURLTypeStickerSet",
            "description": "A URL linking to a sticker set",
            "class": "TMeURLType",
            "properties": [
                {
                    "name": "sticker_set_id",
                    "type": "int64",
                    "description": "Identifier of the sticker set"
                }
            ]
        },
        {
            "name": "tMeURL",
            "description": "Represents a URL linking to an internal Telegram entity",
            "class": "TMeURL",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "URL"
                },
                {
                    "name": "type",
                    "type": "TMeURLType",
                    "description": "Type of the URL"
                }
            ]
        },
        {
            "name": "tMeURLs",
            "description": "Contains a list of t.me URLs",
            "class": "TMeURLs",
            "properties": [
                {
                    "name": "urls",
                    "type": "vector\u003ctMeURL\u003e",
                    "description": "List of URLs"
                }
            ]
        },
        {
            "name": "count",
            "description": "Contains a counter",
            "class": "Count",
            "properties": [
                {
                    "name": "count",
                    "type": "int32",
                    "description": "Count"
                }
            ]
        },
        {
            "name": "text",
            "description": "Contains some text",
            "class": "Text",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "Text"
                }
            ]
        },
        {
            "name": "seconds",
            "description": "Contains a value representing a number of seconds",
            "class": "Seconds",
            "properties": [
                {
                    "name": "seconds",
                    "type": "double",
                    "description": "Number of seconds"
                }
            ]
        },
        {
            "name": "deepLinkInfo",
            "description": "Contains information about a tg:// deep link",
            "class": "DeepLinkInfo",
            "properties": [
                {
                    "name": "text",
                    "type": "formattedText",
                    "description": "Text to be shown to the user"
                },
                {
                    "name": "need_update_application",
                    "type": "Bool",
                    "description": "True, if user should be asked to update the application"
                }
            ]
        },
        {
            "name": "textParseModeMarkdown",
            "description": "The text should be parsed in markdown-style",
            "class": "TextParseMode",
            "properties": []
        },
        {
            "name": "textParseModeHTML",
            "description": "The text should be parsed in HTML-style",
            "class": "TextParseMode",
            "properties": []
        },
        {
            "name": "proxyTypeSocks5",
            "description": "A SOCKS5 proxy server",
            "class": "ProxyType",
            "properties": [
                {
                    "name": "username",
                    "type": "string",
                    "description": "Username for logging in; may be empty"
                },
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password for logging in; may be empty"
                }
            ]
        },
        {
            "name": "proxyTypeHTTP",
            "description": "A HTTP transparent proxy server",
            "class": "ProxyType",
            "properties": [
                {
                    "name": "username",
                    "type": "string",
                    "description": "Username for logging in; may be empty"
                },
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password for logging in; may be empty"
                },
                {
                    "name": "http_only",
                    "type": "Bool",
                    "description": "Pass true, if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method"
                }
            ]
        },
        {
            "name": "proxyTypeMtproto",
            "description": "An MTProto proxy server",
            "class": "ProxyType",
            "properties": [
                {
                    "name": "secret",
                    "type": "string",
                    "description": "The proxy's secret in hexadecimal encoding"
                }
            ]
        },
        {
            "name": "proxy",
            "description": "Contains information about a proxy server",
            "class": "Proxy",
            "properties": [
                {
                    "name": "id",
                    "type": "int32",
                    "description": "Unique identifier of the proxy"
                },
                {
                    "name": "server",
                    "type": "string",
                    "description": "Proxy server IP address"
                },
                {
                    "name": "port",
                    "type": "int32",
                    "description": "Proxy server port"
                },
                {
                    "name": "last_used_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the proxy was last used; 0 if never"
                },
                {
                    "name": "is_enabled",
                    "type": "Bool",
                    "description": "True, if the proxy is enabled now"
                },
                {
                    "name": "type",
                    "type": "ProxyType",
                    "description": "Type of the proxy"
                }
            ]
        },
        {
            "name": "proxies",
            "description": "Represents a list of proxy servers",
            "class": "Proxies",
            "properties": [
                {
                    "name": "proxies",
                    "type": "vector\u003cproxy\u003e",
                    "description": "List of proxy servers"
                }
            ]
        },
        {
            "name": "inputSticker",
            "description": "Describes a sticker that should be added to a sticker set",
            "class": "InputSticker",
            "properties": [
                {
                    "name": "png_sticker",
                    "type": "InputFile",
                    "description": "PNG image with the sticker; must be up to 512 kB in size and fit in a 512x512 square"
                },
                {
                    "name": "emojis",
                    "type": "string",
                    "description": "Emoji corresponding to the sticker"
                },
                {
                    "name": "mask_position",
                    "type": "maskPosition",
                    "description": "For masks, position where the mask should be placed; may be null"
                }
            ]
        },
        {
            "name": "updateAuthorizationState",
            "description": "The user authorization state has changed",
            "class": "Update",
            "properties": [
                {
                    "name": "authorization_state",
                    "type": "AuthorizationState",
                    "description": "New authorization state"
                }
            ]
        },
        {
            "name": "updateNewMessage",
            "description": "A new message was received; can also be an outgoing message",
            "class": "Update",
            "properties": [
                {
                    "name": "message",
                    "type": "message",
                    "description": "The new message"
                },
                {
                    "name": "disable_notification",
                    "type": "Bool",
                    "description": "True, if this message must not generate a notification"
                },
                {
                    "name": "contains_mention",
                    "type": "Bool",
                    "description": "True, if the message contains a mention of the current user"
                }
            ]
        },
        {
            "name": "updateMessageSendAcknowledged",
            "description": "A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully or even that the send message request will be processed. This update will be sent only if the option \"use_quick_ack\" is set to true. This update may be sent multiple times for the same message",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat identifier of the sent message"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "A temporary message identifier"
                }
            ]
        },
        {
            "name": "updateMessageSendSucceeded",
            "description": "A message has been successfully sent",
            "class": "Update",
            "properties": [
                {
                    "name": "message",
                    "type": "message",
                    "description": "Information about the sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change"
                },
                {
                    "name": "old_message_id",
                    "type": "int53",
                    "description": "The previous temporary message identifier"
                }
            ]
        },
        {
            "name": "updateMessageSendFailed",
            "description": "A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update",
            "class": "Update",
            "properties": [
                {
                    "name": "message",
                    "type": "message",
                    "description": "Contains information about the message that failed to send"
                },
                {
                    "name": "old_message_id",
                    "type": "int53",
                    "description": "The previous temporary message identifier"
                },
                {
                    "name": "error_code",
                    "type": "int32",
                    "description": "An error code"
                },
                {
                    "name": "error_message",
                    "type": "string",
                    "description": "Error message"
                }
            ]
        },
        {
            "name": "updateMessageContent",
            "description": "The message content has changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                },
                {
                    "name": "new_content",
                    "type": "MessageContent",
                    "description": "New message content"
                }
            ]
        },
        {
            "name": "updateMessageEdited",
            "description": "A message was edited. Changes in the message content will come in a separate updateMessageContent",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                },
                {
                    "name": "edit_date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) when the message was edited"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "New message reply markup; may be null"
                }
            ]
        },
        {
            "name": "updateMessageViews",
            "description": "The view count of the message has changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                },
                {
                    "name": "views",
                    "type": "int32",
                    "description": "New value of the view count"
                }
            ]
        },
        {
            "name": "updateMessageContentOpened",
            "description": "The message content was opened. Updates voice note messages to \"listened\", video note messages to \"viewed\" and starts the TTL timer for self-destructing messages",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                }
            ]
        },
        {
            "name": "updateMessageMentionRead",
            "description": "A message with an unread mention was read",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                },
                {
                    "name": "unread_mention_count",
                    "type": "int32",
                    "description": "The new number of unread mention messages left in the chat"
                }
            ]
        },
        {
            "name": "updateNewChat",
            "description": "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the client. The chat field changes will be reported through separate updates",
            "class": "Update",
            "properties": [
                {
                    "name": "chat",
                    "type": "chat",
                    "description": "The chat"
                }
            ]
        },
        {
            "name": "updateChatTitle",
            "description": "The title of a chat was changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "The new chat title"
                }
            ]
        },
        {
            "name": "updateChatPhoto",
            "description": "A chat photo was changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "photo",
                    "type": "chatPhoto",
                    "description": "The new chat photo; may be null"
                }
            ]
        },
        {
            "name": "updateChatLastMessage",
            "description": "The last message of a chat was changed. If last_message is null then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "last_message",
                    "type": "message",
                    "description": "The new last message in the chat; may be null"
                },
                {
                    "name": "order",
                    "type": "int64",
                    "description": "New value of the chat order"
                }
            ]
        },
        {
            "name": "updateChatOrder",
            "description": "The order of the chat in the chats list has changed. Instead of this update updateChatLastMessage, updateChatIsPinned or updateChatDraftMessage might be sent",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "order",
                    "type": "int64",
                    "description": "New value of the order"
                }
            ]
        },
        {
            "name": "updateChatIsPinned",
            "description": "A chat was pinned or unpinned",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "is_pinned",
                    "type": "Bool",
                    "description": "New value of is_pinned"
                },
                {
                    "name": "order",
                    "type": "int64",
                    "description": "New value of the chat order"
                }
            ]
        },
        {
            "name": "updateChatIsMarkedAsUnread",
            "description": "A chat was marked as unread or was read",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "is_marked_as_unread",
                    "type": "Bool",
                    "description": "New value of is_marked_as_unread"
                }
            ]
        },
        {
            "name": "updateChatIsSponsored",
            "description": "A chat's is_sponsored field has changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "is_sponsored",
                    "type": "Bool",
                    "description": "New value of is_sponsored"
                },
                {
                    "name": "order",
                    "type": "int64",
                    "description": "New value of chat order"
                }
            ]
        },
        {
            "name": "updateChatDefaultDisableNotification",
            "description": "The value of the default disable_notification parameter, used when a message is sent to the chat, was changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "default_disable_notification",
                    "type": "Bool",
                    "description": "The new default_disable_notification value"
                }
            ]
        },
        {
            "name": "updateChatReadInbox",
            "description": "Incoming messages were read or number of unread messages has been changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "last_read_inbox_message_id",
                    "type": "int53",
                    "description": "Identifier of the last read incoming message"
                },
                {
                    "name": "unread_count",
                    "type": "int32",
                    "description": "The number of unread messages left in the chat"
                }
            ]
        },
        {
            "name": "updateChatReadOutbox",
            "description": "Outgoing messages were read",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "last_read_outbox_message_id",
                    "type": "int53",
                    "description": "Identifier of last read outgoing message"
                }
            ]
        },
        {
            "name": "updateChatUnreadMentionCount",
            "description": "The chat unread_mention_count has changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "unread_mention_count",
                    "type": "int32",
                    "description": "The number of unread mention messages left in the chat"
                }
            ]
        },
        {
            "name": "updateChatNotificationSettings",
            "description": "Notification settings for a chat were changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "notification_settings",
                    "type": "chatNotificationSettings",
                    "description": "The new notification settings"
                }
            ]
        },
        {
            "name": "updateScopeNotificationSettings",
            "description": "Notification settings for some type of chats were updated",
            "class": "Update",
            "properties": [
                {
                    "name": "scope",
                    "type": "NotificationSettingsScope",
                    "description": "Types of chats for which notification settings were updated"
                },
                {
                    "name": "notification_settings",
                    "type": "scopeNotificationSettings",
                    "description": "The new notification settings"
                }
            ]
        },
        {
            "name": "updateChatReplyMarkup",
            "description": "The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "reply_markup_message_id",
                    "type": "int53",
                    "description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat"
                }
            ]
        },
        {
            "name": "updateChatDraftMessage",
            "description": "A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update shouldn't be applied",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "draft_message",
                    "type": "draftMessage",
                    "description": "The new draft message; may be null"
                },
                {
                    "name": "order",
                    "type": "int64",
                    "description": "New value of the chat order"
                }
            ]
        },
        {
            "name": "updateDeleteMessages",
            "description": "Some messages were deleted",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "Identifiers of the deleted messages"
                },
                {
                    "name": "is_permanent",
                    "type": "Bool",
                    "description": "True, if the messages are permanently deleted by a user (as opposed to just becoming unaccessible)"
                },
                {
                    "name": "from_cache",
                    "type": "Bool",
                    "description": "True, if the messages are deleted only from the cache and can possibly be retrieved again in the future"
                }
            ]
        },
        {
            "name": "updateUserChatAction",
            "description": "User activity in the chat has changed",
            "class": "Update",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of a user performing an action"
                },
                {
                    "name": "action",
                    "type": "ChatAction",
                    "description": "The action description"
                }
            ]
        },
        {
            "name": "updateUserStatus",
            "description": "The user went online or offline",
            "class": "Update",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "status",
                    "type": "UserStatus",
                    "description": "New status of the user"
                }
            ]
        },
        {
            "name": "updateUser",
            "description": "Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the client",
            "class": "Update",
            "properties": [
                {
                    "name": "user",
                    "type": "user",
                    "description": "New data about the user"
                }
            ]
        },
        {
            "name": "updateBasicGroup",
            "description": "Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the client",
            "class": "Update",
            "properties": [
                {
                    "name": "basic_group",
                    "type": "basicGroup",
                    "description": "New data about the group"
                }
            ]
        },
        {
            "name": "updateSupergroup",
            "description": "Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the client",
            "class": "Update",
            "properties": [
                {
                    "name": "supergroup",
                    "type": "supergroup",
                    "description": "New data about the supergroup"
                }
            ]
        },
        {
            "name": "updateSecretChat",
            "description": "Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the client",
            "class": "Update",
            "properties": [
                {
                    "name": "secret_chat",
                    "type": "secretChat",
                    "description": "New data about the secret chat"
                }
            ]
        },
        {
            "name": "updateUserFullInfo",
            "description": "Some data from userFullInfo has been changed",
            "class": "Update",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "user_full_info",
                    "type": "userFullInfo",
                    "description": "New full information about the user"
                }
            ]
        },
        {
            "name": "updateBasicGroupFullInfo",
            "description": "Some data from basicGroupFullInfo has been changed",
            "class": "Update",
            "properties": [
                {
                    "name": "basic_group_id",
                    "type": "int32",
                    "description": "Identifier of a basic group"
                },
                {
                    "name": "basic_group_full_info",
                    "type": "basicGroupFullInfo",
                    "description": "New full information about the group"
                }
            ]
        },
        {
            "name": "updateSupergroupFullInfo",
            "description": "Some data from supergroupFullInfo has been changed",
            "class": "Update",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup or channel"
                },
                {
                    "name": "supergroup_full_info",
                    "type": "supergroupFullInfo",
                    "description": "New full information about the supergroup"
                }
            ]
        },
        {
            "name": "updateServiceNotification",
            "description": "Service notification from the server. Upon receiving this the client must show a popup with the content of the notification",
            "class": "Update",
            "properties": [
                {
                    "name": "type",
                    "type": "string",
                    "description": "Notification type. If type begins with \"AUTH_KEY_DROP_\", then two buttons \"Cancel\" and \"Log out\" should be shown under notification; if user presses the second, all local data should be destroyed using Destroy method"
                },
                {
                    "name": "content",
                    "type": "MessageContent",
                    "description": "Notification content"
                }
            ]
        },
        {
            "name": "updateFile",
            "description": "Information about a file was updated",
            "class": "Update",
            "properties": [
                {
                    "name": "file",
                    "type": "file",
                    "description": "New data about the file"
                }
            ]
        },
        {
            "name": "updateFileGenerationStart",
            "description": "The file generation process needs to be started by the client",
            "class": "Update",
            "properties": [
                {
                    "name": "generation_id",
                    "type": "int64",
                    "description": "Unique identifier for the generation process"
                },
                {
                    "name": "original_path",
                    "type": "string",
                    "description": "The path to a file from which a new file is generated; may be empty"
                },
                {
                    "name": "destination_path",
                    "type": "string",
                    "description": "The path to a file that should be created and where the new file should be generated"
                },
                {
                    "name": "conversion",
                    "type": "string",
                    "description": "String specifying the conversion applied to the original file. If conversion is \"#url#\" than original_path contains an HTTP/HTTPS URL of a file, which should be downloaded by the client"
                }
            ]
        },
        {
            "name": "updateFileGenerationStop",
            "description": "File generation is no longer needed",
            "class": "Update",
            "properties": [
                {
                    "name": "generation_id",
                    "type": "int64",
                    "description": "Unique identifier for the generation process"
                }
            ]
        },
        {
            "name": "updateCall",
            "description": "New call was created or information about a call was updated",
            "class": "Update",
            "properties": [
                {
                    "name": "call",
                    "type": "call",
                    "description": "New data about a call"
                }
            ]
        },
        {
            "name": "updateUserPrivacySettingRules",
            "description": "Some privacy setting rules have been changed",
            "class": "Update",
            "properties": [
                {
                    "name": "setting",
                    "type": "UserPrivacySetting",
                    "description": "The privacy setting"
                },
                {
                    "name": "rules",
                    "type": "userPrivacySettingRules",
                    "description": "New privacy rules"
                }
            ]
        },
        {
            "name": "updateUnreadMessageCount",
            "description": "Number of unread messages has changed. This update is sent only if a message database is used",
            "class": "Update",
            "properties": [
                {
                    "name": "unread_count",
                    "type": "int32",
                    "description": "Total number of unread messages"
                },
                {
                    "name": "unread_unmuted_count",
                    "type": "int32",
                    "description": "Total number of unread messages in unmuted chats"
                }
            ]
        },
        {
            "name": "updateUnreadChatCount",
            "description": "Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if a message database is used",
            "class": "Update",
            "properties": [
                {
                    "name": "unread_count",
                    "type": "int32",
                    "description": "Total number of unread chats"
                },
                {
                    "name": "unread_unmuted_count",
                    "type": "int32",
                    "description": "Total number of unread unmuted chats"
                },
                {
                    "name": "marked_as_unread_count",
                    "type": "int32",
                    "description": "Total number of chats marked as unread"
                },
                {
                    "name": "marked_as_unread_unmuted_count",
                    "type": "int32",
                    "description": "Total number of unmuted chats marked as unread"
                }
            ]
        },
        {
            "name": "updateOption",
            "description": "An option changed its value",
            "class": "Update",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "The option name"
                },
                {
                    "name": "value",
                    "type": "OptionValue",
                    "description": "The new option value"
                }
            ]
        },
        {
            "name": "updateInstalledStickerSets",
            "description": "The list of installed sticker sets was updated",
            "class": "Update",
            "properties": [
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "True, if the list of installed mask sticker sets was updated"
                },
                {
                    "name": "sticker_set_ids",
                    "type": "vector\u003cint64\u003e",
                    "description": "The new list of installed ordinary sticker sets"
                }
            ]
        },
        {
            "name": "updateTrendingStickerSets",
            "description": "The list of trending sticker sets was updated or some of them were viewed",
            "class": "Update",
            "properties": [
                {
                    "name": "sticker_sets",
                    "type": "stickerSets",
                    "description": "The new list of trending sticker sets"
                }
            ]
        },
        {
            "name": "updateRecentStickers",
            "description": "The list of recently used stickers was updated",
            "class": "Update",
            "properties": [
                {
                    "name": "is_attached",
                    "type": "Bool",
                    "description": "True, if the list of stickers attached to photo or video files was updated, otherwise the list of sent stickers is updated"
                },
                {
                    "name": "sticker_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "The new list of file identifiers of recently used stickers"
                }
            ]
        },
        {
            "name": "updateFavoriteStickers",
            "description": "The list of favorite stickers was updated",
            "class": "Update",
            "properties": [
                {
                    "name": "sticker_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "The new list of file identifiers of favorite stickers"
                }
            ]
        },
        {
            "name": "updateSavedAnimations",
            "description": "The list of saved animations was updated",
            "class": "Update",
            "properties": [
                {
                    "name": "animation_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "The new list of file identifiers of saved animations"
                }
            ]
        },
        {
            "name": "updateLanguagePackStrings",
            "description": "Some language pack strings have been updated",
            "class": "Update",
            "properties": [
                {
                    "name": "localization_target",
                    "type": "string",
                    "description": "Localization target to which the language pack belongs"
                },
                {
                    "name": "language_pack_id",
                    "type": "string",
                    "description": "Identifier of the updated language pack"
                },
                {
                    "name": "strings",
                    "type": "vector\u003clanguagePackString\u003e",
                    "description": "List of changed language pack strings"
                }
            ]
        },
        {
            "name": "updateConnectionState",
            "description": "The connection state has changed",
            "class": "Update",
            "properties": [
                {
                    "name": "state",
                    "type": "ConnectionState",
                    "description": "The new connection state"
                }
            ]
        },
        {
            "name": "updateTermsOfService",
            "description": "New terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method should be called with the reason \"Decline ToS update\"",
            "class": "Update",
            "properties": [
                {
                    "name": "terms_of_service_id",
                    "type": "string",
                    "description": "Identifier of the terms of service"
                },
                {
                    "name": "terms_of_service",
                    "type": "termsOfService",
                    "description": "The new terms of service"
                }
            ]
        },
        {
            "name": "updateNewInlineQuery",
            "description": "A new incoming inline query; for bots only",
            "class": "Update",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Unique query identifier"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who sent the query"
                },
                {
                    "name": "user_location",
                    "type": "location",
                    "description": "User location, provided by the client; may be null"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Text of the query"
                },
                {
                    "name": "offset",
                    "type": "string",
                    "description": "Offset of the first entry to return"
                }
            ]
        },
        {
            "name": "updateNewChosenInlineResult",
            "description": "The user has chosen a result of an inline query; for bots only",
            "class": "Update",
            "properties": [
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who sent the query"
                },
                {
                    "name": "user_location",
                    "type": "location",
                    "description": "User location, provided by the client; may be null"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Text of the query"
                },
                {
                    "name": "result_id",
                    "type": "string",
                    "description": "Identifier of the chosen result"
                },
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Identifier of the sent inline message, if known"
                }
            ]
        },
        {
            "name": "updateNewCallbackQuery",
            "description": "A new incoming callback query; for bots only",
            "class": "Update",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Unique query identifier"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who sent the query"
                },
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat, in which the query was sent"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message, from which the query originated"
                },
                {
                    "name": "chat_instance",
                    "type": "int64",
                    "description": "Identifier that uniquely corresponds to the chat to which the message was sent"
                },
                {
                    "name": "payload",
                    "type": "CallbackQueryPayload",
                    "description": "Query payload"
                }
            ]
        },
        {
            "name": "updateNewInlineCallbackQuery",
            "description": "A new incoming callback query from a message sent via a bot; for bots only",
            "class": "Update",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Unique query identifier"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who sent the query"
                },
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Identifier of the inline message, from which the query originated"
                },
                {
                    "name": "chat_instance",
                    "type": "int64",
                    "description": "An identifier uniquely corresponding to the chat a message was sent to"
                },
                {
                    "name": "payload",
                    "type": "CallbackQueryPayload",
                    "description": "Query payload"
                }
            ]
        },
        {
            "name": "updateNewShippingQuery",
            "description": "A new incoming shipping query; for bots only. Only for invoices with flexible price",
            "class": "Update",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Unique query identifier"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who sent the query"
                },
                {
                    "name": "invoice_payload",
                    "type": "string",
                    "description": "Invoice payload"
                },
                {
                    "name": "shipping_address",
                    "type": "address",
                    "description": "User shipping address"
                }
            ]
        },
        {
            "name": "updateNewPreCheckoutQuery",
            "description": "A new incoming pre-checkout query; for bots only. Contains full information about a checkout",
            "class": "Update",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "Unique query identifier"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who sent the query"
                },
                {
                    "name": "currency",
                    "type": "string",
                    "description": "Currency for the product price"
                },
                {
                    "name": "total_amount",
                    "type": "int53",
                    "description": "Total price for the product, in the minimal quantity of the currency"
                },
                {
                    "name": "invoice_payload",
                    "type": "bytes",
                    "description": "Invoice payload"
                },
                {
                    "name": "shipping_option_id",
                    "type": "string",
                    "description": "Identifier of a shipping option chosen by the user; may be empty if not applicable"
                },
                {
                    "name": "order_info",
                    "type": "orderInfo",
                    "description": "Information about the order; may be null"
                }
            ]
        },
        {
            "name": "updateNewCustomEvent",
            "description": "A new incoming event; for bots only",
            "class": "Update",
            "properties": [
                {
                    "name": "event",
                    "type": "string",
                    "description": "A JSON-serialized event"
                }
            ]
        },
        {
            "name": "updateNewCustomQuery",
            "description": "A new incoming query; for bots only",
            "class": "Update",
            "properties": [
                {
                    "name": "id",
                    "type": "int64",
                    "description": "The query identifier"
                },
                {
                    "name": "data",
                    "type": "string",
                    "description": "JSON-serialized query data"
                },
                {
                    "name": "timeout",
                    "type": "int32",
                    "description": "Query timeout"
                }
            ]
        },
        {
            "name": "testInt",
            "description": "A simple object containing a number; for testing only",
            "class": "TestInt",
            "properties": [
                {
                    "name": "value",
                    "type": "int32",
                    "description": "Number"
                }
            ]
        },
        {
            "name": "testString",
            "description": "A simple object containing a string; for testing only",
            "class": "TestString",
            "properties": [
                {
                    "name": "value",
                    "type": "string",
                    "description": "String"
                }
            ]
        },
        {
            "name": "testBytes",
            "description": "A simple object containing a sequence of bytes; for testing only",
            "class": "TestBytes",
            "properties": [
                {
                    "name": "value",
                    "type": "bytes",
                    "description": "Bytes"
                }
            ]
        },
        {
            "name": "testVectorInt",
            "description": "A simple object containing a vector of numbers; for testing only",
            "class": "TestVectorInt",
            "properties": [
                {
                    "name": "value",
                    "type": "vector\u003cint32\u003e",
                    "description": "Vector of numbers"
                }
            ]
        },
        {
            "name": "testVectorIntObject",
            "description": "A simple object containing a vector of objects that hold a number; for testing only",
            "class": "TestVectorIntObject",
            "properties": [
                {
                    "name": "value",
                    "type": "vector\u003ctestInt\u003e",
                    "description": "Vector of objects"
                }
            ]
        },
        {
            "name": "testVectorString",
            "description": "A simple object containing a vector of strings; for testing only",
            "class": "TestVectorString",
            "properties": [
                {
                    "name": "value",
                    "type": "vector\u003cstring\u003e",
                    "description": "Vector of strings"
                }
            ]
        },
        {
            "name": "testVectorStringObject",
            "description": "A simple object containing a vector of objects that hold a string; for testing only",
            "class": "TestVectorStringObject",
            "properties": [
                {
                    "name": "value",
                    "type": "vector\u003ctestString\u003e",
                    "description": "Vector of objects"
                }
            ]
        }
    ],
    "classes": [
        {
            "name": "AuthenticationCodeType",
            "description": "Provides information about the method by which an authentication code is delivered to the user"
        },
        {
            "name": "AuthorizationState",
            "description": "Represents the current authorization state of the client"
        },
        {
            "name": "InputFile",
            "description": "Points to a file"
        },
        {
            "name": "MaskPoint",
            "description": "Part of the face, relative to which a mask should be placed"
        },
        {
            "name": "LinkState",
            "description": "Represents the relationship between user A and user B. For incoming_link, user A is the current user; for outgoing_link, user B is the current user"
        },
        {
            "name": "UserType",
            "description": "Represents the type of the user. The following types are possible: regular users, deleted users and bots"
        },
        {
            "name": "ChatMemberStatus",
            "description": "Provides information about the status of a member in a chat"
        },
        {
            "name": "ChatMembersFilter",
            "description": "Specifies the kind of chat members to return in searchChatMembers"
        },
        {
            "name": "SupergroupMembersFilter",
            "description": "Specifies the kind of chat members to return in getSupergroupMembers"
        },
        {
            "name": "SecretChatState",
            "description": "Describes the current secret chat state"
        },
        {
            "name": "MessageForwardInfo",
            "description": "Contains information about the initial sender of a forwarded message"
        },
        {
            "name": "MessageSendingState",
            "description": "Contains information about the sending state of the message"
        },
        {
            "name": "NotificationSettingsScope",
            "description": "Describes the types of chats to which notification settings are applied"
        },
        {
            "name": "ChatType",
            "description": "Describes the type of a chat"
        },
        {
            "name": "KeyboardButtonType",
            "description": "Describes a keyboard button type"
        },
        {
            "name": "InlineKeyboardButtonType",
            "description": "Describes the type of an inline keyboard button"
        },
        {
            "name": "ReplyMarkup",
            "description": "Contains a description of a custom keyboard and actions that can be done with it to quickly reply to bots"
        },
        {
            "name": "RichText",
            "description": "Describes a text object inside an instant-view web page"
        },
        {
            "name": "PageBlock",
            "description": "Describes a block of an instant view web page"
        },
        {
            "name": "InputCredentials",
            "description": "Contains information about the payment method chosen by the user"
        },
        {
            "name": "PassportElementType",
            "description": "Contains the type of a Telegram Passport element"
        },
        {
            "name": "PassportElement",
            "description": "Contains information about a Telegram Passport element"
        },
        {
            "name": "InputPassportElement",
            "description": "Contains information about a Telegram Passport element to be saved"
        },
        {
            "name": "PassportElementErrorSource",
            "description": "Contains the description of an error in a Telegram Passport element"
        },
        {
            "name": "InputPassportElementErrorSource",
            "description": "Contains the description of an error in a Telegram Passport element; for bots only"
        },
        {
            "name": "MessageContent",
            "description": "Contains the content of a message"
        },
        {
            "name": "TextEntityType",
            "description": "Represents a part of the text which must be formatted differently"
        },
        {
            "name": "InputMessageContent",
            "description": "The content of a message to send"
        },
        {
            "name": "SearchMessagesFilter",
            "description": "Represents a filter for message search results"
        },
        {
            "name": "ChatAction",
            "description": "Describes the different types of activity in a chat"
        },
        {
            "name": "UserStatus",
            "description": "Describes the last time the user was online"
        },
        {
            "name": "CallDiscardReason",
            "description": "Describes the reason why a call was discarded"
        },
        {
            "name": "CallState",
            "description": "Describes the current call state"
        },
        {
            "name": "InputInlineQueryResult",
            "description": "Represents a single result of an inline query; for bots only"
        },
        {
            "name": "InlineQueryResult",
            "description": "Represents a single result of an inline query"
        },
        {
            "name": "CallbackQueryPayload",
            "description": "Represents a payload of a callback query"
        },
        {
            "name": "ChatEventAction",
            "description": "Represents a chat event"
        },
        {
            "name": "LanguagePackStringValue",
            "description": "Represents the value of a string in a language pack"
        },
        {
            "name": "DeviceToken",
            "description": "Represents a data needed to subscribe for push notifications. To use specific push notification service, you must specify the correct application platform and upload valid server authentication data at https://my.telegram.org"
        },
        {
            "name": "CheckChatUsernameResult",
            "description": "Represents result of checking whether a username can be set for a chat"
        },
        {
            "name": "OptionValue",
            "description": "Represents the value of an option"
        },
        {
            "name": "UserPrivacySettingRule",
            "description": "Represents a single rule for managing privacy settings"
        },
        {
            "name": "UserPrivacySetting",
            "description": "Describes available user privacy settings"
        },
        {
            "name": "ChatReportReason",
            "description": "Describes the reason why a chat is reported"
        },
        {
            "name": "FileType",
            "description": "Represents the type of a file"
        },
        {
            "name": "NetworkType",
            "description": "Represents the type of a network"
        },
        {
            "name": "NetworkStatisticsEntry",
            "description": "Contains statistics about network usage"
        },
        {
            "name": "ConnectionState",
            "description": "Describes the current state of the connection to Telegram servers"
        },
        {
            "name": "TopChatCategory",
            "description": "Represents the categories of chats for which a list of frequently used chats can be retrieved"
        },
        {
            "name": "TMeURLType",
            "description": "Describes the type of a URL linking to an internal Telegram entity"
        },
        {
            "name": "TextParseMode",
            "description": "Describes the way the text should be parsed for TextEntities"
        },
        {
            "name": "ProxyType",
            "description": "Describes the type of the proxy server"
        },
        {
            "name": "Update",
            "description": "Contains notifications about data changes"
        }
    ],
    "functions": [
        {
            "name": "getAuthorizationState",
            "description": "Returns the current authorization state; this is an offline request. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state",
            "class": "AuthorizationState",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setTdlibParameters",
            "description": "Sets the parameters for TDLib initialization. Works only when the current authorization state is authorizationStateWaitTdlibParameters",
            "class": "Ok",
            "properties": [
                {
                    "name": "parameters",
                    "type": "tdlibParameters",
                    "description": "Parameters"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "checkDatabaseEncryptionKey",
            "description": "Checks the database encryption key for correctness. Works only when the current authorization state is authorizationStateWaitEncryptionKey",
            "class": "Ok",
            "properties": [
                {
                    "name": "encryption_key",
                    "type": "bytes",
                    "description": "Encryption key to check or set up"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setAuthenticationPhoneNumber",
            "description": "Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitPhoneNumber",
            "class": "Ok",
            "properties": [
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "The phone number of the user, in international format"
                },
                {
                    "name": "allow_flash_call",
                    "type": "Bool",
                    "description": "Pass true if the authentication code may be sent via flash call to the specified phone number"
                },
                {
                    "name": "is_current_phone_number",
                    "type": "Bool",
                    "description": "Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "resendAuthenticationCode",
            "description": "Re-sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitCode and the next_code_type of the result is not null",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "checkAuthenticationCode",
            "description": "Checks the authentication code. Works only when the current authorization state is authorizationStateWaitCode",
            "class": "Ok",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "description": "The verification code received via SMS, Telegram message, phone call, or flash call"
                },
                {
                    "name": "first_name",
                    "type": "string",
                    "description": "If the user is not yet registered, the first name of the user; 1-255 characters"
                },
                {
                    "name": "last_name",
                    "type": "string",
                    "description": "If the user is not yet registered; the last name of the user; optional; 0-255 characters"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "checkAuthenticationPassword",
            "description": "Checks the authentication password for correctness. Works only when the current authorization state is authorizationStateWaitPassword",
            "class": "Ok",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "The password to check"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "requestAuthenticationPasswordRecovery",
            "description": "Requests to send a password recovery code to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "recoverAuthenticationPassword",
            "description": "Recovers the password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword",
            "class": "Ok",
            "properties": [
                {
                    "name": "recovery_code",
                    "type": "string",
                    "description": "Recovery code to check"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "checkAuthenticationBotToken",
            "description": "Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in",
            "class": "Ok",
            "properties": [
                {
                    "name": "token",
                    "type": "string",
                    "description": "The bot token"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "logOut",
            "description": "Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "close",
            "description": "Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes, updateAuthorizationState with authorizationStateClosed will be sent",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "destroy",
            "description": "Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed. After the destruction completes updateAuthorizationState with authorizationStateClosed will be sent",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setDatabaseEncryptionKey",
            "description": "Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain",
            "class": "Ok",
            "properties": [
                {
                    "name": "new_encryption_key",
                    "type": "bytes",
                    "description": "New encryption key"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getPasswordState",
            "description": "Returns the current state of 2-step verification",
            "class": "PasswordState",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setPassword",
            "description": "Changes the password for the user. If a new recovery email address is specified, then the error EMAIL_UNCONFIRMED is returned and the password change will not be applied until the new recovery email address has been confirmed. The application should periodically call getPasswordState to check whether the new email address has been confirmed",
            "class": "PasswordState",
            "properties": [
                {
                    "name": "old_password",
                    "type": "string",
                    "description": "Previous password of the user"
                },
                {
                    "name": "new_password",
                    "type": "string",
                    "description": "New password of the user; may be empty to remove the password"
                },
                {
                    "name": "new_hint",
                    "type": "string",
                    "description": "New password hint; may be empty"
                },
                {
                    "name": "set_recovery_email_address",
                    "type": "Bool",
                    "description": "Pass true if the recovery email address should be changed"
                },
                {
                    "name": "new_recovery_email_address",
                    "type": "string",
                    "description": "New recovery email address; may be empty"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getRecoveryEmailAddress",
            "description": "Returns a recovery email address that was previously set up. This method can be used to verify a password provided by the user",
            "class": "RecoveryEmailAddress",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "The password for the current user"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setRecoveryEmailAddress",
            "description": "Changes the recovery email address of the user. If a new recovery email address is specified, then the error EMAIL_UNCONFIRMED is returned and the email address will not be changed until the new email has been confirmed. The application should periodically call getPasswordState to check whether the email address has been confirmed. If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation",
            "class": "PasswordState",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password of the current user"
                },
                {
                    "name": "new_recovery_email_address",
                    "type": "string",
                    "description": "New recovery email address"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "requestPasswordRecovery",
            "description": "Requests to send a password recovery code to an email address that was previously set up",
            "class": "EmailAddressAuthenticationCodeInfo",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "recoverPassword",
            "description": "Recovers the password using a recovery code sent to an email address that was previously set up",
            "class": "PasswordState",
            "properties": [
                {
                    "name": "recovery_code",
                    "type": "string",
                    "description": "Recovery code to check"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "createTemporaryPassword",
            "description": "Creates a new temporary password for processing payments",
            "class": "TemporaryPasswordState",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "Persistent user password"
                },
                {
                    "name": "valid_for",
                    "type": "int32",
                    "description": "Time during which the temporary password will be valid, in seconds; should be between 60 and 86400"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getTemporaryPasswordState",
            "description": "Returns information about the current temporary password",
            "class": "TemporaryPasswordState",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "processDcUpdate",
            "description": "Handles a DC_UPDATE push service notification. Can be called before authorization",
            "class": "Ok",
            "properties": [
                {
                    "name": "dc",
                    "type": "string",
                    "description": "Value of the \"dc\" parameter of the notification"
                },
                {
                    "name": "addr",
                    "type": "string",
                    "description": "Value of the \"addr\" parameter of the notification"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getMe",
            "description": "Returns the current user",
            "class": "User",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getUser",
            "description": "Returns information about a user by their identifier. This is an offline request if the current user is not a bot",
            "class": "User",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getUserFullInfo",
            "description": "Returns full information about a user by their identifier",
            "class": "UserFullInfo",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getBasicGroup",
            "description": "Returns information about a basic group by its identifier. This is an offline request if the current user is not a bot",
            "class": "BasicGroup",
            "properties": [
                {
                    "name": "basic_group_id",
                    "type": "int32",
                    "description": "Basic group identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getBasicGroupFullInfo",
            "description": "Returns full information about a basic group by its identifier",
            "class": "BasicGroupFullInfo",
            "properties": [
                {
                    "name": "basic_group_id",
                    "type": "int32",
                    "description": "Basic group identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getSupergroup",
            "description": "Returns information about a supergroup or channel by its identifier. This is an offline request if the current user is not a bot",
            "class": "Supergroup",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Supergroup or channel identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getSupergroupFullInfo",
            "description": "Returns full information about a supergroup or channel by its identifier, cached for up to 1 minute",
            "class": "SupergroupFullInfo",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Supergroup or channel identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getSecretChat",
            "description": "Returns information about a secret chat by its identifier. This is an offline request",
            "class": "SecretChat",
            "properties": [
                {
                    "name": "secret_chat_id",
                    "type": "int32",
                    "description": "Secret chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getChat",
            "description": "Returns information about a chat by its identifier, this is an offline request if the current user is not a bot",
            "class": "Chat",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getMessage",
            "description": "Returns information about a message",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat the message belongs to"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message to get"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getRepliedMessage",
            "description": "Returns information about a message that is replied by given message",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat the message belongs to"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message reply to which get"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getChatPinnedMessage",
            "description": "Returns information about a pinned chat message",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat the message belongs to"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getMessages",
            "description": "Returns information about messages. If a message is not found, returns null on the corresponding position of the result",
            "class": "Messages",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat the messages belong to"
                },
                {
                    "name": "message_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "Identifiers of the messages to get"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getFile",
            "description": "Returns information about a file; this is an offline request",
            "class": "File",
            "properties": [
                {
                    "name": "file_id",
                    "type": "int32",
                    "description": "Identifier of the file to get"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getRemoteFile",
            "description": "Returns information about a file by its remote ID; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message",
            "class": "File",
            "properties": [
                {
                    "name": "remote_file_id",
                    "type": "string",
                    "description": "Remote identifier of the file to get"
                },
                {
                    "name": "file_type",
                    "type": "FileType",
                    "description": "File type, if known"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getChats",
            "description": "Returns an ordered list of chats. Chats are sorted by the pair (order, chat_id) in decreasing order. (For example, to get a list of chats from the beginning, the offset_order should be equal to 2^63 - 1). For optimal performance the number of returned chats is chosen by the library.",
            "class": "Chats",
            "properties": [
                {
                    "name": "offset_order",
                    "type": "int64",
                    "description": "Chat order to return chats from"
                },
                {
                    "name": "offset_chat_id",
                    "type": "int53",
                    "description": "Chat identifier to return chats from"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "The maximum number of chats to be returned. It is possible that fewer chats than the limit are returned even if the end of the list is not reached"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchPublicChat",
            "description": "Searches a public chat by its username. Currently only private chats, supergroups and channels can be public. Returns the chat if found; otherwise an error is returned",
            "class": "Chat",
            "properties": [
                {
                    "name": "username",
                    "type": "string",
                    "description": "Username to be resolved"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "searchPublicChats",
            "description": "Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results",
            "class": "Chats",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchChats",
            "description": "Searches for the specified query in the title and username of already known chats, this is an offline request. Returns chats in the order seen in the chat list",
            "class": "Chats",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for. If the query is empty, returns up to 20 recently found chats"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of chats to be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchChatsOnServer",
            "description": "Searches for the specified query in the title and username of already known chats via request to the server. Returns chats in the order seen in the chat list",
            "class": "Chats",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of chats to be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getTopChats",
            "description": "Returns a list of frequently used chats. Supported only if the chat info database is enabled",
            "class": "Chats",
            "properties": [
                {
                    "name": "category",
                    "type": "TopChatCategory",
                    "description": "Category of chats to be returned"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of chats to be returned; up to 30"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "removeTopChat",
            "description": "Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled",
            "class": "Ok",
            "properties": [
                {
                    "name": "category",
                    "type": "TopChatCategory",
                    "description": "Category of frequently used chats"
                },
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "addRecentlyFoundChat",
            "description": "Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat to add"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "removeRecentlyFoundChat",
            "description": "Removes a chat from the list of recently found chats",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat to be removed"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "clearRecentlyFoundChats",
            "description": "Clears the list of recently found chats",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "checkChatUsername",
            "description": "Checks whether a username can be set for a chat",
            "class": "CheckChatUsernameResult",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int64",
                    "description": "Chat identifier; should be identifier of a supergroup chat, or a channel chat, or a private chat with self, or zero if chat is being created"
                },
                {
                    "name": "username",
                    "type": "string",
                    "description": "Username to be checked"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getCreatedPublicChats",
            "description": "Returns a list of public chats created by the user",
            "class": "Chats",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getGroupsInCommon",
            "description": "Returns a list of common chats with a given user. Chats are sorted by their type and creation date",
            "class": "Chats",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "offset_chat_id",
                    "type": "int53",
                    "description": "Chat identifier starting from which to return chats; use 0 for the first request"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of chats to be returned; up to 100"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getChatHistory",
            "description": "Returns messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id). For optimal performance the number of returned messages is chosen by the library. This is an offline request if only_local is true",
            "class": "Messages",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "from_message_id",
                    "type": "int53",
                    "description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message"
                },
                {
                    "name": "offset",
                    "type": "int32",
                    "description": "Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached"
                },
                {
                    "name": "only_local",
                    "type": "Bool",
                    "description": "If true, returns only messages that are available locally without sending network requests"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "deleteChatHistory",
            "description": "Deletes all messages in the chat only for the user. Cannot be used in channels and public supergroups",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "remove_from_chat_list",
                    "type": "Bool",
                    "description": "Pass true if the chat should be removed from the chats list"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchChatMessages",
            "description": "Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query (searchSecretMessages should be used instead), or without an enabled message database. For optimal performance the number of returned messages is chosen by the library",
            "class": "Messages",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat in which to search messages"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "If not 0, only messages sent by the specified user will be returned. Not supported in secret chats"
                },
                {
                    "name": "from_message_id",
                    "type": "int53",
                    "description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message"
                },
                {
                    "name": "offset",
                    "type": "int32",
                    "description": "Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached"
                },
                {
                    "name": "filter",
                    "type": "SearchMessagesFilter",
                    "description": "Filter for message content in the search results"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchMessages",
            "description": "Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library",
            "class": "Messages",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                },
                {
                    "name": "offset_date",
                    "type": "int32",
                    "description": "The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message"
                },
                {
                    "name": "offset_chat_id",
                    "type": "int53",
                    "description": "The chat identifier of the last found message, or 0 for the first request"
                },
                {
                    "name": "offset_message_id",
                    "type": "int53",
                    "description": "The message identifier of the last found message, or 0 for the first request"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "The maximum number of messages to be returned, up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchSecretMessages",
            "description": "Searches for messages in secret chats. Returns the results in reverse chronological order. For optimal performance the number of returned messages is chosen by the library",
            "class": "FoundMessages",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat in which to search. Specify 0 to search in all secret chats"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for. If empty, searchChatMessages should be used instead"
                },
                {
                    "name": "from_search_id",
                    "type": "int64",
                    "description": "The identifier from the result of a previous request, use 0 to get results from the last message"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of messages to be returned; up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached"
                },
                {
                    "name": "filter",
                    "type": "SearchMessagesFilter",
                    "description": "A filter for the content of messages in the search results"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchCallMessages",
            "description": "Searches for call messages. Returns the results in reverse chronological order (i. e., in order of decreasing message_id). For optimal performance the number of returned messages is chosen by the library",
            "class": "Messages",
            "properties": [
                {
                    "name": "from_message_id",
                    "type": "int53",
                    "description": "Identifier of the message from which to search; use 0 to get results from the last message"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "The maximum number of messages to be returned; up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached"
                },
                {
                    "name": "only_missed",
                    "type": "Bool",
                    "description": "If true, returns only messages with missed calls"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchChatRecentLocationMessages",
            "description": "Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user",
            "class": "Messages",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of messages to be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getActiveLiveLocationMessages",
            "description": "Returns all active live locations that should be updated by the client. The list is persistent across application restarts only if the message database is used",
            "class": "Messages",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getChatMessageByDate",
            "description": "Returns the last message sent in a chat no later than the specified date",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "date",
                    "type": "int32",
                    "description": "Point in time (Unix timestamp) relative to which to search for messages"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getChatMessageCount",
            "description": "Returns approximate number of messages of the specified type in the chat",
            "class": "Count",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat in which to count messages"
                },
                {
                    "name": "filter",
                    "type": "SearchMessagesFilter",
                    "description": "Filter for message content; searchMessagesFilterEmpty is unsupported in this function"
                },
                {
                    "name": "return_local",
                    "type": "Bool",
                    "description": "If true, returns count that is available locally without sending network requests, returning -1 if the number of messages is unknown"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getPublicMessageLink",
            "description": "Returns a public HTTPS link to a message. Available only for messages in public supergroups and channels",
            "class": "PublicMessageLink",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat to which the message belongs"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "for_album",
                    "type": "Bool",
                    "description": "Pass true if a link for a whole media album should be returned"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "sendMessage",
            "description": "Sends a message. Returns the sent message",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Target chat"
                },
                {
                    "name": "reply_to_message_id",
                    "type": "int53",
                    "description": "Identifier of the message to reply to or 0"
                },
                {
                    "name": "disable_notification",
                    "type": "Bool",
                    "description": "Pass true to disable notification for the message. Not supported in secret chats"
                },
                {
                    "name": "from_background",
                    "type": "Bool",
                    "description": "Pass true if the message is sent from the background"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "Markup for replying to the message; for bots only"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be sent"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "sendMessageAlbum",
            "description": "Sends messages grouped together into an album. Currently only photo and video messages can be grouped into an album. Returns sent messages",
            "class": "Messages",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Target chat"
                },
                {
                    "name": "reply_to_message_id",
                    "type": "int53",
                    "description": "Identifier of a message to reply to or 0"
                },
                {
                    "name": "disable_notification",
                    "type": "Bool",
                    "description": "Pass true to disable notification for the messages. Not supported in secret chats"
                },
                {
                    "name": "from_background",
                    "type": "Bool",
                    "description": "Pass true if the messages are sent from the background"
                },
                {
                    "name": "input_message_contents",
                    "type": "vector\u003cInputMessageContent\u003e",
                    "description": "Contents of messages to be sent"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "sendBotStartMessage",
            "description": "Invites a bot to a chat (if it is not yet a member) and sends it the /start command. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message",
            "class": "Message",
            "properties": [
                {
                    "name": "bot_user_id",
                    "type": "int32",
                    "description": "Identifier of the bot"
                },
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the target chat"
                },
                {
                    "name": "parameter",
                    "type": "string",
                    "description": "A hidden parameter sent to the bot for deep linking purposes (https://api.telegram.org/bots#deep-linking)"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendInlineQueryResultMessage",
            "description": "Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Target chat"
                },
                {
                    "name": "reply_to_message_id",
                    "type": "int53",
                    "description": "Identifier of a message to reply to or 0"
                },
                {
                    "name": "disable_notification",
                    "type": "Bool",
                    "description": "Pass true to disable notification for the message. Not supported in secret chats"
                },
                {
                    "name": "from_background",
                    "type": "Bool",
                    "description": "Pass true if the message is sent from background"
                },
                {
                    "name": "query_id",
                    "type": "int64",
                    "description": "Identifier of the inline query"
                },
                {
                    "name": "result_id",
                    "type": "string",
                    "description": "Identifier of the inline result"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "forwardMessages",
            "description": "Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message",
            "class": "Messages",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat to which to forward messages"
                },
                {
                    "name": "from_chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat from which to forward messages"
                },
                {
                    "name": "message_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "Identifiers of the messages to forward"
                },
                {
                    "name": "disable_notification",
                    "type": "Bool",
                    "description": "Pass true to disable notification for the message, doesn't work if messages are forwarded to a secret chat"
                },
                {
                    "name": "from_background",
                    "type": "Bool",
                    "description": "Pass true if the message is sent from the background"
                },
                {
                    "name": "as_album",
                    "type": "Bool",
                    "description": "True, if the messages should be grouped into an album after forwarding. For this to work, no more than 10 messages may be forwarded, and all of them must be photo or video messages"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "sendChatSetTTLMessage",
            "description": "Changes the current TTL setting (sets a new self-destruct timer) in a secret chat and sends the corresponding message",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "ttl",
                    "type": "int32",
                    "description": "New TTL value, in seconds"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "sendChatScreenshotTakenNotification",
            "description": "Sends a notification about a screenshot taken in a chat. Supported only in private and secret chats",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "addLocalMessage",
            "description": "Adds a local message to a chat. The message is persistent across application restarts only if the message database is used. Returns the added message",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Target chat"
                },
                {
                    "name": "sender_user_id",
                    "type": "int32",
                    "description": "Identifier of the user who will be shown as the sender of the message; may be 0 for channel posts"
                },
                {
                    "name": "reply_to_message_id",
                    "type": "int53",
                    "description": "Identifier of the message to reply to or 0"
                },
                {
                    "name": "disable_notification",
                    "type": "Bool",
                    "description": "Pass true to disable notification for the message"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "The content of the message to be added"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "deleteMessages",
            "description": "Deletes messages",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "Identifiers of the messages to be deleted"
                },
                {
                    "name": "revoke",
                    "type": "Bool",
                    "description": "Pass true to try to delete outgoing messages for all chat members (may fail if messages are too old). Always true for supergroups, channels and secret chats"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "deleteChatMessagesFromUser",
            "description": "Deletes all messages sent by the specified user to a chat. Supported only in supergroups; requires can_delete_messages administrator privileges",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "editMessageText",
            "description": "Edits the text of a message (or a text of a game message). Returns the edited message after the edit is completed on the server side",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat the message belongs to"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup; for bots only"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "New text content of the message. Should be of type InputMessageText"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "editMessageLiveLocation",
            "description": "Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed on the server side",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat the message belongs to"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup; for bots only"
                },
                {
                    "name": "location",
                    "type": "location",
                    "description": "New location content of the message; may be null. Pass null to stop sharing the live location"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "editMessageMedia",
            "description": "Edits the content of a message with an animation, an audio, a document, a photo or a video. The media in the message can't be replaced if the message was set to self-destruct. Media can't be replaced by self-destructing media. Media in an album can be edited only to contain a photo or a video. Returns the edited message after the edit is completed on the server side",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat the message belongs to"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup; for bots only"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "New content of the message. Must be one of the following types: InputMessageAnimation, InputMessageAudio, InputMessageDocument, InputMessagePhoto or InputMessageVideo"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "editMessageCaption",
            "description": "Edits the message content caption. Returns the edited message after the edit is completed on the server side",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat the message belongs to"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup; for bots only"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "New message content caption; 0-GetOption(\"message_caption_length_max\") characters"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "editMessageReplyMarkup",
            "description": "Edits the message reply markup; for bots only. Returns the edited message after the edit is completed on the server side",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat the message belongs to"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "editInlineMessageText",
            "description": "Edits the text of an inline text or game message sent via a bot; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Inline message identifier"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "New text content of the message. Should be of type InputMessageText"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "editInlineMessageLiveLocation",
            "description": "Edits the content of a live location in an inline message sent via a bot; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Inline message identifier"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup"
                },
                {
                    "name": "location",
                    "type": "location",
                    "description": "New location content of the message; may be null. Pass null to stop sharing the live location"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "editInlineMessageMedia",
            "description": "Edits the content of a message with an animation, an audio, a document, a photo or a video in an inline message sent via a bot; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Inline message identifier"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup; for bots only"
                },
                {
                    "name": "input_message_content",
                    "type": "InputMessageContent",
                    "description": "New content of the message. Must be one of the following types: InputMessageAnimation, InputMessageAudio, InputMessageDocument, InputMessagePhoto or InputMessageVideo"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "editInlineMessageCaption",
            "description": "Edits the caption of an inline message sent via a bot; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Inline message identifier"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup"
                },
                {
                    "name": "caption",
                    "type": "formattedText",
                    "description": "New message content caption; 0-GetOption(\"message_caption_length_max\") characters"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "editInlineMessageReplyMarkup",
            "description": "Edits the reply markup of an inline message sent via a bot; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Inline message identifier"
                },
                {
                    "name": "reply_markup",
                    "type": "ReplyMarkup",
                    "description": "The new message reply markup"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "getTextEntities",
            "description": "Returns all entities (mentions, hashtags, cashtags, bot commands, URLs, and email addresses) contained in the text. This is an offline method. Can be called before authorization. Can be called synchronously",
            "class": "TextEntities",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "The text in which to look for entites"
                }
            ],
            "is_synchronous": true,
            "type": 1
        },
        {
            "name": "parseTextEntities",
            "description": "Parses Bold, Italic, Code, Pre, PreCode and TextURL entities contained in the text. This is an offline method. Can be called before authorization. Can be called synchronously",
            "class": "FormattedText",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "description": "The text which should be parsed"
                },
                {
                    "name": "parse_mode",
                    "type": "TextParseMode",
                    "description": "Text parse mode"
                }
            ],
            "is_synchronous": true,
            "type": 1
        },
        {
            "name": "getFileMimeType",
            "description": "Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously",
            "class": "Text",
            "properties": [
                {
                    "name": "file_name",
                    "type": "string",
                    "description": "The name of the file or path to the file"
                }
            ],
            "is_synchronous": true,
            "type": 1
        },
        {
            "name": "getFileExtension",
            "description": "Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously",
            "class": "Text",
            "properties": [
                {
                    "name": "mime_type",
                    "type": "string",
                    "description": "The MIME type of the file"
                }
            ],
            "is_synchronous": true,
            "type": 1
        },
        {
            "name": "cleanFileName",
            "description": "Removes potentially dangerous characters from the name of a file. The encoding of the file name is supposed to be UTF-8. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously",
            "class": "Text",
            "properties": [
                {
                    "name": "file_name",
                    "type": "string",
                    "description": "File name or path to the file"
                }
            ],
            "is_synchronous": true,
            "type": 1
        },
        {
            "name": "getLanguagePackString",
            "description": "Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. This is an offline method. Can be called before authorization. Can be called synchronously",
            "class": "LanguagePackStringValue",
            "properties": [
                {
                    "name": "language_pack_database_path",
                    "type": "string",
                    "description": "Path to the language pack database in which strings are stored"
                },
                {
                    "name": "localization_target",
                    "type": "string",
                    "description": "Localization target to which the language pack belongs"
                },
                {
                    "name": "language_pack_id",
                    "type": "string",
                    "description": "Language pack identifier"
                },
                {
                    "name": "key",
                    "type": "string",
                    "description": "Language pack key of the string to be returned"
                }
            ],
            "is_synchronous": true,
            "type": 1
        },
        {
            "name": "getInlineQueryResults",
            "description": "Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires",
            "class": "InlineQueryResults",
            "properties": [
                {
                    "name": "bot_user_id",
                    "type": "int32",
                    "description": "The identifier of the target bot"
                },
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat, where the query was sent"
                },
                {
                    "name": "user_location",
                    "type": "location",
                    "description": "Location of the user, only if needed"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Text of the query"
                },
                {
                    "name": "offset",
                    "type": "string",
                    "description": "Offset of the first entry to return"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "answerInlineQuery",
            "description": "Sets the result of an inline query; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "inline_query_id",
                    "type": "int64",
                    "description": "Identifier of the inline query"
                },
                {
                    "name": "is_personal",
                    "type": "Bool",
                    "description": "True, if the result of the query can be cached for the specified user"
                },
                {
                    "name": "results",
                    "type": "vector\u003cInputInlineQueryResult\u003e",
                    "description": "The results of the query"
                },
                {
                    "name": "cache_time",
                    "type": "int32",
                    "description": "Allowed time to cache the results of the query, in seconds"
                },
                {
                    "name": "next_offset",
                    "type": "string",
                    "description": "Offset for the next inline query; pass an empty string if there are no more results"
                },
                {
                    "name": "switch_pm_text",
                    "type": "string",
                    "description": "If non-empty, this text should be shown on the button that opens a private chat with the bot and sends a start message to the bot with the parameter switch_pm_parameter"
                },
                {
                    "name": "switch_pm_parameter",
                    "type": "string",
                    "description": "The parameter for the bot start message"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "getCallbackQueryAnswer",
            "description": "Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires",
            "class": "CallbackQueryAnswer",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat with the message"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message from which the query originated"
                },
                {
                    "name": "payload",
                    "type": "CallbackQueryPayload",
                    "description": "Query payload"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "answerCallbackQuery",
            "description": "Sets the result of a callback query; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "callback_query_id",
                    "type": "int64",
                    "description": "Identifier of the callback query"
                },
                {
                    "name": "text",
                    "type": "string",
                    "description": "Text of the answer"
                },
                {
                    "name": "show_alert",
                    "type": "Bool",
                    "description": "If true, an alert should be shown to the user instead of a toast notification"
                },
                {
                    "name": "url",
                    "type": "string",
                    "description": "URL to be opened"
                },
                {
                    "name": "cache_time",
                    "type": "int32",
                    "description": "Time during which the result of the query can be cached, in seconds"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "answerShippingQuery",
            "description": "Sets the result of a shipping query; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "shipping_query_id",
                    "type": "int64",
                    "description": "Identifier of the shipping query"
                },
                {
                    "name": "shipping_options",
                    "type": "vector\u003cshippingOption\u003e",
                    "description": "Available shipping options"
                },
                {
                    "name": "error_message",
                    "type": "string",
                    "description": "An error message, empty on success"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "answerPreCheckoutQuery",
            "description": "Sets the result of a pre-checkout query; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "pre_checkout_query_id",
                    "type": "int64",
                    "description": "Identifier of the pre-checkout query"
                },
                {
                    "name": "error_message",
                    "type": "string",
                    "description": "An error message, empty on success"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "setGameScore",
            "description": "Updates the game score of the specified user in the game; for bots only",
            "class": "Message",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat to which the message with the game"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "edit_message",
                    "type": "Bool",
                    "description": "True, if the message should be edited"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "score",
                    "type": "int32",
                    "description": "The new score"
                },
                {
                    "name": "force",
                    "type": "Bool",
                    "description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "setInlineGameScore",
            "description": "Updates the game score of the specified user in a game; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Inline message identifier"
                },
                {
                    "name": "edit_message",
                    "type": "Bool",
                    "description": "True, if the message should be edited"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "score",
                    "type": "int32",
                    "description": "The new score"
                },
                {
                    "name": "force",
                    "type": "Bool",
                    "description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "getGameHighScores",
            "description": "Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only",
            "class": "GameHighScores",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "The chat that contains the message with the game"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "getInlineGameHighScores",
            "description": "Returns game high scores and some part of the high score table in the range of the specified user; for bots only",
            "class": "GameHighScores",
            "properties": [
                {
                    "name": "inline_message_id",
                    "type": "string",
                    "description": "Inline message identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "deleteChatReplyMarkup",
            "description": "Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a ForceReply reply markup has been used. UpdateChatReplyMarkup will be sent if the reply markup will be changed",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "The message identifier of the used keyboard"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendChatAction",
            "description": "Sends a notification about user activity in a chat",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "action",
                    "type": "ChatAction",
                    "description": "The action description"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "openChat",
            "description": "This method should be called if the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats)",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "closeChat",
            "description": "This method should be called if the chat is closed by the user. Many useful activities depend on the chat being opened or closed",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "viewMessages",
            "description": "This method should be called if messages are being viewed by the user. Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels)",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "message_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "The identifiers of the messages being viewed"
                },
                {
                    "name": "force_read",
                    "type": "Bool",
                    "description": "True, if messages in closed chats should be marked as read"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "openMessageContent",
            "description": "This method should be called if the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message). An updateMessageContentOpened update will be generated if something has changed",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier of the message"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the message with the opened content"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "readAllChatMentions",
            "description": "Marks all mentions in a chat as read",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "createPrivateChat",
            "description": "Returns an existing chat corresponding to a given user",
            "class": "Chat",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "force",
                    "type": "Bool",
                    "description": "If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "createBasicGroupChat",
            "description": "Returns an existing chat corresponding to a known basic group",
            "class": "Chat",
            "properties": [
                {
                    "name": "basic_group_id",
                    "type": "int32",
                    "description": "Basic group identifier"
                },
                {
                    "name": "force",
                    "type": "Bool",
                    "description": "If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "createSupergroupChat",
            "description": "Returns an existing chat corresponding to a known supergroup or channel",
            "class": "Chat",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Supergroup or channel identifier"
                },
                {
                    "name": "force",
                    "type": "Bool",
                    "description": "If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "createSecretChat",
            "description": "Returns an existing chat corresponding to a known secret chat",
            "class": "Chat",
            "properties": [
                {
                    "name": "secret_chat_id",
                    "type": "int32",
                    "description": "Secret chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "createNewBasicGroupChat",
            "description": "Creates a new basic group and sends a corresponding messageBasicGroupChatCreate. Returns the newly created chat",
            "class": "Chat",
            "properties": [
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "Identifiers of users to be added to the basic group"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the new basic group; 1-255 characters"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "createNewSupergroupChat",
            "description": "Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat",
            "class": "Chat",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "description": "Title of the new chat; 1-255 characters"
                },
                {
                    "name": "is_channel",
                    "type": "Bool",
                    "description": "True, if a channel chat should be created"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "Chat description; 0-255 characters"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "createNewSecretChat",
            "description": "Creates a new secret chat. Returns the newly created chat",
            "class": "Chat",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the target user"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "upgradeBasicGroupChatToSupergroupChat",
            "description": "Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and messageChatUpgradeFrom. Deactivates the original basic group",
            "class": "Chat",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of the chat to upgrade"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setChatTitle",
            "description": "Changes the chat title. Supported only for basic groups, supergroups and channels. Requires administrator rights in basic groups and the appropriate administrator rights in supergroups and channels. The title will not be changed until the request to the server has been completed",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "New title of the chat; 1-255 characters"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setChatPhoto",
            "description": "Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires administrator rights in basic groups and the appropriate administrator rights in supergroups and channels. The photo will not be changed before request to the server has been completed",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "photo",
                    "type": "InputFile",
                    "description": "New chat photo. You can use a zero InputFileID to delete the chat photo. Files that are accessible only by HTTP URL are not acceptable"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setChatDraftMessage",
            "description": "Changes the draft message in a chat",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "draft_message",
                    "type": "draftMessage",
                    "description": "New draft message; may be null"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setChatNotificationSettings",
            "description": "Changes the notification settings of a chat",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "notification_settings",
                    "type": "chatNotificationSettings",
                    "description": "New notification settings for the chat"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "toggleChatIsPinned",
            "description": "Changes the pinned state of a chat. You can pin up to GetOption(\"pinned_chat_count_max\") non-secret chats and the same number of secret chats",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "is_pinned",
                    "type": "Bool",
                    "description": "New value of is_pinned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "toggleChatIsMarkedAsUnread",
            "description": "Changes the marked as unread state of a chat",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "is_marked_as_unread",
                    "type": "Bool",
                    "description": "New value of is_marked_as_unread"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "toggleChatDefaultDisableNotification",
            "description": "Changes the value of the default disable_notification parameter, used when a message is sent to a chat",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "default_disable_notification",
                    "type": "Bool",
                    "description": "New value of default_disable_notification"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setChatClientData",
            "description": "Changes client data associated with a chat",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "client_data",
                    "type": "string",
                    "description": "New value of client_data"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "joinChat",
            "description": "Adds current user as a new member to a chat. Private and secret chats can't be joined using this method",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "leaveChat",
            "description": "Removes current user from chat members. Private and secret chats can't be left using this method",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "addChatMember",
            "description": "Adds a new member to a chat. Members can't be added to private or secret chats. Members will not be added until the chat state has been synchronized with the server",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the user"
                },
                {
                    "name": "forward_limit",
                    "type": "int32",
                    "description": "The number of earlier messages from the chat to be forwarded to the new member; up to 300. Ignored for supergroups and channels"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "addChatMembers",
            "description": "Adds multiple new members to a chat. Currently this option is only available for supergroups and channels. This option can't be used to join a chat. Members can't be added to a channel if it has more than 200 members. Members will not be added until the chat state has been synchronized with the server",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "Identifiers of the users to be added to the chat"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setChatMemberStatus",
            "description": "Changes the status of a chat member, needs appropriate privileges. This function is currently not suitable for adding new members to the chat; instead, use addChatMember. The chat member status will not be changed until it has been synchronized with the server",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "status",
                    "type": "ChatMemberStatus",
                    "description": "The new status of the member in the chat"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getChatMember",
            "description": "Returns information about a single member of a chat",
            "class": "ChatMember",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "searchChatMembers",
            "description": "Searches for a specified query in the first name, last name and username of the members of a specified chat. Requires administrator rights in channels",
            "class": "ChatMembers",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "The maximum number of users to be returned"
                },
                {
                    "name": "filter",
                    "type": "ChatMembersFilter",
                    "description": "The type of users to return. By default, chatMembersFilterMembers"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getChatAdministrators",
            "description": "Returns a list of users who are administrators of the chat",
            "class": "Users",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "clearAllDraftMessages",
            "description": "Clears draft messages in all chats",
            "class": "Ok",
            "properties": [
                {
                    "name": "exclude_secret_chats",
                    "type": "Bool",
                    "description": "If true, local draft messages in secret chats will not be cleared"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getScopeNotificationSettings",
            "description": "Returns the notification settings for chats of a given type",
            "class": "ScopeNotificationSettings",
            "properties": [
                {
                    "name": "scope",
                    "type": "NotificationSettingsScope",
                    "description": "Types of chats for which to return the notification settings information"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setScopeNotificationSettings",
            "description": "Changes notification settings for chats of a given type",
            "class": "Ok",
            "properties": [
                {
                    "name": "scope",
                    "type": "NotificationSettingsScope",
                    "description": "Types of chats for which to change the notification settings"
                },
                {
                    "name": "notification_settings",
                    "type": "scopeNotificationSettings",
                    "description": "The new notification settings for the given scope"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "resetAllNotificationSettings",
            "description": "Resets all notification settings to their default values. By default, all chats are unmuted, the sound is set to \"default\" and message previews are shown",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setPinnedChats",
            "description": "Changes the order of pinned chats",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "The new list of pinned chats"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "downloadFile",
            "description": "Asynchronously downloads a file from the cloud. updateFile will be used to notify about the download progress and successful completion of the download. Returns file state just after the download has been started",
            "class": "File",
            "properties": [
                {
                    "name": "file_id",
                    "type": "int32",
                    "description": "Identifier of the file to download"
                },
                {
                    "name": "priority",
                    "type": "int32",
                    "description": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile was called will be downloaded first"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "cancelDownloadFile",
            "description": "Stops the downloading of a file. If a file has already been downloaded, does nothing",
            "class": "Ok",
            "properties": [
                {
                    "name": "file_id",
                    "type": "int32",
                    "description": "Identifier of a file to stop downloading"
                },
                {
                    "name": "only_if_pending",
                    "type": "Bool",
                    "description": "Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "uploadFile",
            "description": "Asynchronously uploads a file to the cloud without sending it in a message. updateFile will be used to notify about upload progress and successful completion of the upload. The file will not have a persistent remote identifier until it will be sent in a message",
            "class": "File",
            "properties": [
                {
                    "name": "file",
                    "type": "InputFile",
                    "description": "File to upload"
                },
                {
                    "name": "file_type",
                    "type": "FileType",
                    "description": "File type"
                },
                {
                    "name": "priority",
                    "type": "int32",
                    "description": "Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which uploadFile was called will be uploaded first"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "cancelUploadFile",
            "description": "Stops the uploading of a file. Supported only for files uploaded by using uploadFile. For other files the behavior is undefined",
            "class": "Ok",
            "properties": [
                {
                    "name": "file_id",
                    "type": "int32",
                    "description": "Identifier of the file to stop uploading"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setFileGenerationProgress",
            "description": "The next part of a file was generated",
            "class": "Ok",
            "properties": [
                {
                    "name": "generation_id",
                    "type": "int64",
                    "description": "The identifier of the generation process"
                },
                {
                    "name": "expected_size",
                    "type": "int32",
                    "description": "Expected size of the generated file, in bytes; 0 if unknown"
                },
                {
                    "name": "local_prefix_size",
                    "type": "int32",
                    "description": "The number of bytes already generated"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "finishFileGeneration",
            "description": "Finishes the file generation",
            "class": "Ok",
            "properties": [
                {
                    "name": "generation_id",
                    "type": "int64",
                    "description": "The identifier of the generation process"
                },
                {
                    "name": "error",
                    "type": "error",
                    "description": "If set, means that file generation has failed and should be terminated"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "deleteFile",
            "description": "Deletes a file from the TDLib file cache",
            "class": "Ok",
            "properties": [
                {
                    "name": "file_id",
                    "type": "int32",
                    "description": "Identifier of the file to delete"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "generateChatInviteLink",
            "description": "Generates a new invite link for a chat; the previously generated link is revoked. Available for basic groups, supergroups, and channels. In basic groups this can be called only by the group's creator; in supergroups and channels this requires appropriate administrator rights",
            "class": "ChatInviteLink",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "checkChatInviteLink",
            "description": "Checks the validity of an invite link for a chat and returns information about the corresponding chat",
            "class": "ChatInviteLinkInfo",
            "properties": [
                {
                    "name": "invite_link",
                    "type": "string",
                    "description": "Invite link to be checked; should begin with \"https://t.me/joinchat/\", \"https://telegram.me/joinchat/\", or \"https://telegram.dog/joinchat/\""
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "joinChatByInviteLink",
            "description": "Uses an invite link to add the current user to the chat if possible. The new member will not be added until the chat state has been synchronized with the server",
            "class": "Chat",
            "properties": [
                {
                    "name": "invite_link",
                    "type": "string",
                    "description": "Invite link to import; should begin with \"https://t.me/joinchat/\", \"https://telegram.me/joinchat/\", or \"https://telegram.dog/joinchat/\""
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "createCall",
            "description": "Creates a new call",
            "class": "CallID",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Identifier of the user to be called"
                },
                {
                    "name": "protocol",
                    "type": "callProtocol",
                    "description": "Description of the call protocols supported by the client"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "acceptCall",
            "description": "Accepts an incoming call",
            "class": "Ok",
            "properties": [
                {
                    "name": "call_id",
                    "type": "int32",
                    "description": "Call identifier"
                },
                {
                    "name": "protocol",
                    "type": "callProtocol",
                    "description": "Description of the call protocols supported by the client"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "discardCall",
            "description": "Discards a call",
            "class": "Ok",
            "properties": [
                {
                    "name": "call_id",
                    "type": "int32",
                    "description": "Call identifier"
                },
                {
                    "name": "is_disconnected",
                    "type": "Bool",
                    "description": "True, if the user was disconnected"
                },
                {
                    "name": "duration",
                    "type": "int32",
                    "description": "The call duration, in seconds"
                },
                {
                    "name": "connection_id",
                    "type": "int64",
                    "description": "Identifier of the connection used during the call"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendCallRating",
            "description": "Sends a call rating",
            "class": "Ok",
            "properties": [
                {
                    "name": "call_id",
                    "type": "int32",
                    "description": "Call identifier"
                },
                {
                    "name": "rating",
                    "type": "int32",
                    "description": "Call rating; 1-5"
                },
                {
                    "name": "comment",
                    "type": "string",
                    "description": "An optional user comment if the rating is less than 5"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendCallDebugInformation",
            "description": "Sends debug information for a call",
            "class": "Ok",
            "properties": [
                {
                    "name": "call_id",
                    "type": "int32",
                    "description": "Call identifier"
                },
                {
                    "name": "debug_information",
                    "type": "string",
                    "description": "Debug information in application-specific format"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "blockUser",
            "description": "Adds a user to the blacklist",
            "class": "Ok",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "unblockUser",
            "description": "Removes a user from the blacklist",
            "class": "Ok",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getBlockedUsers",
            "description": "Returns users that were blocked by the current user",
            "class": "Users",
            "properties": [
                {
                    "name": "offset",
                    "type": "int32",
                    "description": "Number of users to skip in the result; must be non-negative"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of users to return; up to 100"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "importContacts",
            "description": "Adds new contacts or edits existing contacts; contacts' user identifiers are ignored",
            "class": "ImportedContacts",
            "properties": [
                {
                    "name": "contacts",
                    "type": "vector\u003ccontact\u003e",
                    "description": "The list of contacts to import or edit, contact's vCard are ignored and are not imported"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getContacts",
            "description": "Returns all user contacts",
            "class": "Users",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchContacts",
            "description": "Searches for the specified query in the first names, last names and usernames of the known user contacts",
            "class": "Users",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for; can be empty to return all contacts"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of users to be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "removeContacts",
            "description": "Removes users from the contacts list",
            "class": "Ok",
            "properties": [
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "Identifiers of users to be deleted"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getImportedContactCount",
            "description": "Returns the total number of imported contacts",
            "class": "Count",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "changeImportedContacts",
            "description": "Changes imported contacts using the list of current user contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts. Query result depends on the result of the previous query, so only one query is possible at the same time",
            "class": "ImportedContacts",
            "properties": [
                {
                    "name": "contacts",
                    "type": "vector\u003ccontact\u003e",
                    "description": "The new list of contacts, contact's vCard are ignored and are not imported"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "clearImportedContacts",
            "description": "Clears all imported contacts, contacts list remains unchanged",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getUserProfilePhotos",
            "description": "Returns the profile photos of a user. The result of this query may be outdated: some photos might have been deleted already",
            "class": "UserProfilePhotos",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "offset",
                    "type": "int32",
                    "description": "The number of photos to skip; must be non-negative"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of photos to be returned; up to 100"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getStickers",
            "description": "Returns stickers from the installed sticker sets that correspond to a given emoji. If the emoji is not empty, favorite and recently used stickers may also be returned",
            "class": "Stickers",
            "properties": [
                {
                    "name": "emoji",
                    "type": "string",
                    "description": "String representation of emoji. If empty, returns all known installed stickers"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of stickers to be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchStickers",
            "description": "Searches for stickers from public sticker sets that correspond to a given emoji",
            "class": "Stickers",
            "properties": [
                {
                    "name": "emoji",
                    "type": "string",
                    "description": "String representation of emoji; must be non-empty"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of stickers to be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getInstalledStickerSets",
            "description": "Returns a list of installed sticker sets",
            "class": "StickerSets",
            "properties": [
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "Pass true to return mask sticker sets; pass false to return ordinary sticker sets"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getArchivedStickerSets",
            "description": "Returns a list of archived sticker sets",
            "class": "StickerSets",
            "properties": [
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "Pass true to return mask stickers sets; pass false to return ordinary sticker sets"
                },
                {
                    "name": "offset_sticker_set_id",
                    "type": "int64",
                    "description": "Identifier of the sticker set from which to return the result"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of sticker sets to return"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getTrendingStickerSets",
            "description": "Returns a list of trending sticker sets",
            "class": "StickerSets",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getAttachedStickerSets",
            "description": "Returns a list of sticker sets attached to a file. Currently only photos and videos can have attached sticker sets",
            "class": "StickerSets",
            "properties": [
                {
                    "name": "file_id",
                    "type": "int32",
                    "description": "File identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getStickerSet",
            "description": "Returns information about a sticker set by its identifier",
            "class": "StickerSet",
            "properties": [
                {
                    "name": "set_id",
                    "type": "int64",
                    "description": "Identifier of the sticker set"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "searchStickerSet",
            "description": "Searches for a sticker set by its name",
            "class": "StickerSet",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "Name of the sticker set"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "searchInstalledStickerSets",
            "description": "Searches for installed sticker sets by looking for specified query in their title and name",
            "class": "StickerSets",
            "properties": [
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "Pass true to return mask sticker sets; pass false to return ordinary sticker sets"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of sticker sets to return"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "searchStickerSets",
            "description": "Searches for ordinary sticker sets by looking for specified query in their title and name. Excludes installed sticker sets from the results",
            "class": "StickerSets",
            "properties": [
                {
                    "name": "query",
                    "type": "string",
                    "description": "Query to search for"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "changeStickerSet",
            "description": "Installs/uninstalls or activates/archives a sticker set",
            "class": "Ok",
            "properties": [
                {
                    "name": "set_id",
                    "type": "int64",
                    "description": "Identifier of the sticker set"
                },
                {
                    "name": "is_installed",
                    "type": "Bool",
                    "description": "The new value of is_installed"
                },
                {
                    "name": "is_archived",
                    "type": "Bool",
                    "description": "The new value of is_archived. A sticker set can't be installed and archived simultaneously"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "viewTrendingStickerSets",
            "description": "Informs the server that some trending sticker sets have been viewed by the user",
            "class": "Ok",
            "properties": [
                {
                    "name": "sticker_set_ids",
                    "type": "vector\u003cint64\u003e",
                    "description": "Identifiers of viewed trending sticker sets"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "reorderInstalledStickerSets",
            "description": "Changes the order of installed sticker sets",
            "class": "Ok",
            "properties": [
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "Pass true to change the order of mask sticker sets; pass false to change the order of ordinary sticker sets"
                },
                {
                    "name": "sticker_set_ids",
                    "type": "vector\u003cint64\u003e",
                    "description": "Identifiers of installed sticker sets in the new correct order"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getRecentStickers",
            "description": "Returns a list of recently used stickers",
            "class": "Stickers",
            "properties": [
                {
                    "name": "is_attached",
                    "type": "Bool",
                    "description": "Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "addRecentSticker",
            "description": "Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list",
            "class": "Stickers",
            "properties": [
                {
                    "name": "is_attached",
                    "type": "Bool",
                    "description": "Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers"
                },
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker file to add"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "removeRecentSticker",
            "description": "Removes a sticker from the list of recently used stickers",
            "class": "Ok",
            "properties": [
                {
                    "name": "is_attached",
                    "type": "Bool",
                    "description": "Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers"
                },
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker file to delete"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "clearRecentStickers",
            "description": "Clears the list of recently used stickers",
            "class": "Ok",
            "properties": [
                {
                    "name": "is_attached",
                    "type": "Bool",
                    "description": "Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getFavoriteStickers",
            "description": "Returns favorite stickers",
            "class": "Stickers",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "addFavoriteSticker",
            "description": "Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list",
            "class": "Ok",
            "properties": [
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker file to add"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "removeFavoriteSticker",
            "description": "Removes a sticker from the list of favorite stickers",
            "class": "Ok",
            "properties": [
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker file to delete from the list"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getStickerEmojis",
            "description": "Returns emoji corresponding to a sticker",
            "class": "StickerEmojis",
            "properties": [
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker file identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getSavedAnimations",
            "description": "Returns saved animations",
            "class": "Animations",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "addSavedAnimation",
            "description": "Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type \"video/mp4\" can be added to the list",
            "class": "Ok",
            "properties": [
                {
                    "name": "animation",
                    "type": "InputFile",
                    "description": "The animation file to be added. Only animations known to the server (i.e. successfully sent via a message) can be added to the list"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "removeSavedAnimation",
            "description": "Removes an animation from the list of saved animations",
            "class": "Ok",
            "properties": [
                {
                    "name": "animation",
                    "type": "InputFile",
                    "description": "Animation file to be removed"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getRecentInlineBots",
            "description": "Returns up to 20 recently used inline bots in the order of their last usage",
            "class": "Users",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "searchHashtags",
            "description": "Searches for recently used hashtags by their prefix",
            "class": "Hashtags",
            "properties": [
                {
                    "name": "prefix",
                    "type": "string",
                    "description": "Hashtag prefix to search for"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of hashtags to be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "removeRecentHashtag",
            "description": "Removes a hashtag from the list of recently used hashtags",
            "class": "Ok",
            "properties": [
                {
                    "name": "hashtag",
                    "type": "string",
                    "description": "Hashtag to delete"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getWebPagePreview",
            "description": "Returns a web page preview by the text of the message. Do not call this function too often. Returns a 404 error if the web page has no preview",
            "class": "WebPage",
            "properties": [
                {
                    "name": "text",
                    "type": "formattedText",
                    "description": "Message text with formatting"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getWebPageInstantView",
            "description": "Returns an instant view version of a web page if available. Returns a 404 error if the web page has no instant view page",
            "class": "WebPageInstantView",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "The web page URL"
                },
                {
                    "name": "force_full",
                    "type": "Bool",
                    "description": "If true, the full instant view for the web page will be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setProfilePhoto",
            "description": "Uploads a new profile photo for the current user. If something changes, updateUser will be sent",
            "class": "Ok",
            "properties": [
                {
                    "name": "photo",
                    "type": "InputFile",
                    "description": "Profile photo to set. inputFileID and inputFileRemote may still be unsupported"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "deleteProfilePhoto",
            "description": "Deletes a profile photo. If something changes, updateUser will be sent",
            "class": "Ok",
            "properties": [
                {
                    "name": "profile_photo_id",
                    "type": "int64",
                    "description": "Identifier of the profile photo to delete"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setName",
            "description": "Changes the first and last name of the current user. If something changes, updateUser will be sent",
            "class": "Ok",
            "properties": [
                {
                    "name": "first_name",
                    "type": "string",
                    "description": "The new value of the first name for the user; 1-255 characters"
                },
                {
                    "name": "last_name",
                    "type": "string",
                    "description": "The new value of the optional last name for the user; 0-255 characters"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setBio",
            "description": "Changes the bio of the current user",
            "class": "Ok",
            "properties": [
                {
                    "name": "bio",
                    "type": "string",
                    "description": "The new value of the user bio; 0-70 characters without line feeds"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setUsername",
            "description": "Changes the username of the current user. If something changes, updateUser will be sent",
            "class": "Ok",
            "properties": [
                {
                    "name": "username",
                    "type": "string",
                    "description": "The new value of the username. Use an empty string to remove the username"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "changePhoneNumber",
            "description": "Changes the phone number of the user and sends an authentication code to the user's new phone number. On success, returns information about the sent code",
            "class": "AuthenticationCodeInfo",
            "properties": [
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "The new phone number of the user in international format"
                },
                {
                    "name": "allow_flash_call",
                    "type": "Bool",
                    "description": "Pass true if the code can be sent via flash call to the specified phone number"
                },
                {
                    "name": "is_current_phone_number",
                    "type": "Bool",
                    "description": "Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "resendChangePhoneNumberCode",
            "description": "Re-sends the authentication code sent to confirm a new phone number for the user. Works only if the previously received authenticationCodeInfo next_code_type was not null",
            "class": "AuthenticationCodeInfo",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "checkChangePhoneNumberCode",
            "description": "Checks the authentication code sent to confirm a new phone number of the user",
            "class": "Ok",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "description": "Verification code received by SMS, phone call or flash call"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getActiveSessions",
            "description": "Returns all active sessions of the current user",
            "class": "Sessions",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "terminateSession",
            "description": "Terminates a session of the current user",
            "class": "Ok",
            "properties": [
                {
                    "name": "session_id",
                    "type": "int64",
                    "description": "Session identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "terminateAllOtherSessions",
            "description": "Terminates all other sessions of the current user",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getConnectedWebsites",
            "description": "Returns all website where the current user used Telegram to log in",
            "class": "ConnectedWebsites",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "disconnectWebsite",
            "description": "Disconnects website from the current user's Telegram account",
            "class": "Ok",
            "properties": [
                {
                    "name": "website_id",
                    "type": "int64",
                    "description": "Website identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "disconnectAllWebsites",
            "description": "Disconnects all websites from the current user's Telegram account",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "toggleBasicGroupAdministrators",
            "description": "Toggles the \"All members are admins\" setting in basic groups; requires creator privileges in the group",
            "class": "Ok",
            "properties": [
                {
                    "name": "basic_group_id",
                    "type": "int32",
                    "description": "Identifier of the basic group"
                },
                {
                    "name": "everyone_is_administrator",
                    "type": "Bool",
                    "description": "New value of everyone_is_administrator"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setSupergroupUsername",
            "description": "Changes the username of a supergroup or channel, requires creator privileges in the supergroup or channel",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup or channel"
                },
                {
                    "name": "username",
                    "type": "string",
                    "description": "New value of the username. Use an empty string to remove the username"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setSupergroupStickerSet",
            "description": "Changes the sticker set of a supergroup; requires appropriate rights in the supergroup",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup"
                },
                {
                    "name": "sticker_set_id",
                    "type": "int64",
                    "description": "New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "toggleSupergroupInvites",
            "description": "Toggles whether all members of a supergroup can add new members; requires appropriate administrator rights in the supergroup.",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup"
                },
                {
                    "name": "anyone_can_invite",
                    "type": "Bool",
                    "description": "New value of anyone_can_invite"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "toggleSupergroupSignMessages",
            "description": "Toggles sender signatures messages sent in a channel; requires appropriate administrator rights in the channel.",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the channel"
                },
                {
                    "name": "sign_messages",
                    "type": "Bool",
                    "description": "New value of sign_messages"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "toggleSupergroupIsAllHistoryAvailable",
            "description": "Toggles whether the message history of a supergroup is available to new members; requires appropriate administrator rights in the supergroup.",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "The identifier of the supergroup"
                },
                {
                    "name": "is_all_history_available",
                    "type": "Bool",
                    "description": "The new value of is_all_history_available"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setSupergroupDescription",
            "description": "Changes information about a supergroup or channel; requires appropriate administrator rights",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup or channel"
                },
                {
                    "name": "description",
                    "type": "string",
                    "description": "New supergroup or channel description; 0-255 characters"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "pinSupergroupMessage",
            "description": "Pins a message in a supergroup or channel; requires appropriate administrator rights in the supergroup or channel",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup or channel"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Identifier of the new pinned message"
                },
                {
                    "name": "disable_notification",
                    "type": "Bool",
                    "description": "True, if there should be no notification about the pinned message"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "unpinSupergroupMessage",
            "description": "Removes the pinned message from a supergroup or channel; requires appropriate administrator rights in the supergroup or channel",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup or channel"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "reportSupergroupSpam",
            "description": "Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Supergroup identifier"
                },
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "message_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "Identifiers of messages sent in the supergroup by the user. This list must be non-empty"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getSupergroupMembers",
            "description": "Returns information about members or banned users in a supergroup or channel. Can be used only if SupergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters",
            "class": "ChatMembers",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup or channel"
                },
                {
                    "name": "filter",
                    "type": "SupergroupMembersFilter",
                    "description": "The type of users to return. By default, supergroupMembersRecent"
                },
                {
                    "name": "offset",
                    "type": "int32",
                    "description": "Number of users to skip"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "The maximum number of users be returned; up to 200"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "deleteSupergroup",
            "description": "Deletes a supergroup or channel along with all messages in the corresponding chat. This will release the supergroup or channel username and remove all members; requires creator privileges in the supergroup or channel. Chats with more than 1000 members can't be deleted using this method",
            "class": "Ok",
            "properties": [
                {
                    "name": "supergroup_id",
                    "type": "int32",
                    "description": "Identifier of the supergroup or channel"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "closeSecretChat",
            "description": "Closes a secret chat, effectively transfering its state to secretChatStateClosed",
            "class": "Ok",
            "properties": [
                {
                    "name": "secret_chat_id",
                    "type": "int32",
                    "description": "Secret chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getChatEventLog",
            "description": "Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only in supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i. e., in order of decreasing event_id)",
            "class": "ChatEvents",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "query",
                    "type": "string",
                    "description": "Search query by which to filter events"
                },
                {
                    "name": "from_event_id",
                    "type": "int64",
                    "description": "Identifier of an event from which to return results. Use 0 to get results from the latest events"
                },
                {
                    "name": "limit",
                    "type": "int32",
                    "description": "Maximum number of events to return; up to 100"
                },
                {
                    "name": "filters",
                    "type": "chatEventLogFilters",
                    "description": "The types of events to return. By default, all types will be returned"
                },
                {
                    "name": "user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "User identifiers by which to filter events. By default, events relating to all users will be returned"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getPaymentForm",
            "description": "Returns an invoice payment form. This method should be called when the user presses inlineKeyboardButtonBuy",
            "class": "PaymentForm",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier of the Invoice message"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "validateOrderInfo",
            "description": "Validates the order information provided by a user and returns the available shipping options for a flexible invoice",
            "class": "ValidatedOrderInfo",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier of the Invoice message"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                },
                {
                    "name": "order_info",
                    "type": "orderInfo",
                    "description": "The order information, provided by the user"
                },
                {
                    "name": "allow_save",
                    "type": "Bool",
                    "description": "True, if the order information can be saved"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendPaymentForm",
            "description": "Sends a filled-out payment form to the bot for final verification",
            "class": "PaymentResult",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier of the Invoice message"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                },
                {
                    "name": "order_info_id",
                    "type": "string",
                    "description": "Identifier returned by ValidateOrderInfo, or an empty string"
                },
                {
                    "name": "shipping_option_id",
                    "type": "string",
                    "description": "Identifier of a chosen shipping option, if applicable"
                },
                {
                    "name": "credentials",
                    "type": "InputCredentials",
                    "description": "The credentials chosen by user for payment"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getPaymentReceipt",
            "description": "Returns information about a successful payment",
            "class": "PaymentReceipt",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier of the PaymentSuccessful message"
                },
                {
                    "name": "message_id",
                    "type": "int53",
                    "description": "Message identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getSavedOrderInfo",
            "description": "Returns saved order info, if any",
            "class": "OrderInfo",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "deleteSavedOrderInfo",
            "description": "Deletes saved order info",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "deleteSavedCredentials",
            "description": "Deletes saved credentials for all payment provider bots",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getSupportUser",
            "description": "Returns a user that can be contacted to get support",
            "class": "User",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getWallpapers",
            "description": "Returns background wallpapers",
            "class": "Wallpapers",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getLocalizationTargetInfo",
            "description": "Returns information about the current localization target. This is an offline request if only_local is true",
            "class": "LocalizationTargetInfo",
            "properties": [
                {
                    "name": "only_local",
                    "type": "Bool",
                    "description": "If true, returns only locally available information without sending network requests"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getLanguagePackStrings",
            "description": "Returns strings from a language pack in the current localization target by their keys",
            "class": "LanguagePackStrings",
            "properties": [
                {
                    "name": "language_pack_id",
                    "type": "string",
                    "description": "Language pack identifier of the strings to be returned"
                },
                {
                    "name": "keys",
                    "type": "vector\u003cstring\u003e",
                    "description": "Language pack keys of the strings to be returned; leave empty to request all available strings"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setCustomLanguagePack",
            "description": "Adds or changes a custom language pack to the current localization target",
            "class": "Ok",
            "properties": [
                {
                    "name": "info",
                    "type": "languagePackInfo",
                    "description": "Information about the language pack. Language pack ID must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters"
                },
                {
                    "name": "strings",
                    "type": "vector\u003clanguagePackString\u003e",
                    "description": "Strings of the new language pack"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "editCustomLanguagePackInfo",
            "description": "Edits information about a custom language pack in the current localization target",
            "class": "Ok",
            "properties": [
                {
                    "name": "info",
                    "type": "languagePackInfo",
                    "description": "New information about the custom language pack"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setCustomLanguagePackString",
            "description": "Adds, edits or deletes a string in a custom language pack",
            "class": "Ok",
            "properties": [
                {
                    "name": "language_pack_id",
                    "type": "string",
                    "description": "Identifier of a previously added custom language pack in the current localization target"
                },
                {
                    "name": "new_string",
                    "type": "languagePackString",
                    "description": "New language pack string"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "deleteLanguagePack",
            "description": "Deletes all information about a language pack in the current localization target. The language pack that is currently in use can't be deleted",
            "class": "Ok",
            "properties": [
                {
                    "name": "language_pack_id",
                    "type": "string",
                    "description": "Identifier of the language pack to delete"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "registerDevice",
            "description": "Registers the currently used device for receiving push notifications",
            "class": "Ok",
            "properties": [
                {
                    "name": "device_token",
                    "type": "DeviceToken",
                    "description": "Device token"
                },
                {
                    "name": "other_user_ids",
                    "type": "vector\u003cint32\u003e",
                    "description": "List of at most 100 user identifiers of other users currently using the client"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getRecentlyVisitedTMeURLs",
            "description": "Returns t.me URLs recently visited by a newly registered user",
            "class": "TMeURLs",
            "properties": [
                {
                    "name": "referrer",
                    "type": "string",
                    "description": "Google Play referrer to identify the user"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setUserPrivacySettingRules",
            "description": "Changes user privacy settings",
            "class": "Ok",
            "properties": [
                {
                    "name": "setting",
                    "type": "UserPrivacySetting",
                    "description": "The privacy setting"
                },
                {
                    "name": "rules",
                    "type": "userPrivacySettingRules",
                    "description": "The new privacy rules"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getUserPrivacySettingRules",
            "description": "Returns the current privacy settings",
            "class": "UserPrivacySettingRules",
            "properties": [
                {
                    "name": "setting",
                    "type": "UserPrivacySetting",
                    "description": "The privacy setting"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getOption",
            "description": "Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before authorization",
            "class": "OptionValue",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the option"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setOption",
            "description": "Sets the value of an option. (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set. Can be called before authorization",
            "class": "Ok",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the option"
                },
                {
                    "name": "value",
                    "type": "OptionValue",
                    "description": "The new value of the option"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setAccountTTL",
            "description": "Changes the period of inactivity after which the account of the current user will automatically be deleted",
            "class": "Ok",
            "properties": [
                {
                    "name": "ttl",
                    "type": "accountTTL",
                    "description": "New account TTL"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getAccountTTL",
            "description": "Returns the period of inactivity after which the account of the current user will automatically be deleted",
            "class": "AccountTTL",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "deleteAccount",
            "description": "Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account. Can be called before authorization when the current authorization state is authorizationStateWaitPassword",
            "class": "Ok",
            "properties": [
                {
                    "name": "reason",
                    "type": "string",
                    "description": "The reason why the account was deleted; optional"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getChatReportSpamState",
            "description": "Returns information on whether the current chat can be reported as spam",
            "class": "ChatReportSpamState",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "changeChatReportSpamState",
            "description": "Used to let the server know whether a chat is spam or not. Can be used only if ChatReportSpamState.can_report_spam is true. After this request, ChatReportSpamState.can_report_spam becomes false forever",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "is_spam_chat",
                    "type": "Bool",
                    "description": "If true, the chat will be reported as spam; otherwise it will be marked as not spam"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "reportChat",
            "description": "Reports a chat to the Telegram moderators. Supported only for supergroups, channels, or private chats with bots, since other chats can't be checked by moderators",
            "class": "Ok",
            "properties": [
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Chat identifier"
                },
                {
                    "name": "reason",
                    "type": "ChatReportReason",
                    "description": "The reason for reporting the chat"
                },
                {
                    "name": "message_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "Identifiers of reported messages, if any"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getStorageStatistics",
            "description": "Returns storage usage statistics",
            "class": "StorageStatistics",
            "properties": [
                {
                    "name": "chat_limit",
                    "type": "int32",
                    "description": "Maximum number of chats with the largest storage usage for which separate statistics should be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getStorageStatisticsFast",
            "description": "Quickly returns approximate storage usage statistics",
            "class": "StorageStatisticsFast",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "optimizeStorage",
            "description": "Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted",
            "class": "StorageStatistics",
            "properties": [
                {
                    "name": "size",
                    "type": "int53",
                    "description": "Limit on the total size of files after deletion. Pass -1 to use the default limit"
                },
                {
                    "name": "ttl",
                    "type": "int32",
                    "description": "Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit"
                },
                {
                    "name": "count",
                    "type": "int32",
                    "description": "Limit on the total count of files after deletion. Pass -1 to use the default limit"
                },
                {
                    "name": "immunity_delay",
                    "type": "int32",
                    "description": "The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value"
                },
                {
                    "name": "file_types",
                    "type": "vector\u003cFileType\u003e",
                    "description": "If not empty, only files with the given type(s) are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted"
                },
                {
                    "name": "chat_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "If not empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos)"
                },
                {
                    "name": "exclude_chat_ids",
                    "type": "vector\u003cint53\u003e",
                    "description": "If not empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos)"
                },
                {
                    "name": "chat_limit",
                    "type": "int32",
                    "description": "Same as in getStorageStatistics. Affects only returned statistics"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "setNetworkType",
            "description": "Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks, so it should be called whenever the network is changed, even if the network type remains the same. Network type is used to check whether the library can use the network at all and also for collecting detailed network data usage statistics",
            "class": "Ok",
            "properties": [
                {
                    "name": "type",
                    "type": "NetworkType",
                    "description": "The new network type. By default, networkTypeOther"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getNetworkStatistics",
            "description": "Returns network data usage statistics. Can be called before authorization",
            "class": "NetworkStatistics",
            "properties": [
                {
                    "name": "only_current",
                    "type": "Bool",
                    "description": "If true, returns only data for the current library launch"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "addNetworkStatistics",
            "description": "Adds the specified data to data usage statistics. Can be called before authorization",
            "class": "Ok",
            "properties": [
                {
                    "name": "entry",
                    "type": "NetworkStatisticsEntry",
                    "description": "The network statistics entry with the data to be added to statistics"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "resetNetworkStatistics",
            "description": "Resets all network data usage statistics to zero. Can be called before authorization",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getPassportElement",
            "description": "Returns one of the available Telegram Passport elements",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "type",
                    "type": "PassportElementType",
                    "description": "Telegram Passport element type"
                },
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password of the current user"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getAllPassportElements",
            "description": "Returns all available Telegram Passport elements",
            "class": "PassportElements",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password of the current user"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setPassportElement",
            "description": "Adds an element to the user's Telegram Passport. May return an error with a message \"PHONE_VERIFICATION_NEEDED\" or \"EMAIL_VERIFICATION_NEEDED\" if the chosen phone number or the chosen email address must be verified first",
            "class": "PassportElement",
            "properties": [
                {
                    "name": "element",
                    "type": "InputPassportElement",
                    "description": "Input Telegram Passport element"
                },
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password of the current user"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "deletePassportElement",
            "description": "Deletes a Telegram Passport element",
            "class": "Ok",
            "properties": [
                {
                    "name": "type",
                    "type": "PassportElementType",
                    "description": "Element type"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setPassportElementErrors",
            "description": "Informs the user that some of the elements in their Telegram Passport contain errors; for bots only. The user will not be able to resend the elements, until the errors are fixed",
            "class": "Ok",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "User identifier"
                },
                {
                    "name": "errors",
                    "type": "vector\u003cinputPassportElementError\u003e",
                    "description": "The errors"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "getPreferredCountryLanguage",
            "description": "Returns an IETF language tag of the language preferred in the country, which should be used to fill native fields in Telegram Passport personal details. Returns a 404 error if unknown",
            "class": "Text",
            "properties": [
                {
                    "name": "country_code",
                    "type": "string",
                    "description": "A two-letter ISO 3166-1 alpha-2 country code"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendPhoneNumberVerificationCode",
            "description": "Sends a code to verify a phone number to be added to a user's Telegram Passport",
            "class": "AuthenticationCodeInfo",
            "properties": [
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "The phone number of the user, in international format"
                },
                {
                    "name": "allow_flash_call",
                    "type": "Bool",
                    "description": "Pass true if the authentication code may be sent via flash call to the specified phone number"
                },
                {
                    "name": "is_current_phone_number",
                    "type": "Bool",
                    "description": "Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "resendPhoneNumberVerificationCode",
            "description": "Re-sends the code to verify a phone number to be added to a user's Telegram Passport",
            "class": "AuthenticationCodeInfo",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "checkPhoneNumberVerificationCode",
            "description": "Checks the phone number verification code for Telegram Passport",
            "class": "Ok",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "description": "Verification code"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendEmailAddressVerificationCode",
            "description": "Sends a code to verify an email address to be added to a user's Telegram Passport",
            "class": "EmailAddressAuthenticationCodeInfo",
            "properties": [
                {
                    "name": "email_address",
                    "type": "string",
                    "description": "Email address"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "resendEmailAddressVerificationCode",
            "description": "Re-sends the code to verify an email address to be added to a user's Telegram Passport",
            "class": "EmailAddressAuthenticationCodeInfo",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "checkEmailAddressVerificationCode",
            "description": "Checks the email address verification code for Telegram Passport",
            "class": "Ok",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "description": "Verification code"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getPassportAuthorizationForm",
            "description": "Returns a Telegram Passport authorization form for sharing data with a service",
            "class": "PassportAuthorizationForm",
            "properties": [
                {
                    "name": "bot_user_id",
                    "type": "int32",
                    "description": "User identifier of the service's bot"
                },
                {
                    "name": "scope",
                    "type": "string",
                    "description": "Telegram Passport element types requested by the service"
                },
                {
                    "name": "public_key",
                    "type": "string",
                    "description": "Service's public_key"
                },
                {
                    "name": "nonce",
                    "type": "string",
                    "description": "Authorization form nonce provided by the service"
                },
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password of the current user"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendPassportAuthorizationForm",
            "description": "Sends a Telegram Passport authorization form, effectively sharing data with the service",
            "class": "Ok",
            "properties": [
                {
                    "name": "autorization_form_id",
                    "type": "int32",
                    "description": "Authorization form identifier"
                },
                {
                    "name": "types",
                    "type": "vector\u003cPassportElementType\u003e",
                    "description": "Types of Telegram Passport elements chosen by user to complete the authorization form"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendPhoneNumberConfirmationCode",
            "description": "Sends phone number confirmation code. Should be called when user presses \"https://t.me/confirmphone?phone=*******\u0026hash=**********\" or \"tg://confirmphone?phone=*******\u0026hash=**********\" link",
            "class": "AuthenticationCodeInfo",
            "properties": [
                {
                    "name": "hash",
                    "type": "string",
                    "description": "Value of the \"hash\" parameter from the link"
                },
                {
                    "name": "phone_number",
                    "type": "string",
                    "description": "Value of the \"phone\" parameter from the link"
                },
                {
                    "name": "allow_flash_call",
                    "type": "Bool",
                    "description": "Pass true if the authentication code may be sent via flash call to the specified phone number"
                },
                {
                    "name": "is_current_phone_number",
                    "type": "Bool",
                    "description": "Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "resendPhoneNumberConfirmationCode",
            "description": "Resends phone number confirmation code",
            "class": "AuthenticationCodeInfo",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "checkPhoneNumberConfirmationCode",
            "description": "Checks phone number confirmation code",
            "class": "Ok",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "description": "The phone number confirmation code"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "setBotUpdatesStatus",
            "description": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "pending_update_count",
                    "type": "int32",
                    "description": "The number of pending updates"
                },
                {
                    "name": "error_message",
                    "type": "string",
                    "description": "The last error message"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "uploadStickerFile",
            "description": "Uploads a PNG image with a sticker; for bots only; returns the uploaded file",
            "class": "File",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Sticker file owner"
                },
                {
                    "name": "png_sticker",
                    "type": "InputFile",
                    "description": "PNG image with the sticker; must be up to 512 kB in size and fit in 512x512 square"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "createNewStickerSet",
            "description": "Creates a new sticker set; for bots only. Returns the newly created sticker set",
            "class": "StickerSet",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Sticker set owner"
                },
                {
                    "name": "title",
                    "type": "string",
                    "description": "Sticker set title; 1-64 characters"
                },
                {
                    "name": "name",
                    "type": "string",
                    "description": "Sticker set name. Can contain only English letters, digits and underscores. Must end with *\"_by_\u003cbot username\u003e\"* (*\u003cbot_username\u003e* is case insensitive); 1-64 characters"
                },
                {
                    "name": "is_masks",
                    "type": "Bool",
                    "description": "True, if stickers are masks"
                },
                {
                    "name": "stickers",
                    "type": "vector\u003cinputSticker\u003e",
                    "description": "List of stickers to be added to the set"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "addStickerToSet",
            "description": "Adds a new sticker to a set; for bots only. Returns the sticker set",
            "class": "StickerSet",
            "properties": [
                {
                    "name": "user_id",
                    "type": "int32",
                    "description": "Sticker set owner"
                },
                {
                    "name": "name",
                    "type": "string",
                    "description": "Sticker set name"
                },
                {
                    "name": "sticker",
                    "type": "inputSticker",
                    "description": "Sticker to add to the set"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "setStickerPositionInSet",
            "description": "Changes the position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot",
            "class": "Ok",
            "properties": [
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker"
                },
                {
                    "name": "position",
                    "type": "int32",
                    "description": "New position of the sticker in the set, zero-based"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "removeStickerFromSet",
            "description": "Removes a sticker from the set to which it belongs; for bots only. The sticker set must have been created by the bot",
            "class": "Ok",
            "properties": [
                {
                    "name": "sticker",
                    "type": "InputFile",
                    "description": "Sticker"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "getMapThumbnailFile",
            "description": "Returns information about a file with a map thumbnail in PNG format. Only map thumbnail files with size less than 1MB can be downloaded",
            "class": "File",
            "properties": [
                {
                    "name": "location",
                    "type": "location",
                    "description": "Location of the map center"
                },
                {
                    "name": "zoom",
                    "type": "int32",
                    "description": "Map zoom level; 13-20"
                },
                {
                    "name": "width",
                    "type": "int32",
                    "description": "Map width in pixels before applying scale; 16-1024"
                },
                {
                    "name": "height",
                    "type": "int32",
                    "description": "Map height in pixels before applying scale; 16-1024"
                },
                {
                    "name": "scale",
                    "type": "int32",
                    "description": "Map scale; 1-3"
                },
                {
                    "name": "chat_id",
                    "type": "int53",
                    "description": "Identifier of a chat, in which the thumbnail will be shown. Use 0 if unknown"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "acceptTermsOfService",
            "description": "Accepts Telegram terms of services",
            "class": "Ok",
            "properties": [
                {
                    "name": "terms_of_service_id",
                    "type": "string",
                    "description": "Terms of service identifier"
                }
            ],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "sendCustomRequest",
            "description": "Sends a custom request; for bots only",
            "class": "CustomRequestResult",
            "properties": [
                {
                    "name": "method",
                    "type": "string",
                    "description": "The method name"
                },
                {
                    "name": "parameters",
                    "type": "string",
                    "description": "JSON-serialized method parameters"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "answerCustomQuery",
            "description": "Answers a custom query; for bots only",
            "class": "Ok",
            "properties": [
                {
                    "name": "custom_query_id",
                    "type": "int64",
                    "description": "Identifier of a custom query"
                },
                {
                    "name": "data",
                    "type": "string",
                    "description": "JSON-serialized answer to the query"
                }
            ],
            "is_synchronous": false,
            "type": 3
        },
        {
            "name": "setAlarm",
            "description": "Succeeds after a specified amount of time has passed. Can be called before authorization. Can be called before initialization",
            "class": "Ok",
            "properties": [
                {
                    "name": "seconds",
                    "type": "double",
                    "description": "Number of seconds before the function returns"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getCountryCode",
            "description": "Uses current user IP to found his country. Returns two-letter ISO 3166-1 alpha-2 country code. Can be called before authorization",
            "class": "Text",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getInviteText",
            "description": "Returns the default text for invitation messages to be used as a placeholder when the current user invites friends to Telegram",
            "class": "Text",
            "properties": [],
            "is_synchronous": false,
            "type": 2
        },
        {
            "name": "getDeepLinkInfo",
            "description": "Returns information about a tg:// deep link. Use \"tg://need_update_for_some_feature\" or \"tg:some_unsupported_feature\" for testing. Returns a 404 error for unknown links. Can be called before authorization",
            "class": "DeepLinkInfo",
            "properties": [
                {
                    "name": "link",
                    "type": "string",
                    "description": "The link"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "addProxy",
            "description": "Adds a proxy server for network requests. Can be called before authorization",
            "class": "Proxy",
            "properties": [
                {
                    "name": "server",
                    "type": "string",
                    "description": "Proxy server IP address"
                },
                {
                    "name": "port",
                    "type": "int32",
                    "description": "Proxy server port"
                },
                {
                    "name": "enable",
                    "type": "Bool",
                    "description": "True, if the proxy should be enabled"
                },
                {
                    "name": "type",
                    "type": "ProxyType",
                    "description": "Proxy type"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "editProxy",
            "description": "Edits an existing proxy server for network requests. Can be called before authorization",
            "class": "Proxy",
            "properties": [
                {
                    "name": "proxy_id",
                    "type": "int32",
                    "description": "Proxy identifier"
                },
                {
                    "name": "server",
                    "type": "string",
                    "description": "Proxy server IP address"
                },
                {
                    "name": "port",
                    "type": "int32",
                    "description": "Proxy server port"
                },
                {
                    "name": "enable",
                    "type": "Bool",
                    "description": "True, if the proxy should be enabled"
                },
                {
                    "name": "type",
                    "type": "ProxyType",
                    "description": "Proxy type"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "enableProxy",
            "description": "Enables a proxy. Only one proxy can be enabled at a time. Can be called before authorization",
            "class": "Ok",
            "properties": [
                {
                    "name": "proxy_id",
                    "type": "int32",
                    "description": "Proxy identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "disableProxy",
            "description": "Disables the currently enabled proxy. Can be called before authorization",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "removeProxy",
            "description": "Removes a proxy server. Can be called before authorization",
            "class": "Ok",
            "properties": [
                {
                    "name": "proxy_id",
                    "type": "int32",
                    "description": "Proxy identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getProxies",
            "description": "Returns list of proxies that are currently set up. Can be called before authorization",
            "class": "Proxies",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "getProxyLink",
            "description": "Returns an HTTPS link, which can be used to add a proxy. Available only for SOCKS5 and MTProto proxies. Can be called before authorization",
            "class": "Text",
            "properties": [
                {
                    "name": "proxy_id",
                    "type": "int32",
                    "description": "Proxy identifier"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "pingProxy",
            "description": "Computes time needed to receive a response from a Telegram server through a proxy. Can be called before authorization",
            "class": "Seconds",
            "properties": [
                {
                    "name": "proxy_id",
                    "type": "int32",
                    "description": "Proxy identifier. Use 0 to ping a Telegram server without a proxy"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testCallEmpty",
            "description": "Does nothing; for testing only",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testCallString",
            "description": "Returns the received string; for testing only",
            "class": "TestString",
            "properties": [
                {
                    "name": "x",
                    "type": "string",
                    "description": "String to return"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testCallBytes",
            "description": "Returns the received bytes; for testing only",
            "class": "TestBytes",
            "properties": [
                {
                    "name": "x",
                    "type": "bytes",
                    "description": "Bytes to return"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testCallVectorInt",
            "description": "Returns the received vector of numbers; for testing only",
            "class": "TestVectorInt",
            "properties": [
                {
                    "name": "x",
                    "type": "vector\u003cint32\u003e",
                    "description": "Vector of numbers to return"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testCallVectorIntObject",
            "description": "Returns the received vector of objects containing a number; for testing only",
            "class": "TestVectorIntObject",
            "properties": [
                {
                    "name": "x",
                    "type": "vector\u003ctestInt\u003e",
                    "description": "Vector of objects to return"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testCallVectorString",
            "description": "For testing only request. Returns the received vector of strings; for testing only",
            "class": "TestVectorString",
            "properties": [
                {
                    "name": "x",
                    "type": "vector\u003cstring\u003e",
                    "description": "Vector of strings to return"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testCallVectorStringObject",
            "description": "Returns the received vector of objects containing a string; for testing only",
            "class": "TestVectorStringObject",
            "properties": [
                {
                    "name": "x",
                    "type": "vector\u003ctestString\u003e",
                    "description": "Vector of objects to return"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testSquareInt",
            "description": "Returns the squared received number; for testing only",
            "class": "TestInt",
            "properties": [
                {
                    "name": "x",
                    "type": "int32",
                    "description": "Number to square"
                }
            ],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testNetwork",
            "description": "Sends a simple network request to the Telegram servers; for testing only",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testGetDifference",
            "description": "Forces an updates.getDifference call to the Telegram servers; for testing only",
            "class": "Ok",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testUseUpdate",
            "description": "Does nothing and ensures that the Update object is used; for testing only",
            "class": "Update",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        },
        {
            "name": "testUseError",
            "description": "Does nothing and ensures that the Error object is used; for testing only",
            "class": "Error",
            "properties": [],
            "is_synchronous": false,
            "type": 1
        }
    ]
}